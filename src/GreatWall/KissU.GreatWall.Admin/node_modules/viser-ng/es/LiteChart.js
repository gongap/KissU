var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, ViewChild } from '@angular/core';
import viser from 'viser';
function retain(obj, attr) {
    var newObj = Object.create(null);
    for (var item in obj) {
        if (obj.hasOwnProperty(item)) {
            var arrAttr = Array.isArray(attr) ? attr : [attr];
            if (arrAttr.indexOf(item) >= 0) {
                newObj[item] = obj[item];
            }
        }
    }
    return newObj;
}
var LiteChart = (function () {
    function LiteChart() {
        this.config = {};
        this.views = {};
        this.chart = null;
    }
    LiteChart.prototype.combineViewConfig = function (props, config) {
        if (props.data) {
            config.data = props.data;
        }
        if (props.scale) {
            config.scale = props.scale;
        }
        if (props.filter) {
            config.filter = props.filter;
        }
        if (props.guide) {
            config.guide = props.guide;
        }
        config.tooltip = props.tooltip ? props.tooltip : true;
        config.legend = props.legend ? props.legend : true;
        config.axis = props.axis ? props.axis : true;
        return config;
    };
    LiteChart.prototype.combineChartConfig = function (props, config) {
        var chartRetain = [
            'height', 'width', 'animate', 'forceFit',
            'background', 'plotBackground', 'padding', 'renderer',
        ];
        config.chart = retain(props, chartRetain);
        return config;
    };
    LiteChart.prototype.combineSeriesConfig = function (props, config) {
        var regSeries = [
            'pie',
            'sector',
            'line',
            'smoothLine',
            'dashLine',
            'area',
            'stackArea',
            'smoothArea',
            'bar',
            'stackBar',
            'dodgeBar',
            'interval',
            'stackInterval',
            'dodgeInterval',
            'point',
            'funnel',
            'pyramid',
            'schema',
            'box',
            'candle',
            'polygon',
            'contour',
            'heatmap',
            'edge',
            'sankey',
            'errobBar',
            'jitterPoint',
        ];
        for (var _i = 0, regSeries_1 = regSeries; _i < regSeries_1.length; _i++) {
            var res = regSeries_1[_i];
            if (props[res]) {
                config.series = __assign({}, config.series, { quickType: res });
                break;
            }
        }
        return config;
    };
    LiteChart.prototype.ngAfterViewInit = function () {
        if (this.chart) {
            this.chart.destroy();
        }
        this.initChart();
    };
    LiteChart.prototype.getProps = function (allProps) {
        var strippingProperties = ['chart', 'chartDiv', 'config', 'context', 'constructor',
            'combineViewConfig', 'combineChartConfig', 'combineContentConfig', 'ngAfterViewInit', 'getProps',
            'combineSeriesConfig', 'getViewChartConfig', 'initChart', 'ngOnChanges', 'renderChart'];
        if (allProps) {
            var properties = {};
            for (var key in allProps) {
                if (strippingProperties.indexOf(key) === -1) {
                    properties[key] = allProps[key];
                }
            }
            return properties;
        }
        return allProps;
    };
    LiteChart.prototype.getViewChartConfig = function (config) {
        var chartProperties = ['forceFit', 'height', 'width', 'container'];
        var chart = {};
        if (config.chart) {
            for (var key in config.chart) {
                if (chartProperties.indexOf(key) > -1) {
                    chart[key] = config.chart[key];
                }
            }
        }
        return chart;
    };
    LiteChart.prototype.initChart = function (rerender) {
        var props = this.getProps(this);
        this.combineChartConfig(props, this.config);
        this.combineViewConfig(props, this.config);
        this.combineSeriesConfig(props, this.config);
        this.config.chart = this.getViewChartConfig(this.config);
        this.renderChart(rerender);
    };
    LiteChart.prototype.ngOnChanges = function (changes) {
        if (!this.chart) {
            return;
        }
        this.initChart(true);
    };
    LiteChart.prototype.renderChart = function (rerender) {
        this.config.chart.container = this.chartDiv.nativeElement;
        if (rerender) {
            this.chart.repaint(this.config);
        }
        else {
            this.chart = viser(this.config);
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "data");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], LiteChart.prototype, "width");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], LiteChart.prototype, "height");
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], LiteChart.prototype, "gemo");
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], LiteChart.prototype, "color");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "label");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], LiteChart.prototype, "radius");
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], LiteChart.prototype, "innerRadius");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "forceFit");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "fields");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "type");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "opacity");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "size");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "coord");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "scale");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "axis");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "guide");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "series");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "tooltip");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "facet");
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "legend");
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], LiteChart.prototype, "theme");
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], LiteChart.prototype, "renderer");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "pie");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "sector");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "line");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "smoothLine");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "dashLine");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "area");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "stackArea");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "smoothArea");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "bar");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "stackBar");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "dodgeBar");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "point");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "funnel");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "pyramid");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "schema");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "box");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "candle");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "polygon");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "contour");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "heatmap");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "edge");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "sankey");
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], LiteChart.prototype, "errorBar");
    __decorate([
        ViewChild('chartDom'),
        __metadata("design:type", Object)
    ], LiteChart.prototype, "chartDiv");
    LiteChart = __decorate([
        Component({
            providers: [],
            selector: 'v-liteChart',
            template: "<div #chartDom></div>",
        })
    ], LiteChart);
    return LiteChart;
}());
export { LiteChart };
//# sourceMappingURL=LiteChart.js.map