// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace KissU.Modules.GreatWall.DbMigrator.Migrations
{
    [DbContext(typeof(DesignTimeDbContext))]
    internal class DesignTimeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KissU.Modules.GreatWall.Data.Pos.ApplicationPo", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ApplicationId");

                b.Property<string>("Code");

                b.Property<DateTime?>("CreationTime");

                b.Property<Guid?>("CreatorId");

                b.Property<bool>("Enabled");

                b.Property<string>("Extend");

                b.Property<bool>("IsDeleted");

                b.Property<DateTime?>("LastModificationTime");

                b.Property<Guid?>("LastModifierId");

                b.Property<string>("Name");

                b.Property<bool>("RegisterEnabled");

                b.Property<string>("Remark");

                b.Property<byte[]>("Version")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate();

                b.HasKey("Id");

                b.ToTable("Application", "systems");
            });

            modelBuilder.Entity("KissU.Modules.GreatWall.Data.Pos.ResourcePo", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ResourceId");

                b.Property<Guid?>("ApplicationId");

                b.Property<DateTime?>("CreationTime");

                b.Property<Guid?>("CreatorId");

                b.Property<bool>("Enabled");

                b.Property<string>("Extend");

                b.Property<bool>("IsDeleted");

                b.Property<DateTime?>("LastModificationTime");

                b.Property<Guid?>("LastModifierId");

                b.Property<int>("Level")
                    .HasColumnName("Level");

                b.Property<string>("Name");

                b.Property<Guid?>("ParentId");

                b.Property<string>("Path")
                    .HasColumnName("Path");

                b.Property<string>("PinYin");

                b.Property<string>("Remark");

                b.Property<int?>("SortId");

                b.Property<int>("Type");

                b.Property<string>("Uri");

                b.Property<byte[]>("Version")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate();

                b.HasKey("Id");

                b.HasIndex("ApplicationId");

                b.HasIndex("ParentId");

                b.ToTable("Resource", "systems");
            });

            modelBuilder.Entity("KissU.Modules.GreatWall.Domain.Models.Claim", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClaimId");

                b.Property<DateTime?>("CreationTime");

                b.Property<Guid?>("CreatorId");

                b.Property<bool>("Enabled");

                b.Property<bool>("IsDeleted");

                b.Property<DateTime?>("LastModificationTime");

                b.Property<Guid?>("LastModifierId");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(200);

                b.Property<string>("Remark")
                    .HasMaxLength(500);

                b.Property<int?>("SortId");

                b.Property<byte[]>("Version")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate();

                b.HasKey("Id");

                b.ToTable("Claim", "systems");
            });

            modelBuilder.Entity("KissU.Modules.GreatWall.Domain.Models.Permission", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PermissionId");

                b.Property<DateTime?>("CreationTime");

                b.Property<Guid?>("CreatorId");

                b.Property<bool>("IsDeleted");

                b.Property<bool>("IsDeny");

                b.Property<DateTime?>("LastModificationTime");

                b.Property<Guid?>("LastModifierId");

                b.Property<Guid>("ResourceId");

                b.Property<Guid>("RoleId");

                b.Property<string>("Sign")
                    .HasMaxLength(256);

                b.Property<byte[]>("Version")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate();

                b.HasKey("Id");

                b.ToTable("Permission", "systems");
            });

            modelBuilder.Entity("KissU.Modules.GreatWall.Domain.Models.Role", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RoleId");

                b.Property<string>("Code")
                    .IsRequired()
                    .HasMaxLength(256);

                b.Property<DateTime?>("CreationTime");

                b.Property<Guid?>("CreatorId");

                b.Property<bool>("Enabled");

                b.Property<bool>("IsAdmin");

                b.Property<bool>("IsDeleted");

                b.Property<DateTime?>("LastModificationTime");

                b.Property<Guid?>("LastModifierId");

                b.Property<int>("Level")
                    .HasColumnName("Level");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .IsRequired()
                    .HasMaxLength(256);

                b.Property<Guid?>("ParentId");

                b.Property<string>("Path")
                    .IsRequired()
                    .HasColumnName("Path");

                b.Property<string>("PinYin")
                    .HasMaxLength(200);

                b.Property<string>("Remark")
                    .HasMaxLength(500);

                b.Property<string>("Sign")
                    .HasMaxLength(256);

                b.Property<int?>("SortId");

                b.Property<string>("Type")
                    .IsRequired()
                    .HasMaxLength(80);

                b.Property<byte[]>("Version")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate();

                b.HasKey("Id");

                b.ToTable("Role", "systems");
            });

            modelBuilder.Entity("KissU.Modules.GreatWall.Domain.Models.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UserId");

                b.Property<int?>("AccessFailedCount");

                b.Property<DateTime?>("CreationTime");

                b.Property<Guid?>("CreatorId");

                b.Property<string>("CurrentLoginIp")
                    .HasMaxLength(30);

                b.Property<DateTime?>("CurrentLoginTime");

                b.Property<DateTime?>("DisabledTime");

                b.Property<string>("Email")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed");

                b.Property<bool>("Enabled");

                b.Property<bool>("IsDeleted");

                b.Property<string>("LastLoginIp")
                    .HasMaxLength(30);

                b.Property<DateTime?>("LastLoginTime");

                b.Property<DateTime?>("LastModificationTime");

                b.Property<Guid?>("LastModifierId");

                b.Property<bool>("LockoutEnabled");

                b.Property<DateTimeOffset?>("LockoutEnd");

                b.Property<int?>("LoginCount");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256);

                b.Property<string>("Password")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                    .HasMaxLength(1024);

                b.Property<string>("PhoneNumber")
                    .HasMaxLength(64);

                b.Property<bool>("PhoneNumberConfirmed");

                b.Property<string>("RegisterIp")
                    .HasMaxLength(30);

                b.Property<string>("Remark")
                    .HasMaxLength(500);

                b.Property<string>("SafePassword")
                    .HasMaxLength(256);

                b.Property<string>("SafePasswordHash")
                    .HasMaxLength(1024);

                b.Property<string>("SecurityStamp")
                    .HasMaxLength(1024);

                b.Property<bool>("TwoFactorEnabled");

                b.Property<string>("UserName")
                    .HasMaxLength(256);

                b.Property<byte[]>("Version")
                    .IsConcurrencyToken()
                    .ValueGeneratedOnAddOrUpdate();

                b.HasKey("Id");

                b.ToTable("User", "systems");
            });

            modelBuilder.Entity("KissU.Modules.GreatWall.Domain.Models.UserRole", b =>
            {
                b.Property<Guid>("UserId");

                b.Property<Guid>("RoleId");

                b.HasKey("UserId", "RoleId");

                b.ToTable("UserRole", "systems");
            });

            modelBuilder.Entity("KissU.Modules.GreatWall.Data.Pos.ResourcePo", b =>
            {
                b.HasOne("KissU.Modules.GreatWall.Data.Pos.ApplicationPo", "Application")
                    .WithMany()
                    .HasForeignKey("ApplicationId");

                b.HasOne("KissU.Modules.GreatWall.Data.Pos.ResourcePo", "Parent")
                    .WithMany()
                    .HasForeignKey("ParentId");
            });
#pragma warning restore 612, 618
        }
    }
}
