@using System.Runtime.InteropServices
@using System.IO
@using System.Diagnostics
@{
    var version = typeof(IdentityServer4.Hosting.IdentityServerMiddleware).Assembly.GetName().Version.ToString();
    var process = Process.GetCurrentProcess();
}

<div class="welcome-page">
    <div class="text-center">
        <h1 class="display-4">Welcome to KissU</h1>

        <h5>Environment</h5>
        <p>@RuntimeInformation.FrameworkDescription</p>
        <p>@RuntimeInformation.OSDescription</p>
        <p>IdentityServer4 (version @version)</p>
        <p><a href="~/.well-known/openid-configuration">discovery document</a></p>
    </div>

    <div>
        <h5 class="text-center">Metrics</h5>
        <table width="500" align="center" class="table-striped table-hover">
            <tr>
                <td>Containerized</td>
                <td>@(Environment.GetEnvironmentVariable("DOTNET_RUNNING_IN_CONTAINER") is object ? "true" : "false")</td>
            </tr>
            <tr>
                <td>CPU cores</td>
                <td>@Environment.ProcessorCount</td>
            </tr>
            @if (RuntimeInformation.OSDescription.StartsWith("Linux") && Directory.Exists("/sys/fs/cgroup/memory"))
            {
                <tr>
                    <td>cgroup memory usage</td>
                    <td>@System.IO.File.ReadAllLines("/sys/fs/cgroup/memory/memory.usage_in_bytes")[0]</td>
                </tr>
            }
            <tr>
                <td>Memory, current usage (bytes)</td>
                <td>@process.WorkingSet64</td>
            </tr>
            <tr>
                <td>Memory, max available (bytes)</td>
                <td>@process.MaxWorkingSet</td>
            </tr>
        </table>
    </div>
</div>