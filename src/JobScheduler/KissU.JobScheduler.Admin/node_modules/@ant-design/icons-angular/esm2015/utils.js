/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { generate as generateColor } from '@ant-design/colors';
/** @type {?} */
export const antIconConsolePrefix = '[@ant-design/icons-angular]: ';
/**
 * @param {?} message
 * @return {?}
 */
export function printErr(message) {
    console.error(`${antIconConsolePrefix}${message}.`);
}
/**
 * @param {?} message
 * @return {?}
 */
export function printWarn(message) {
    console.warn(`${antIconConsolePrefix}${message}.`);
}
/**
 * @param {?} primaryColor
 * @return {?}
 */
export function getSecondaryColor(primaryColor) {
    return generateColor(primaryColor)[0];
}
/**
 * @param {?} name
 * @param {?} theme
 * @return {?}
 */
export function withSuffix(name, theme) {
    switch (theme) {
        case 'fill': return `${name}-fill`;
        case 'outline': return `${name}-o`;
        case 'twotone': return `${name}-twotone`;
        case undefined: return name;
        default: throw new Error(`${antIconConsolePrefix}Theme "${theme}" is not a recognized theme!`);
    }
}
/**
 * @param {?} name
 * @param {?} theme
 * @param {?} pri
 * @param {?} sec
 * @return {?}
 */
export function withSuffixAndColor(name, theme, pri, sec) {
    return `${withSuffix(name, theme)}-${pri}-${sec}`;
}
/**
 * @param {?} abbr
 * @return {?}
 */
export function mapAbbrToTheme(abbr) {
    return abbr === 'o' ? 'outline' : (/** @type {?} */ (abbr));
}
/**
 * @param {?} name
 * @return {?}
 */
export function alreadyHasAThemeSuffix(name) {
    return name.endsWith('-fill') || name.endsWith('-o') || name.endsWith('-twotone');
}
/**
 * @param {?} target
 * @return {?}
 */
export function isIconDefinition(target) {
    return (typeof target === 'object' &&
        typeof target.name === 'string' &&
        (typeof target.theme === 'string' || target.theme === undefined) &&
        typeof target.icon === 'string');
}
/**
 * Get an `IconDefinition` object from abbreviation type, like `account-book-fill`.
 * @param {?} str
 * @return {?}
 */
export function getIconDefinitionFromAbbr(str) {
    /** @type {?} */
    const arr = str.split('-');
    /** @type {?} */
    const theme = mapAbbrToTheme(arr.splice(arr.length - 1, 1)[0]);
    /** @type {?} */
    const name = arr.join('-');
    return (/** @type {?} */ ({
        name,
        theme,
        icon: ''
    }));
}
/**
 * @param {?} svg
 * @return {?}
 */
export function cloneSVG(svg) {
    return (/** @type {?} */ (svg.cloneNode(true)));
}
/**
 * Parse inline SVG string and replace colors with placeholders. For twotone icons only.
 * @param {?} raw
 * @return {?}
 */
export function replaceFillColor(raw) {
    return raw
        .replace(/['"]#333['"]/g, '"primaryColor"')
        .replace(/['"]#E6E6E6['"]/g, '"secondaryColor"')
        .replace(/['"]#D9D9D9['"]/g, '"secondaryColor"')
        .replace(/['"]#D8D8D8['"]/g, '"secondaryColor"');
}
/**
 * Split a name with namespace in it into a tuple like [ name, namespace ].
 * @param {?} type
 * @return {?}
 */
export function getNameAndNamespace(type) {
    /** @type {?} */
    const split = type.split(':');
    switch (split.length) {
        case 1: return [type, ''];
        case 2: return [split[1], split[0]];
        default: throw new Error(`${antIconConsolePrefix}The icon type ${type} is not valid!`);
    }
}
/**
 * @param {?} type
 * @return {?}
 */
export function hasNamespace(type) {
    return getNameAndNamespace(type)[1] !== '';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW50LWRlc2lnbi9pY29ucy1hbmd1bGFyLyIsInNvdXJjZXMiOlsidXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLElBQUksYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBRy9ELE1BQU0sT0FBTyxvQkFBb0IsR0FBRywrQkFBK0I7Ozs7O0FBRW5FLE1BQU0sVUFBVSxRQUFRLENBQUMsT0FBZTtJQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsb0JBQW9CLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQztBQUN0RCxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUMsT0FBZTtJQUN2QyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsb0JBQW9CLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNyRCxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxZQUFvQjtJQUNwRCxPQUFPLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QyxDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQVksRUFBRSxLQUE0QjtJQUNuRSxRQUFRLEtBQUssRUFBRTtRQUNiLEtBQUssTUFBTSxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDO1FBQ25DLEtBQUssU0FBUyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDO1FBQ25DLEtBQUssU0FBUyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksVUFBVSxDQUFDO1FBQ3pDLEtBQUssU0FBUyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUM7UUFDNUIsT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLG9CQUFvQixVQUFVLEtBQUssOEJBQThCLENBQUMsQ0FBQztLQUNoRztBQUNILENBQUM7Ozs7Ozs7O0FBRUQs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LCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZW5lcmF0ZSBhcyBnZW5lcmF0ZUNvbG9yIH0gZnJvbSAnQGFudC1kZXNpZ24vY29sb3JzJztcbmltcG9ydCB7IEljb25EZWZpbml0aW9uLCBUaGVtZVR5cGUgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGFudEljb25Db25zb2xlUHJlZml4ID0gJ1tAYW50LWRlc2lnbi9pY29ucy1hbmd1bGFyXTogJztcblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50RXJyKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICBjb25zb2xlLmVycm9yKGAke2FudEljb25Db25zb2xlUHJlZml4fSR7bWVzc2FnZX0uYCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludFdhcm4obWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gIGNvbnNvbGUud2FybihgJHthbnRJY29uQ29uc29sZVByZWZpeH0ke21lc3NhZ2V9LmApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Vjb25kYXJ5Q29sb3IocHJpbWFyeUNvbG9yOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gZ2VuZXJhdGVDb2xvcihwcmltYXJ5Q29sb3IpWzBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2l0aFN1ZmZpeChuYW1lOiBzdHJpbmcsIHRoZW1lOiBUaGVtZVR5cGUgfCB1bmRlZmluZWQpOiBzdHJpbmcge1xuICBzd2l0Y2ggKHRoZW1lKSB7XG4gICAgY2FzZSAnZmlsbCc6IHJldHVybiBgJHtuYW1lfS1maWxsYDtcbiAgICBjYXNlICdvdXRsaW5lJzogcmV0dXJuIGAke25hbWV9LW9gO1xuICAgIGNhc2UgJ3R3b3RvbmUnOiByZXR1cm4gYCR7bmFtZX0tdHdvdG9uZWA7XG4gICAgY2FzZSB1bmRlZmluZWQ6IHJldHVybiBuYW1lO1xuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgJHthbnRJY29uQ29uc29sZVByZWZpeH1UaGVtZSBcIiR7dGhlbWV9XCIgaXMgbm90IGEgcmVjb2duaXplZCB0aGVtZSFgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd2l0aFN1ZmZpeEFuZENvbG9yKG5hbWU6IHN0cmluZywgdGhlbWU6IFRoZW1lVHlwZSwgcHJpOiBzdHJpbmcsIHNlYzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke3dpdGhTdWZmaXgobmFtZSwgdGhlbWUpfS0ke3ByaX0tJHtzZWN9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcEFiYnJUb1RoZW1lKGFiYnI6IHN0cmluZyk6IFRoZW1lVHlwZSB7XG4gIHJldHVybiBhYmJyID09PSAnbycgPyAnb3V0bGluZScgOiBhYmJyIGFzIFRoZW1lVHlwZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFscmVhZHlIYXNBVGhlbWVTdWZmaXgobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBuYW1lLmVuZHNXaXRoKCctZmlsbCcpIHx8IG5hbWUuZW5kc1dpdGgoJy1vJykgfHwgbmFtZS5lbmRzV2l0aCgnLXR3b3RvbmUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSWNvbkRlZmluaXRpb24odGFyZ2V0OiBzdHJpbmcgfCBJY29uRGVmaW5pdGlvbik6IHRhcmdldCBpcyBJY29uRGVmaW5pdGlvbiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2YgdGFyZ2V0Lm5hbWUgPT09ICdzdHJpbmcnICYmXG4gICAgKHR5cGVvZiB0YXJnZXQudGhlbWUgPT09ICdzdHJpbmcnIHx8IHRhcmdldC50aGVtZSA9PT0gdW5kZWZpbmVkKSAmJlxuICAgIHR5cGVvZiB0YXJnZXQuaWNvbiA9PT0gJ3N0cmluZydcbiAgKTtcbn1cblxuLyoqXG4gKiBHZXQgYW4gYEljb25EZWZpbml0aW9uYCBvYmplY3QgZnJvbSBhYmJyZXZpYXRpb24gdHlwZSwgbGlrZSBgYWNjb3VudC1ib29rLWZpbGxgLlxuICogQHBhcmFtIHN0clxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWNvbkRlZmluaXRpb25Gcm9tQWJicihzdHI6IHN0cmluZyk6IEljb25EZWZpbml0aW9uIHtcbiAgY29uc3QgYXJyID0gc3RyLnNwbGl0KCctJyk7XG4gIGNvbnN0IHRoZW1lID0gbWFwQWJiclRvVGhlbWUoYXJyLnNwbGljZShhcnIubGVuZ3RoIC0gMSwgMSlbMF0pO1xuICBjb25zdCBuYW1lID0gYXJyLmpvaW4oJy0nKTtcblxuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAgdGhlbWUsXG4gICAgaWNvbjogJydcbiAgfSBhcyBJY29uRGVmaW5pdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lU1ZHKHN2ZzogU1ZHRWxlbWVudCk6IFNWR0VsZW1lbnQge1xuICByZXR1cm4gc3ZnLmNsb25lTm9kZSh0cnVlKSBhcyBTVkdFbGVtZW50O1xufVxuXG4vKipcbiAqIFBhcnNlIGlubGluZSBTVkcgc3RyaW5nIGFuZCByZXBsYWNlIGNvbG9ycyB3aXRoIHBsYWNlaG9sZGVycy4gRm9yIHR3b3RvbmUgaWNvbnMgb25seS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VGaWxsQ29sb3IocmF3OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gcmF3XG4gICAgLnJlcGxhY2UoL1snXCJdIzMzM1snXCJdL2csICdcInByaW1hcnlDb2xvclwiJylcbiAgICAucmVwbGFjZSgvWydcIl0jRTZFNkU2WydcIl0vZywgJ1wic2Vjb25kYXJ5Q29sb3JcIicpXG4gICAgLnJlcGxhY2UoL1snXCJdI0Q5RDlEOVsnXCJdL2csICdcInNlY29uZGFyeUNvbG9yXCInKVxuICAgIC5yZXBsYWNlKC9bJ1wiXSNEOEQ4RDhbJ1wiXS9nLCAnXCJzZWNvbmRhcnlDb2xvclwiJyk7XG59XG5cbi8qKlxuICogU3BsaXQgYSBuYW1lIHdpdGggbmFtZXNwYWNlIGluIGl0IGludG8gYSB0dXBsZSBsaWtlIFsgbmFtZSwgbmFtZXNwYWNlIF0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lQW5kTmFtZXNwYWNlKHR5cGU6IHN0cmluZyk6IFtzdHJpbmcsIHN0cmluZ10ge1xuICBjb25zdCBzcGxpdCA9IHR5cGUuc3BsaXQoJzonKTtcbiAgc3dpdGNoIChzcGxpdC5sZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBbdHlwZSwgJyddO1xuICAgIGNhc2UgMjogcmV0dXJuIFtzcGxpdFsxXSwgc3BsaXRbMF1dO1xuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgJHthbnRJY29uQ29uc29sZVByZWZpeH1UaGUgaWNvbiB0eXBlICR7dHlwZX0gaXMgbm90IHZhbGlkIWApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNOYW1lc3BhY2UodHlwZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBnZXROYW1lQW5kTmFtZXNwYWNlKHR5cGUpWzFdICE9PSAnJztcbn1cbiJdfQ==