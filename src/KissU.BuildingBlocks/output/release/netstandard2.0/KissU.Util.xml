<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KissU.Util</name>
    </assembly>
    <members>
        <member name="T:KissU.Util.Applications.Dtos.DtoBase">
            <summary>
            数据传输对象
            </summary>
        </member>
        <member name="P:KissU.Util.Applications.Dtos.DtoBase.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:KissU.Util.Applications.Dtos.IDto">
            <summary>
            数据传输对象
            </summary>
        </member>
        <member name="T:KissU.Util.Applications.Dtos.IKey">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:KissU.Util.Applications.Dtos.IKey.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:KissU.Util.Applications.Dtos.IRequest">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="T:KissU.Util.Applications.Dtos.RequestBase">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="M:KissU.Util.Applications.Dtos.RequestBase.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:KissU.Util.Applications.IQueryService`2">
            <summary>
            查询服务
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQueryParameter">查询参数类型</typeparam>
        </member>
        <member name="T:KissU.Util.Applications.IService">
            <summary>
            应用服务
            </summary>
        </member>
        <member name="T:KissU.Util.Applications.Operations.IGetAll`1">
            <summary>
            获取全部数据
            </summary>
        </member>
        <member name="M:KissU.Util.Applications.Operations.IGetAll`1.GetAll">
            <summary>
            获取全部
            </summary>
        </member>
        <member name="T:KissU.Util.Applications.Operations.IGetAllAsync`1">
            <summary>
            获取全部数据
            </summary>
        </member>
        <member name="M:KissU.Util.Applications.Operations.IGetAllAsync`1.GetAllAsync">
            <summary>
            获取全部
            </summary>
        </member>
        <member name="T:KissU.Util.Applications.Operations.IGetById`1">
            <summary>
            获取指定标识实体
            </summary>
        </member>
        <member name="M:KissU.Util.Applications.Operations.IGetById`1.GetById(System.Object)">
            <summary>
            通过编号获取
            </summary>
            <param name="id">实体编号</param>
        </member>
        <member name="M:KissU.Util.Applications.Operations.IGetById`1.GetByIds(System.String)">
            <summary>
            通过编号列表获取
            </summary>
            <param name="ids">用逗号分隔的Id列表，范例："1,2"</param>
        </member>
        <member name="T:KissU.Util.Applications.Operations.IGetByIdAsync`1">
            <summary>
            获取指定标识实体
            </summary>
        </member>
        <member name="M:KissU.Util.Applications.Operations.IGetByIdAsync`1.GetByIdAsync(System.Object)">
            <summary>
            通过编号获取
            </summary>
            <param name="id">实体编号</param>
        </member>
        <member name="M:KissU.Util.Applications.Operations.IGetByIdAsync`1.GetByIdsAsync(System.String)">
            <summary>
            通过编号列表获取
            </summary>
            <param name="ids">用逗号分隔的Id列表，范例："1,2"</param>
        </member>
        <member name="T:KissU.Util.Applications.Operations.IPageQuery`2">
            <summary>
            分页查询
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQueryParameter">查询参数类型</typeparam>
        </member>
        <member name="M:KissU.Util.Applications.Operations.IPageQuery`2.Query(`1)">
            <summary>
            查询
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="M:KissU.Util.Applications.Operations.IPageQuery`2.PagerQuery(`1)">
            <summary>
            分页查询
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="T:KissU.Util.Applications.Operations.IPageQueryAsync`2">
            <summary>
            分页查询
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
            <typeparam name="TQueryParameter">查询参数类型</typeparam>
        </member>
        <member name="M:KissU.Util.Applications.Operations.IPageQueryAsync`2.QueryAsync(`1)">
            <summary>
            查询
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="M:KissU.Util.Applications.Operations.IPageQueryAsync`2.PagerQueryAsync(`1)">
            <summary>
            分页查询
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="T:KissU.Util.Aspects.Base.InterceptorBase">
            <summary>
            拦截器
            </summary>
        </member>
        <member name="T:KissU.Util.Aspects.Base.ParameterInterceptorBase">
            <summary>
            参数拦截器
            </summary>
        </member>
        <member name="T:KissU.Util.Aspects.IgnoreAttribute">
            <summary>
            忽略拦截
            </summary>
        </member>
        <member name="T:KissU.Util.Aspects.NotEmptyAttribute">
            <summary>
            验证不能为空
            </summary>
        </member>
        <member name="M:KissU.Util.Aspects.NotEmptyAttribute.Invoke(AspectCore.DynamicProxy.Parameters.ParameterAspectContext,AspectCore.DynamicProxy.Parameters.ParameterAspectDelegate)">
            <summary>
            执行
            </summary>
        </member>
        <member name="T:KissU.Util.Aspects.NotNullAttribute">
            <summary>
            验证不能为null
            </summary>
        </member>
        <member name="M:KissU.Util.Aspects.NotNullAttribute.Invoke(AspectCore.DynamicProxy.Parameters.ParameterAspectContext,AspectCore.DynamicProxy.Parameters.ParameterAspectDelegate)">
            <summary>
            执行
            </summary>
        </member>
        <member name="T:KissU.Util.Caches.ICache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:KissU.Util.Caches.ICache.Exists(System.String)">
            <summary>
            是否存在指定键的缓存
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:KissU.Util.Caches.ICache.Get``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            从缓存中获取数据，如果不存在，则执行获取数据操作并添加到缓存中
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <param name="func">获取数据操作</param>
            <param name="expiration">过期时间间隔</param>
        </member>
        <member name="M:KissU.Util.Caches.ICache.TryAdd``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            当缓存数据不存在则添加，已存在不会添加，添加成功返回true
            </summary>
            <typeparam name="T">缓存数据类型</typeparam>
            <param name="key">缓存键</param>
            <param name="value">值</param>
            <param name="expiration">过期时间间隔</param>
        </member>
        <member name="M:KissU.Util.Caches.ICache.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:KissU.Util.Caches.ICache.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:KissU.Util.Contexts.ContextFactory">
            <summary>
            上下文工厂
            </summary>
        </member>
        <member name="M:KissU.Util.Contexts.ContextFactory.Create">
            <summary>
            创建上下文
            </summary>
        </member>
        <member name="T:KissU.Util.Contexts.IContext">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:KissU.Util.Contexts.IContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="M:KissU.Util.Contexts.IContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:KissU.Util.Contexts.IContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:KissU.Util.Contexts.IContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:KissU.Util.Contexts.NullContext">
            <summary>
            空上下文
            </summary>
        </member>
        <member name="F:KissU.Util.Contexts.NullContext.Instance">
            <summary>
            空上下文实例
            </summary>
        </member>
        <member name="P:KissU.Util.Contexts.NullContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="M:KissU.Util.Contexts.NullContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:KissU.Util.Contexts.NullContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:KissU.Util.Contexts.NullContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:KissU.Util.Contexts.WebContext">
            <summary>
            Web上下文
            </summary>
        </member>
        <member name="P:KissU.Util.Contexts.WebContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="M:KissU.Util.Contexts.WebContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:KissU.Util.Contexts.WebContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:KissU.Util.Contexts.WebContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:KissU.Util.Datas.Enums.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Enums.DatabaseType.SqlServer">
            <summary>
            Sql Server数据库
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Enums.DatabaseType.MySql">
            <summary>
            MySql数据库
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Enums.DatabaseType.PgSql">
            <summary>
            PostgreSQL数据库
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Enums.DatabaseType.Oracle">
            <summary>
            Oracle数据库
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Persistence.PersistentEntityBase">
            <summary>
            持久化对象
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Persistence.PersistentEntityBase`1">
            <summary>
            持久化对象
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="P:KissU.Util.Datas.Persistence.PersistentEntityBase`1.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Persistence.PersistentEntityBase`1.Equals(System.Object)">
            <summary>
            相等运算
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Persistence.PersistentEntityBase`1.GetHashCode">
            <summary>
            获取哈希
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Persistence.PersistentEntityBase`1.op_Equality(KissU.Util.Datas.Persistence.PersistentEntityBase{`0},KissU.Util.Datas.Persistence.PersistentEntityBase{`0})">
            <summary>
            相等比较
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Persistence.PersistentEntityBase`1.op_Inequality(KissU.Util.Datas.Persistence.PersistentEntityBase{`0},KissU.Util.Datas.Persistence.PersistentEntityBase{`0})">
            <summary>
            不相等比较
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Persistence.PersistentObjectBase">
            <summary>
            持久化对象
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Persistence.PersistentObjectBase`1">
            <summary>
            持久化对象
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="P:KissU.Util.Datas.Persistence.PersistentObjectBase`1.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Persistence.TreePersistentObjectBase">
            <summary>
            树型持久化对象
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Persistence.TreePersistentObjectBase`2">
            <summary>
            树型持久化对象
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="P:KissU.Util.Datas.Persistence.TreePersistentObjectBase`2.ParentId">
            <summary>
            父标识
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Persistence.TreePersistentObjectBase`2.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Persistence.TreePersistentObjectBase`2.Level">
            <summary>
            级数
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Persistence.TreePersistentObjectBase`2.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Persistence.TreePersistentObjectBase`2.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Boundary">
            <summary>
            查询边界
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Boundary.Left">
            <summary>
            包含左边
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Boundary.Right">
            <summary>
            包含右边
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Boundary.Both">
            <summary>
            包含两边
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Boundary.Neither">
            <summary>
            不包含
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Criterias.AndCriteria`1">
            <summary>
            与查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.AndCriteria`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            初始化查询条件
            </summary>
            <param name="left">查询条件1</param>
            <param name="right">查询条件2</param>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Criterias.AndCriteria`1.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.AndCriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Criterias.DateSegmentCriteria`2">
            <summary>
            日期范围过滤条件 - 不包含时间
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DateSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            初始化日期范围过滤条件 - 不包含时间
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DateSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            最小值是否大于最大值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DateSegmentCriteria`2.GetMinValueExpression">
            <summary>
            获取最小值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DateSegmentCriteria`2.GetMaxValueExpression">
            <summary>
            获取最大值
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Criterias.DateTimeSegmentCriteria`2">
            <summary>
            日期范围过滤条件 - 包含时间
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DateTimeSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            初始化日期范围过滤条件 - 包含时间
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DateTimeSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            最小值是否大于最大值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DateTimeSegmentCriteria`2.GetMinValueExpression">
            <summary>
            获取最小值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DateTimeSegmentCriteria`2.GetMaxValueExpression">
            <summary>
            获取最大值
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Criterias.DecimalSegmentCriteria`2">
            <summary>
            decimal范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DecimalSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            初始化decimal范围过滤条件
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DecimalSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            最小值是否大于最大值
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Criterias.DefaultCriteria`1">
            <summary>
            默认查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DefaultCriteria`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            初始化查询条件
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Criterias.DefaultCriteria`1.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DefaultCriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Criterias.DoubleSegmentCriteria`2">
            <summary>
            double范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DoubleSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.Double},System.Nullable{System.Double},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            初始化double范围过滤条件
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.DoubleSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            最小值是否大于最大值
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Criterias.IntSegmentCriteria`2">
            <summary>
            整数范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.IntSegmentCriteria`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{System.Int32},System.Nullable{System.Int32},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            初始化整数范围过滤条件
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.IntSegmentCriteria`2.IsMinGreaterMax(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            最小值是否大于最大值
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Criterias.OrCriteria`1">
            <summary>
            或查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.OrCriteria`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            初始化查询条件
            </summary>
            <param name="left">查询条件1</param>
            <param name="right">查询条件2</param>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Criterias.OrCriteria`1.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.OrCriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3">
            <summary>
            范围过滤条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3._propertyExpression">
            <summary>
            属性表达式
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3._builder">
            <summary>
            表达式生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3._min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3._max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3._boundary">
            <summary>
            包含边界
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Nullable{`2},System.Nullable{`2},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            初始化范围过滤条件
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetPropertyType">
            <summary>
            获取属性类型
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.Adjust(System.Nullable{`2},System.Nullable{`2})">
            <summary>
            当最小值大于最大值时进行校正
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.IsMinGreaterMax(System.Nullable{`2},System.Nullable{`2})">
            <summary>
            最小值是否大于最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.CreateLeftExpression">
            <summary>
            创建左操作数，即 t => t.Property >= Min
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.CreateLeftOperator(System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            创建左操作符
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetMinValue">
            <summary>
            获取最小值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetMinValueExpression">
            <summary>
            获取最小值表达式
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.CreateRightExpression">
            <summary>
            创建右操作数，即 t => t.Property &lt;= Max
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.CreateRightOperator(System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            创建右操作符
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetMaxValue">
            <summary>
            获取最大值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.SegmentCriteriaBase`3.GetMaxValueExpression">
            <summary>
            获取最大值表达式
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Criterias.ValueExpressionHelper">
            <summary>
            值表达式操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.ValueExpressionHelper.CreateDateTimeExpression(System.Object,System.Boolean)">
            <summary>
            获取日期常量表达式
            </summary>
            <param name="value">日期值</param>
            <param name="isNull">日期是否可空</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Criterias.ValueExpressionHelper.CreateDateTimeExpression(System.Object,System.Type)">
            <summary>
            获取日期常量表达式
            </summary>
            <param name="value">日期值</param>
            <param name="targetType">目标类型</param>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Internal.Helper">
            <summary>
            查询工具类
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Internal.Helper.GetWhereIfNotEmptyExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取查询条件表达式
            </summary>
            <param name="predicate">查询条件,如果参数值为空，则忽略该查询条件，范例：t => t.Name == ""，该查询条件被忽略。
            注意：一次仅能添加一个条件，范例：t => t.Name == "a" &amp;&amp; t.Mobile == "123"，不支持，将抛出异常</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Internal.Helper.InitOrder``1(System.Linq.IQueryable{``0},KissU.Util.Domains.Repositories.IPager)">
            <summary>
            初始化排序
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Internal.Helper.GetOrderedQueryable``1(System.Linq.IQueryable{``0},KissU.Util.Domains.Repositories.IPager)">
            <summary>
            获取排序查询对象
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.IQuery`1">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:KissU.Util.Datas.Queries.IQuery`2">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.Where(KissU.Util.Domains.Repositories.ICriteria{`0})">
            <summary>
            添加查询条件
            </summary>
            <param name="criteria">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.WhereIf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.WhereIfNotEmpty(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件,如果参数值为空，则忽略该查询条件，范例：t => t.Name == ""，该查询条件被忽略。
            注意：一次仅能添加一个条件，范例：t => t.Name == "a" &amp;&amp; t.Mobile == "123"，不支持，将抛出异常</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32},System.Nullable{System.Int32},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Double},System.Nullable{System.Double},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Time</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            添加排序
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="expression">属性表达式</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.OrderBy(System.String,System.Boolean)">
            <summary>
            添加排序
            </summary>
            <param name="propertyName">排序属性</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            与连接
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.And(KissU.Util.Datas.Queries.IQuery{`0,`1})">
            <summary>
            与连接
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            或连接
            </summary>
            <param name="predicates">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.IQuery`2.Or(KissU.Util.Datas.Queries.IQuery{`0,`1})">
            <summary>
            或连接
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="T:KissU.Util.Datas.Queries.IQueryParameter">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Queries.IQueryParameter.Keyword">
            <summary>
            搜索关键字
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Operator">
            <summary>
            查询操作符
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Operator.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Operator.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Operator.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Operator.GreaterEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Operator.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Operator.LessEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Operator.Starts">
            <summary>
            头匹配
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Operator.Ends">
            <summary>
            尾匹配
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Operator.Contains">
            <summary>
            模糊匹配
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Operator.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Operator.NotIn">
            <summary>
            Not In
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.OrderByBuilder">
            <summary>
            排序生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.OrderByBuilder._items">
            <summary>
            排序项列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.OrderByBuilder.#ctor">
            <summary>
            初始化排序生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.OrderByBuilder.Add(System.String,System.Boolean)">
            <summary>
            添加排序
            </summary>
            <param name="name">排序属性</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.OrderByBuilder.Generate">
            <summary>
            生成排序字符串
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.OrderByItem">
            <summary>
            排序项
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.OrderByItem.#ctor(System.String,System.Boolean)">
            <summary>
            初始化排序项
            </summary>
            <param name="name">排序属性</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="P:KissU.Util.Datas.Queries.OrderByItem.Name">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Queries.OrderByItem.Desc">
            <summary>
            是否降序
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.OrderByItem.Generate">
            <summary>
            创建排序字符串
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Query`1">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`1.#ctor">
            <summary>
            初始化查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`1.#ctor(KissU.Util.Datas.Queries.IQueryParameter)">
            <summary>
            初始化查询对象
            </summary>
            <param name="queryParam">查询参数</param>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Query`2">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Query`2._parameter">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Query`2._predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Queries.Query`2._orderByBuilder">
            <summary>
            排序生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.#ctor">
            <summary>
            初始化查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.#ctor(KissU.Util.Datas.Queries.IQueryParameter)">
            <summary>
            初始化查询对象
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.GetOrder">
            <summary>
            获取排序条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.GetPager">
            <summary>
            获取分页
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.Where(KissU.Util.Domains.Repositories.ICriteria{`0})">
            <summary>
            添加查询条件
            </summary>
            <param name="criteria">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.WhereIf(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.WhereIfNotEmpty(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <param name="predicate">查询条件,如果参数值为空，则忽略该查询条件，范例：t => t.Name == ""，该查询条件被忽略。
            注意：一次仅能添加一个条件，范例：t => t.Name == "a" &amp;&amp; t.Mobile == "123"，不支持，将抛出异常</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Int32},System.Nullable{System.Int32},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Double},System.Nullable{System.Double},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.Between``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Time</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            添加排序
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="expression">属性表达式</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.OrderBy(System.String,System.Boolean)">
            <summary>
            添加排序
            </summary>
            <param name="propertyName">排序属性</param>
            <param name="desc">是否降序</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            与连接
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.And(KissU.Util.Datas.Queries.IQuery{`0,`1})">
            <summary>
            与连接
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            或连接
            </summary>
            <param name="predicates">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Query`2.Or(KissU.Util.Datas.Queries.IQuery{`0,`1})">
            <summary>
            或连接
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="T:KissU.Util.Datas.Queries.QueryParameter">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Queries.QueryParameter.Keyword">
            <summary>
            搜索关键字
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Trees.ITreeQueryParameter">
            <summary>
            树形查询参数
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Trees.ITreeQueryParameter`1">
            <summary>
            树形查询参数
            </summary>
            <typeparam name="TParentId">父编号类型</typeparam>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Trees.ITreeQueryParameter`1.ParentId">
            <summary>
            父标识
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Trees.ITreeQueryParameter`1.Level">
            <summary>
            层级
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Trees.ITreeQueryParameter`1.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Trees.ITreeQueryParameter`1.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Trees.ITreeQueryParameter`1.IsSearch">
            <summary>
            是否搜索
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Trees.TreeCriteria`1">
            <summary>
            树型查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Trees.TreeCriteria`1.#ctor(KissU.Util.Datas.Queries.Trees.ITreeQueryParameter)">
            <summary>
            初始化树型查询条件
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Trees.TreeCriteria`2">
            <summary>
            树型查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Trees.TreeCriteria`2.#ctor(KissU.Util.Datas.Queries.Trees.ITreeQueryParameter{`1})">
            <summary>
            初始化树型查询条件
            </summary>
            <param name="parameter">查询参数</param>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Trees.TreeCriteria`2.Predicate">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Trees.TreeCriteria`2.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Trees.TreeQueryParameter">
            <summary>
            树形查询参数
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Queries.Trees.TreeQueryParameter`1">
            <summary>
            树形查询参数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Trees.TreeQueryParameter`1.#ctor">
            <summary>
            初始化树形查询参数
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Trees.TreeQueryParameter`1.ParentId">
            <summary>
            父编号
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Trees.TreeQueryParameter`1.Level">
            <summary>
            层级
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Trees.TreeQueryParameter`1.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Queries.Trees.TreeQueryParameter`1.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Trees.TreeQueryParameter`1.IsSearch">
            <summary>
            是否搜索
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Queries.Trees.TreeQueryParameter`1.IsSearchProperty(System.String,System.Object)">
            <summary>
            是否搜索属性
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.BuilderItem">
            <summary>
            Sql生成器操作项
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.BuilderItem.#ctor(System.String,KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            初始化Sql生成器操作项
            </summary>
            <param name="name">操作名称</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.BuilderItem.Name">
            <summary>
            操作名称
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.BuilderItem.Builder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.DialectBase">
            <summary>
            方言
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.DialectBase.OpeningIdentifier">
            <summary>
            起始转义标识符
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.DialectBase.ClosingIdentifier">
            <summary>
            结束转义标识符
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.DialectBase.SafeName(System.String)">
            <summary>
            获取安全名称
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.DialectBase.FilterName(System.String)">
            <summary>
            过滤名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.DialectBase.GetSafeName(System.String)">
            <summary>
            获取安全名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.DialectBase.GetPrefix">
            <summary>
            获取参数前缀
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.DialectBase.SupportSelectAs">
            <summary>
            Select子句是否支持As关键字
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.DialectBase.GenerateName(System.Int32)">
            <summary>
            创建参数名
            </summary>
            <param name="paramIndex">参数索引</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.DialectBase.GetParamName(System.String)">
            <summary>
            获取参数名
            </summary>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.DialectBase.GetParamValue(System.Object)">
            <summary>
            获取参数值
            </summary>
            <param name="paramValue">参数值</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.EntityAliasRegister">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityAliasRegister.#ctor(System.Collections.Generic.IDictionary{System.Type,System.String})">
            <summary>
            初始化实体别名注册器
            </summary>
            <param name="data">实体别名列表</param>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.EntityAliasRegister.FromType">
            <summary>
            From子句设置的实体类型
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.EntityAliasRegister.Data">
            <summary>
            实体别名列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityAliasRegister.Register(System.Type,System.String)">
            <summary>
            注册实体别名
            </summary>
            <param name="entity">实体类型</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityAliasRegister.Contains(System.Type)">
            <summary>
            是否包含实体
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityAliasRegister.GetAlias(System.Type)">
            <summary>
            获取实体别名
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityAliasRegister.Clone">
            <summary>
            复制实体别名注册器
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.NameItem">
            <summary>
            名称项，处理名称中包含符号.
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.NameItem.#ctor(System.String)">
            <summary>
            初始化名称项
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.NameItem.IsComplex(System.String)">
            <summary>
            是否复杂名称
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.NameItem.ResolveBySplit(System.String)">
            <summary>
            分割句点
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.NameItem.ResolveByPattern(System.String)">
            <summary>
            通过正则进行解析
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.NameItem.DatabaseName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.NameItem._prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.NameItem.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.NameItem._name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.NameItem.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.NameItem.ToSql(KissU.Util.Datas.Sql.Builders.IDialect,System.String,KissU.Util.Datas.Sql.Matedatas.ITableDatabase)">
            <summary>
            获取Sql
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="prefix">前缀</param>
            <param name="tableDatabase">表数据库</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.NameItem.GetName(KissU.Util.Datas.Sql.Builders.IDialect,System.String)">
            <summary>
            获取名称
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.NameItem.GetPrefix(System.String)">
            <summary>
            获取前缀
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.NameItem.GetDatabase(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Matedatas.ITableDatabase,System.String)">
            <summary>
            获取前缀
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.NameItem.GetName(System.String)">
            <summary>
            获取名称
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.SqlContext">
            <summary>
            Sql执行上下文
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlContext.#ctor(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Matedatas.IEntityMatedata,KissU.Util.Datas.Sql.Builders.IParameterManager,KissU.Util.Datas.Sql.Builders.IClauseAccessor)">
            <summary>
            初始化Sql执行上下文
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="entityAliasRegister">实体别名注册器</param>
            <param name="matedata">实体元数据解析器</param>
            <param name="parameterManager">参数管理器</param>
            <param name="clause">Sql子句访问器</param>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlContext.Dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlContext.EntityAliasRegister">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlContext.Matedata">
            <summary>
            实体元数据解析器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlContext.ParameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlContext.ClauseAccessor">
            <summary>
            Sql子句访问器
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.SqlItem">
            <summary>
            Sql项
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlItem._name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlItem._prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlItem._alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlItem.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            初始化Sql项
            </summary>
            <param name="name">名称</param>
            <param name="prefix">前缀</param>
            <param name="alias">别名</param>
            <param name="raw">使用原始值</param>
            <param name="isSplit">是否用句点分割名称</param>
            <param name="isResolve">是否解析名称</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlItem.Resolve(System.String,System.Boolean,System.Boolean)">
            <summary>
            解析名称
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlItem.SplitName(System.String)">
            <summary>
            分割名称
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlItem.Raw">
            <summary>
            使用原始值
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlItem.Prefix">
            <summary>
            前缀，范例:t.a As b，值为 t
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlItem.Name">
            <summary>
            名称，范例:t.a As b，值为 a
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlItem.Alias">
            <summary>
            别名，范例:t.a As b，值为 b
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlItem.DatabaseName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlItem.Clone">
            <summary>
            复制副本
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlItem.ToSql(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Matedatas.ITableDatabase)">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlItem.GetColumn(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Matedatas.ITableDatabase)">
            <summary>
            获取列
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlItem.GetName">
            <summary>
            获取名称
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlItem.GetSafeName(KissU.Util.Datas.Sql.Builders.IDialect,System.String)">
            <summary>
            获取安全名称
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Extensions.Extensions">
            <summary>
            Sql方言扩展
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Extensions.Extensions.GetColumn(KissU.Util.Datas.Sql.Builders.IDialect,System.String,System.String)">
            <summary>
            获取列
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Extensions.Extensions.GetAs(KissU.Util.Datas.Sql.Builders.IDialect)">
            <summary>
            获取As关键字
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Extensions.Extensions.GetSafeName(KissU.Util.Datas.Sql.Builders.IDialect,System.String)">
            <summary>
            获取安全名称
            </summary>
            <param name="source">源</param>
            <param name="name">名称</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IClauseAccessor">
            <summary>
            Sql子句访问器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IClauseAccessor.SelectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IClauseAccessor.FromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IClauseAccessor.JoinClause">
            <summary>
            Join子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IClauseAccessor.WhereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IClauseAccessor.GroupByClause">
            <summary>
            GroupBy子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IClauseAccessor.OrderByClause">
            <summary>
            OrderBy子句
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.ICondition">
            <summary>
            Sql查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ICondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.ICte">
            <summary>
            公用表表达式CTE操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.ICteAccessor">
            <summary>
            公用表表达式CTE操作访问器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.ICteAccessor.CteItems">
            <summary>
            公用表表达式CTE集合
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IDialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IDialect.OpeningIdentifier">
            <summary>
            起始转义标识符
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IDialect.ClosingIdentifier">
            <summary>
            结束转义标识符
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IDialect.SafeName(System.String)">
            <summary>
            安全名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IDialect.GetPrefix">
            <summary>
            获取参数前缀
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IDialect.SupportSelectAs">
            <summary>
            Select子句是否支持As关键字
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IDialect.GenerateName(System.Int32)">
            <summary>
            创建参数名
            </summary>
            <param name="paramIndex">参数索引</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IDialect.GetParamName(System.String)">
            <summary>
            获取参数名
            </summary>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IDialect.GetParamValue(System.Object)">
            <summary>
            获取参数值
            </summary>
            <param name="paramValue">参数值</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IEntityAliasRegister">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IEntityAliasRegister.FromType">
            <summary>
            From子句设置的实体类型
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IEntityAliasRegister.Data">
            <summary>
            实体别名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IEntityAliasRegister.Register(System.Type,System.String)">
            <summary>
            注册实体别名
            </summary>
            <param name="type">实体类型</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IEntityAliasRegister.Contains(System.Type)">
            <summary>
            是否包含实体类型
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IEntityAliasRegister.GetAlias(System.Type)">
            <summary>
            获取实体别名
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IEntityAliasRegister.Clone">
            <summary>
            复制实体别名注册器
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IEntityResolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IEntityResolver.GetTable(System.Type)">
            <summary>
            获取表
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IEntityResolver.GetSchema(System.Type)">
            <summary>
            获取架构
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IEntityResolver.GetColumns``1(System.Boolean)">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IEntityResolver.GetColumns``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="columns">列名表达式</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IEntityResolver.GetColumn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IEntityResolver.GetColumn(System.Linq.Expressions.Expression,System.Type,System.Boolean)">
            <summary>
            获取列名
            </summary>
            <param name="expression">表达式</param>
            <param name="entity">实体类型</param>
            <param name="right">是否取右侧操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IEntityResolver.GetType(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取类型
            </summary>
            <param name="expression">表达式</param>
            <param name="right">是否取右侧操作数</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IFrom">
            <summary>
            From子句操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IFromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IFromClause.Clone(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            复制From子句
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IFromClause.From(System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IFromClause.From``1(System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IFromClause.From(KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询表
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IFromClause.From(System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询表
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IFromClause.AppendSql(System.String)">
            <summary>
            添加到From子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IFromClause.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IFromClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IGroupBy">
            <summary>
            GroupBy子句操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IGroupByClause">
            <summary>
            Group By子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IGroupByClause.Clone(KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            复制Group By子句
            </summary>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IGroupByClause.GroupBy(System.String,System.String)">
            <summary>
            分组
            </summary>
            <param name="columns">分组字段</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IGroupByClause.GroupBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="columns">分组字段</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IGroupByClause.GroupBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">分组字段</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IGroupByClause.AppendSql(System.String)">
            <summary>
            添加到GroupBy子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IGroupByClause.IsGroup">
            <summary>
            是否分组
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IGroupByClause.GroupColumns">
            <summary>
            分组列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IGroupByClause.ToSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IJoin">
            <summary>
            Join子句操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IJoinClause">
            <summary>
            Join子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.Clone(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.IParameterManager)">
            <summary>
            复制Join子句
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.Find(System.Type)">
            <summary>
            查找连接项
            </summary>
            <param name="type">表实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.Join(System.String,System.String)">
            <summary>
            内连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.Join``1(System.String,System.String)">
            <summary>
            内连接
            </summary>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.Join(KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            内连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.Join(System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            内连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.AppendJoin(System.String)">
            <summary>
            添加到内连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.LeftJoin(System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.LeftJoin``1(System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.LeftJoin(KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            左外连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.LeftJoin(System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            左外连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.AppendLeftJoin(System.String)">
            <summary>
            添加到左外连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.RightJoin(System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.RightJoin``1(System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.RightJoin(KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            右外连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.RightJoin(System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            右外连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.AppendRightJoin(System.String)">
            <summary>
            添加到右外连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.On(KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            设置连接条件
            </summary>
            <param name="condition">连接条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.On(System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.On``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="left">左表列名</param>
            <param name="right">右表列名</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.On``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            设置连接条件
            </summary>
            <param name="expression">条件表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.AppendOn(System.String)">
            <summary>
            添加到On子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IJoinOn">
            <summary>
            连接条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinOn.On(KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            设置连接条件
            </summary>
            <param name="condition">连接条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IJoinOn.On(System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IOrderBy">
            <summary>
            OrderBy子句操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IOrderByClause">
            <summary>
            Order By子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IOrderByClause.Clone(KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            复制Order By子句
            </summary>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IOrderByClause.OrderBy(System.String,System.String)">
            <summary>
            排序
            </summary>
            <param name="order">排序列表</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IOrderByClause.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            排序
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">排序列</param>
            <param name="desc">是否倒排</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IOrderByClause.AppendSql(System.String)">
            <summary>
            添加到OrderBy子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IOrderByClause.Validate(System.Boolean)">
            <summary>
            验证
            </summary>
            <param name="isPage">是否分页</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IOrderByClause.ToSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IParameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IParameterManager.GenerateName">
            <summary>
            创建参数名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IParameterManager.GetParams">
            <summary>
            获取参数列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IParameterManager.Add(System.String,System.Object,System.Nullable{KissU.Util.Datas.Queries.Operator})">
            <summary>
            添加参数,如果参数已存在则替换
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IParameterManager.Clone">
            <summary>
            复制副本
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IParameterManager.Clear">
            <summary>
            清空参数
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IParamLiteralsResolver">
            <summary>
            参数字面值解析器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IParamLiteralsResolver.GetParamLiterals(System.Object)">
            <summary>
            获取参数字面值
            </summary>
            <param name="value">参数值</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.ISelect">
            <summary>
            Select子句操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.ISelectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Clone(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            复制Select子句
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Distinct">
            <summary>
            过滤重复记录
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Count(System.String)">
            <summary>
            求总行数
            </summary>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Count(System.String,System.String)">
            <summary>
            求总行数
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求总行数
            </summary>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Sum(System.String,System.String)">
            <summary>
            求和
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求和
            </summary>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Avg(System.String,System.String)">
            <summary>
            求平均值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Avg``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求平均值
            </summary>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Max(System.String,System.String)">
            <summary>
            求最大值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最大值
            </summary>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Min(System.String,System.String)">
            <summary>
            求最小值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最小值
            </summary>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Select(System.String,System.String)">
            <summary>
            设置列名
            </summary>
            <param name="columns">列名</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Select``1(System.Boolean)">
            <summary>
            设置列名
            </summary>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            设置列名
            </summary>
            <param name="columns">列名</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            设置列名
            </summary>
            <param name="column">列名</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Select(KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询列
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.Select(System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询列
            </summary>
            <param name="action">子查询操作</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.AppendSql(System.String,System.String)">
            <summary>
            添加到Select子句
            </summary>
            <param name="sql">Sql语句</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.RemoveSelect(System.String,System.String)">
            <summary>
            移除列名
            </summary>
            <param name="columns">列名</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.RemoveSelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            移除列名
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.RemoveSelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            移除列名
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISelectClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.ISqlFilter">
            <summary>
            Sql过滤器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.ISqlFilter.Filter(KissU.Util.Datas.Sql.Builders.Core.SqlContext)">
            <summary>
            过滤
            </summary>
            <param name="context">Sql执行上下文</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IUnion">
            <summary>
            联合操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IUnionAccessor">
            <summary>
            联合操作访问器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IUnionAccessor.IsUnion">
            <summary>
            是否包含联合操作
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.IUnionAccessor.UnionItems">
            <summary>
            联合操作项集合
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IWhere">
            <summary>
            Where子句操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.IWhereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Clone(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.IParameterManager)">
            <summary>
            复制Where子句
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.And(KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            And连接条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Or(KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            Or连接条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="conditions">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.OrIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="conditions">查询条件,如果表达式中的值为空，则忽略该查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Where(KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            设置查询条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Where(System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <param name="expression">查询条件表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Where(System.String,KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Where(System.String,System.Action{KissU.Util.Datas.Sql.ISqlBuilder},KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder},KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.WhereIfNotEmpty(System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值,如果值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.WhereIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="value">值,如果值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.WhereIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <param name="expression">查询条件表达式,如果参数值为空，则忽略该查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int32},System.Nullable{System.Int32},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Double},System.Nullable{System.Double},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Between(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Between(System.String,System.Nullable{System.Double},System.Nullable{System.Double},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Between(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Between(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.IsNull(System.String)">
            <summary>
            设置Is Null条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.IsNull``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Null条件
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.IsNotNull(System.String)">
            <summary>
            设置Is Not Null条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.IsNotNull``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Not Null条件
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.IsEmpty(System.String)">
            <summary>
            设置空条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.IsEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置空条件
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.IsNotEmpty(System.String)">
            <summary>
            设置非空条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.IsNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置非空条件
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.In(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.In(System.String,KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.In(System.String,System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.NotIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.NotIn(System.String,KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.NotIn(System.String,System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Exists(KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Exists条件
            </summary>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.Exists(System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Exists条件
            </summary>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.NotExists(KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not Exists条件
            </summary>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.NotExists(System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not Exists条件
            </summary>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.AppendSql(System.String)">
            <summary>
            添加到Where子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.IWhereClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Configs.SqlOptions">
            <summary>
            Sql配置
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Configs.SqlOptions.DatabaseType">
            <summary>
            数据库类型，默认为Sql Server
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Configs.SqlOptions.IsClearAfterExecution">
            <summary>
            是否在执行之后清空Sql和参数，默认为 true
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.IDatabase">
            <summary>
            数据库
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.IDatabase.GetConnection">
            <summary>
            获取数据库连接
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.IgnoreAttribute">
            <summary>
            忽略生成列
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.ISqlBuilder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.Clone">
            <summary>
            复制Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.New">
            <summary>
            创建一个新的Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ToSql">
            <summary>
            生成Sql语句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ToDebugSql">
            <summary>
            生成调试Sql语句，Sql语句中的参数被替换为参数值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.Clear">
            <summary>
            清空并初始化
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ClearSelect">
            <summary>
            清空Select子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ClearFrom">
            <summary>
            清空From子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ClearJoin">
            <summary>
            清空Join子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ClearWhere">
            <summary>
            清空Where子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ClearGroupBy">
            <summary>
            清空GroupBy子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ClearOrderBy">
            <summary>
            清空OrderBy子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ClearSqlParams">
            <summary>
            清空Sql参数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ClearPageParams">
            <summary>
            清空分页参数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ClearUnionBuilders">
            <summary>
            清空联合操作项
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.ClearCte">
            <summary>
            清空公用表表达式
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.AddParam(System.String,System.Object)">
            <summary>
            添加Sql参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.GetParams">
            <summary>
            获取Sql参数列表
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.ISqlBuilder.Pager">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.Page(KissU.Util.Domains.Repositories.IPager)">
            <summary>
            设置分页
            </summary>
            <param name="pager">分页参数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.Skip(System.Int32)">
            <summary>
            设置跳过行数
            </summary>
            <param name="count">跳过的行数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.Take(System.Int32)">
            <summary>
            设置获取行数
            </summary>
            <param name="count">获取的行数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlBuilder.IgnoreFilter``1">
            <summary>
            忽略过滤器
            </summary>
            <typeparam name="TSqlFilter">Sql过滤器类型</typeparam>
        </member>
        <member name="T:KissU.Util.Datas.Sql.ISqlQuery">
            <summary>
            Sql查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.SetConnection(System.Data.IDbConnection)">
            <summary>
            设置数据库连接
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.Clone">
            <summary>
            复制Sql查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.Config(System.Action{KissU.Util.Datas.Sql.Configs.SqlOptions})">
            <summary>
            配置
            </summary>
            <param name="configAction">配置操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.GetBuilder">
            <summary>
            获取Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.Query``1(System.Func{System.Data.IDbConnection,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},``0},System.Data.IDbConnection)">
            <summary>
            查询
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="func">查询操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.QueryAsync``1(System.Func{System.Data.IDbConnection,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.Tasks.Task{``0}},System.Data.IDbConnection)">
            <summary>
            查询
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="func">查询操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.PagerQuery``1(System.Func{System.Collections.Generic.List{``0}},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            分页查询
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">获取列表操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.PagerQueryAsync``1(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            分页查询
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">获取列表操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.ToScalar(System.Data.IDbConnection)">
            <summary>
            获取单值
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.ToScalarAsync(System.Data.IDbConnection)">
            <summary>
            获取单值
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.To``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.ToAsync``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.ToList``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.ToListAsync``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.ToListAsync``1(System.String,System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="sql">Sql语句</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.ToPagerList``1(KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.ToPagerList``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.ToPagerListAsync``1(KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.ToPagerListAsync``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.ISqlQuery.ToPagerListAsync``1(System.String,System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="sql">Sql语句</param>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Matedatas.DefaultEntityMatedata">
            <summary>
            实体元数据
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Matedatas.DefaultEntityMatedata.GetTable(System.Type)">
            <summary>
            获取表名
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Matedatas.DefaultEntityMatedata.GetSchema(System.Type)">
            <summary>
            获取架构
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Matedatas.DefaultEntityMatedata.GetColumn(System.Type,System.String)">
            <summary>
            获取列名
            </summary>
            <param name="type">实体类型</param>
            <param name="property">属性名</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Matedatas.DefaultTableDatabase">
            <summary>
            表数据库
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Matedatas.DefaultTableDatabase.GetDatabase(System.String)">
            <summary>
            获取数据库
            </summary>
            <param name="table">表</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Matedatas.IEntityMatedata">
            <summary>
            实体元数据
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Matedatas.IEntityMatedata.GetTable(System.Type)">
            <summary>
            获取表名
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Matedatas.IEntityMatedata.GetSchema(System.Type)">
            <summary>
            获取架构
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Matedatas.IEntityMatedata.GetColumn(System.Type,System.String)">
            <summary>
            获取列名
            </summary>
            <param name="type">实体类型</param>
            <param name="property">属性名</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Matedatas.ITableDatabase">
            <summary>
            表数据库
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Matedatas.ITableDatabase.GetDatabase(System.String)">
            <summary>
            获取数据库
            </summary>
            <param name="table">表</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.IQueryStore`1">
            <summary>
            查询存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
        </member>
        <member name="T:KissU.Util.Datas.Stores.IQueryStore`2">
            <summary>
            查询存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Datas.Stores.IStore`1">
            <summary>
            存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
        </member>
        <member name="T:KissU.Util.Datas.Stores.IStore`2">
            <summary>
            存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IAdd`2">
            <summary>
            添加实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IAdd`2.Add(`0)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IAdd`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IAddAsync`2">
            <summary>
            添加实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IAddAsync`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IAddAsync`2.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.ICount`2">
            <summary>
            查找数量
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.ICount`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数量
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.ICountAsync`2">
            <summary>
            查找数量
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.ICountAsync`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数量
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IExists`2">
            <summary>
            通过标识判断是否存在
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IExists`2.Exists(`1[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IExistsAsync`2">
            <summary>
            通过标识判断是否存在
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IExistsAsync`2.ExistsAsync(`1[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IExistsByExpression`2">
            <summary>
            通过表达式判断是否存在
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IExistsByExpression`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IExistsByExpressionAsync`2">
            <summary>
            通过表达式判断是否存在
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IExistsByExpressionAsync`2.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindAll`2">
            <summary>
            查找实体列表
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindAll`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindAllAsync`2">
            <summary>
            查找实体列表
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindAllAsync`2.FindAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindAllNoTracking`2">
            <summary>
            查找实体列表
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindAllNoTracking`2.FindAllNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindAllNoTrackingAsync`2">
            <summary>
            查找实体列表
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindAllNoTrackingAsync`2.FindAllNoTrackingAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindById`2">
            <summary>
            通过标识查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindById`2.Find(System.Object)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindByIdAsync`2">
            <summary>
            通过标识查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdAsync`2.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindByIdNoTracking`2">
            <summary>
            通过标识查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdNoTracking`2.FindByIdNoTracking(`1)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindByIdNoTrackingAsync`2">
            <summary>
            通过标识查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdNoTrackingAsync`2.FindByIdNoTrackingAsync(`1,System.Threading.CancellationToken)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindByIds`2">
            <summary>
            通过标识列表查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIds`2.FindByIds(`1[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIds`2.FindByIds(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIds`2.FindByIds(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindByIdsAsync`2">
            <summary>
            通过标识列表查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdsAsync`2.FindByIdsAsync(`1[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdsAsync`2.FindByIdsAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdsAsync`2.FindByIdsAsync(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindByIdsNoTracking`2">
            <summary>
            通过标识列表查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdsNoTracking`2.FindByIdsNoTracking(`1[])">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdsNoTracking`2.FindByIdsNoTracking(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdsNoTracking`2.FindByIdsNoTracking(System.String)">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindByIdsNoTrackingAsync`2">
            <summary>
            通过标识列表查找
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdsNoTrackingAsync`2.FindByIdsNoTrackingAsync(`1[])">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdsNoTrackingAsync`2.FindByIdsNoTrackingAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindByIdsNoTrackingAsync`2.FindByIdsNoTrackingAsync(System.String)">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IFindQueryable`2">
            <summary>
            获取查询对象
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindQueryable`2.FindAsNoTracking">
            <summary>
            获取未跟踪查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindQueryable`2.Find">
            <summary>
            获取查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindQueryable`2.Find(KissU.Util.Domains.Repositories.ICriteria{`0})">
            <summary>
            查询
            </summary>
            <param name="criteria">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IFindQueryable`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IPageQuery`2">
            <summary>
            分页查询
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IPageQuery`2.Query(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IPageQuery`2.QueryAsNoTracking(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询，不跟踪实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IPageQuery`2.PagerQuery(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IPageQuery`2.PagerQueryAsNoTracking(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询，不跟踪实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IPageQueryAsync`2">
            <summary>
            分页查询
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IPageQueryAsync`2.QueryAsync(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IPageQueryAsync`2.QueryAsNoTrackingAsync(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询，不跟踪实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IPageQueryAsync`2.PagerQueryAsync(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IPageQueryAsync`2.PagerQueryAsNoTrackingAsync(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询，不跟踪实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IRemove`2">
            <summary>
            移除实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IRemove`2.Remove(System.Object)">
            <summary>
            移除实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IRemove`2.Remove(`0)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IRemove`2.Remove(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IRemove`2.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IRemoveAsync`2">
            <summary>
            移除实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IRemoveAsync`2.RemoveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IRemoveAsync`2.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IRemoveAsync`2.RemoveAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IRemoveAsync`2.RemoveAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.ISingle`2">
            <summary>
            查找单个实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.ISingle`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找单个实体
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.ISingleAsync`2">
            <summary>
            查找单个实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.ISingleAsync`2.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            查找单个实体
            </summary>
            <param name="predicate">条件</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IUpdate`2">
            <summary>
            修改实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IUpdate`2.Update(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IUpdate`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="T:KissU.Util.Datas.Stores.Operations.IUpdateAsync`2">
            <summary>
            修改实体
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IUpdateAsync`2.UpdateAsync(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Stores.Operations.IUpdateAsync`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="T:KissU.Util.Datas.Transactions.ITransactionActionManager">
            <summary>
            事务操作管理器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Transactions.ITransactionActionManager.Count">
            <summary>
            事务操作数量
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Transactions.ITransactionActionManager.Register(System.Func{System.Data.IDbTransaction,System.Threading.Tasks.Task})">
            <summary>
            注册事务操作
            </summary>
            <param name="action">事务操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Transactions.ITransactionActionManager.CommitAsync(System.Data.IDbTransaction)">
            <summary>
            提交
            </summary>
            <param name="transaction">事务</param>
        </member>
        <member name="T:KissU.Util.Datas.Transactions.TransactionActionManager">
            <summary>
            事务操作管理器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Transactions.TransactionActionManager._actions">
            <summary>
            操作列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Transactions.TransactionActionManager.#ctor">
            <summary>
            初始化事务操作管理器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Transactions.TransactionActionManager.Count">
            <summary>
            事务操作数量
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Transactions.TransactionActionManager.Register(System.Func{System.Data.IDbTransaction,System.Threading.Tasks.Task})">
            <summary>
            注册事务操作
            </summary>
            <param name="action">事务操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Transactions.TransactionActionManager.CommitAsync(System.Data.IDbTransaction)">
            <summary>
            提交
            </summary>
            <param name="transaction">事务</param>
        </member>
        <member name="T:KissU.Util.Datas.UnitOfWorks.IUnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.UnitOfWorks.IUnitOfWork.Commit">
            <summary>
            提交,返回影响的行数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.UnitOfWorks.IUnitOfWork.CommitAsync">
            <summary>
            提交,返回影响的行数
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.UnitOfWorks.IUnitOfWorkManager">
            <summary>
            工作单元管理器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.UnitOfWorks.IUnitOfWorkManager.Commit">
            <summary>
            提交
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.UnitOfWorks.IUnitOfWorkManager.CommitAsync">
            <summary>
            提交
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.UnitOfWorks.IUnitOfWorkManager.Register(KissU.Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            注册工作单元
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:KissU.Util.Datas.UnitOfWorks.UnitOfWorkManager">
            <summary>
            工作单元管理器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.UnitOfWorks.UnitOfWorkManager._unitOfWorks">
            <summary>
            工作单元集合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.UnitOfWorks.UnitOfWorkManager.#ctor">
            <summary>
            初始化工作单元管理器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.UnitOfWorks.UnitOfWorkManager.Commit">
            <summary>
            提交
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.UnitOfWorks.UnitOfWorkManager.CommitAsync">
            <summary>
            提交
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.UnitOfWorks.UnitOfWorkManager.Register(KissU.Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            注册工作单元
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:KissU.Util.Dependency.Bootstrapper">
            <summary>
            依赖引导器
            </summary>
        </member>
        <member name="F:KissU.Util.Dependency.Bootstrapper._services">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="F:KissU.Util.Dependency.Bootstrapper._configs">
            <summary>
            依赖配置
            </summary>
        </member>
        <member name="F:KissU.Util.Dependency.Bootstrapper._finder">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="F:KissU.Util.Dependency.Bootstrapper._assemblies">
            <summary>
            程序集列表
            </summary>
        </member>
        <member name="F:KissU.Util.Dependency.Bootstrapper._builder">
            <summary>
            容器生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Dependency.Bootstrapper._aopConfigAction">
            <summary>
            Aop配置操作
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,KissU.Util.Dependency.IConfig[],System.Action{AspectCore.Configuration.IAspectConfiguration},KissU.Util.Reflections.IFind)">
            <summary>
            初始化依赖引导器
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
            <param name="aopConfigAction">Aop配置操作</param>
            <param name="finder">类型查找器</param>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.Run(Microsoft.Extensions.DependencyInjection.IServiceCollection,KissU.Util.Dependency.IConfig[],System.Action{AspectCore.Configuration.IAspectConfiguration},KissU.Util.Reflections.IFind)">
            <summary>
            启动引导
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
            <param name="aopConfigAction">Aop配置操作</param>
            <param name="finder">类型查找器</param>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.Run(Microsoft.Extensions.DependencyInjection.IServiceCollection,KissU.Util.Dependency.IConfig[])">
            <summary>
            启动引导
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.Bootstrap">
            <summary>
            引导
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.RegisterServices(Autofac.ContainerBuilder)">
            <summary>
            注册服务集合
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.RegisterInfrastracture">
            <summary>
            注册基础设施
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.EnableAop">
            <summary>
            启用Aop
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.RegisterFinder">
            <summary>
            注册类型查找器
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.RegisterEventHandlers">
            <summary>
            注册事件处理器
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.RegisterEventHandlers(System.Type)">
            <summary>
            注册事件处理器
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.GetTypes(System.Type)">
            <summary>
            获取类型集合
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.RegisterDependency">
            <summary>
            查找并注册依赖
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.RegisterSingletonDependency">
            <summary>
            注册单例依赖
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.GetTypes``1">
            <summary>
            获取类型集合
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.RegisterScopeDependency">
            <summary>
            注册作用域依赖
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.RegisterTransientDependency">
            <summary>
            注册瞬态依赖
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Bootstrapper.ResolveDependencyRegistrar">
            <summary>
            解析依赖注册器
            </summary>
        </member>
        <member name="T:KissU.Util.Dependency.ConfigBase">
            <summary>
            配置
            </summary>
        </member>
        <member name="T:KissU.Util.Dependency.Container">
            <summary>
            Autofac对象容器
            </summary>
        </member>
        <member name="F:KissU.Util.Dependency.Container._container">
            <summary>
            容器
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Container.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Dependency.Container.CreateList(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Dependency.Container.Create``1(System.String)">
            <summary>
            创建对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Dependency.Container.Create(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Dependency.Container.GetServiceFromHttpContext(System.Type,System.String)">
            <summary>
            从HttpContext获取服务
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Container.GetService(System.Type,System.String)">
            <summary>
            获取服务
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Container.BeginScope">
            <summary>
            作用域开始
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Container.Register(KissU.Util.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:KissU.Util.Dependency.Container.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,KissU.Util.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:KissU.Util.Dependency.Container.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Autofac.ContainerBuilder},KissU.Util.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="actionBefore">注册前操作</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:KissU.Util.Dependency.Container.CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Autofac.ContainerBuilder},KissU.Util.Dependency.IConfig[])">
            <summary>
            创建容器生成器
            </summary>
            <param name="services">服务集合</param>
            <param name="actionBefore">注册前执行的操作</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:KissU.Util.Dependency.Container.Dispose">
            <summary>
            释放容器
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Container.Register(Autofac.IContainer)">
            <summary>
            注册依赖
            </summary>
            <param name="container">容器</param>
        </member>
        <member name="T:KissU.Util.Dependency.Extensions">
            <summary>
            AspectCore扩展
            </summary>
            <summary>
            Autofac扩展
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Extensions.EnableAop(Autofac.ContainerBuilder,System.Action{AspectCore.Configuration.IAspectConfiguration})">
            <summary>
            启用Aop
            </summary>
            <param name="builder">容器生成器</param>
            <param name="configAction">Aop配置</param>
        </member>
        <member name="M:KissU.Util.Dependency.Extensions.EnableAspectScoped(Autofac.ContainerBuilder)">
            <summary>
            启用Aop作用域
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Extensions.AddTransient``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 InstancePerDependency(每次创建一个新实例)
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Dependency.Extensions.AddScoped``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 InstancePerLifetimeScope(每个请求一个实例)
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Dependency.Extensions.AddScoped``1(Autofac.ContainerBuilder)">
            <summary>
            注册服务，生命周期为 InstancePerLifetimeScope(每个请求一个实例)
            </summary>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
        </member>
        <member name="M:KissU.Util.Dependency.Extensions.AddSingleton``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 SingleInstance（单例）
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Dependency.Extensions.AddSingleton``1(Autofac.ContainerBuilder,``0)">
            <summary>
            注册服务，生命周期为 SingleInstance（单例）
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="instance">服务实例</param>
        </member>
        <member name="T:KissU.Util.Dependency.IConfig">
            <summary>
            依赖配置
            </summary>
        </member>
        <member name="T:KissU.Util.Dependency.IContainer">
            <summary>
            容器
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.IContainer.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Dependency.IContainer.CreateList(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Dependency.IContainer.Create``1(System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Dependency.IContainer.Create(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Dependency.IContainer.BeginScope">
            <summary>
            作用域开始
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.IContainer.Register(KissU.Util.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:KissU.Util.Dependency.IContainer.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,KissU.Util.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="T:KissU.Util.Dependency.IDependencyRegistrar">
            <summary>
            依赖注册器
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.IDependencyRegistrar.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="T:KissU.Util.Dependency.IScope">
            <summary>
            作用域
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.IScope.Create``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
        </member>
        <member name="M:KissU.Util.Dependency.IScope.Create(System.Type)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
        </member>
        <member name="T:KissU.Util.Dependency.IScopeDependency">
            <summary>
            实现该接口将自动注册到Ioc容器，生命周期为每次请求创建一个实例
            </summary>
        </member>
        <member name="T:KissU.Util.Dependency.ISingletonDependency">
            <summary>
            实现该接口将自动注册到Ioc容器，生命周期为单例
            </summary>
        </member>
        <member name="T:KissU.Util.Dependency.ITransientDependency">
            <summary>
            实现该接口将自动注册到Ioc容器，生命周期为每次创建一个新实例
            </summary>
        </member>
        <member name="T:KissU.Util.Dependency.Scope">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:KissU.Util.Dependency.Scope._scope">
            <summary>
            autofac作用域
            </summary>
        </member>
        <member name="M:KissU.Util.Dependency.Scope.#ctor(Autofac.ILifetimeScope)">
            <summary>
            初始化作用域
            </summary>
            <param name="scope">autofac作用域</param>
        </member>
        <member name="M:KissU.Util.Dependency.Scope.Create``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
        </member>
        <member name="M:KissU.Util.Dependency.Scope.Create(System.Type)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
        </member>
        <member name="M:KissU.Util.Dependency.Scope.Dispose">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.AggregateRoot`2">
            <summary>
            聚合根
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.AggregateRoot`2.#ctor(`1)">
            <summary>
            初始化聚合根
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="P:KissU.Util.Domains.AggregateRoot`2.Version">
            <summary>
            版本号(乐观锁)
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.AggregateRoot`1">
            <summary>
            聚合根
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.AggregateRoot`1.#ctor(System.Guid)">
            <summary>
            初始化聚合根
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.CreationAuditedInitializer">
            <summary>
            创建操作审计初始化器
            </summary>
        </member>
        <member name="F:KissU.Util.Domains.Auditing.CreationAuditedInitializer._entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:KissU.Util.Domains.Auditing.CreationAuditedInitializer._userId">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="F:KissU.Util.Domains.Auditing.CreationAuditedInitializer._userName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.#ctor(System.Object,System.String,System.String)">
            <summary>
            初始化创建操作审计初始化器
            </summary>
            <param name="entity">实体</param>
            <param name="userId">用户标识</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.Init(System.Object,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="entity">实体</param>
            <param name="userId">用户标识</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.InitCreationTime">
            <summary>
            初始化创建时间
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.InitCreator">
            <summary>
            初始化创建人
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.InitGuid">
            <summary>
            初始化Guid
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.InitNullableGuid">
            <summary>
            初始化可空Guid
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.InitInt">
            <summary>
            初始化int
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.InitNullableInt">
            <summary>
            初始化可空int
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.InitString">
            <summary>
            初始化字符串
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.InitLong">
            <summary>
            初始化Long
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.CreationAuditedInitializer.InitNullableLong">
            <summary>
            初始化可空Long
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.IAudited">
            <summary>
            操作审计
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.IAudited`1">
            <summary>
            操作审计
            </summary>
            <typeparam name="TKey">操作人编号类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.ICreationAudited">
            <summary>
            创建操作审计
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.ICreationAudited`1">
            <summary>
            创建操作审计
            </summary>
            <typeparam name="TKey">创建人标识类型</typeparam>
        </member>
        <member name="P:KissU.Util.Domains.Auditing.ICreationAudited`1.CreatorId">
            <summary>
            创建人标识
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.ICreationTime">
            <summary>
            创建时间审计
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Auditing.ICreationTime.CreationTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.ICreator">
            <summary>
            创建人审计
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Auditing.ICreator.Creator">
            <summary>
            创建人
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.ICreatorAudited">
            <summary>
            创建人操作审计
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.ICreatorAudited`1">
            <summary>
            创建人操作审计
            </summary>
            <typeparam name="TKey">创建人标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.IModificationAudited">
            <summary>
            修改操作审计
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.IModificationAudited`1">
            <summary>
            修改操作审计
            </summary>
            <typeparam name="TKey">最后修改人标识类型</typeparam>
        </member>
        <member name="P:KissU.Util.Domains.Auditing.IModificationAudited`1.LastModifierId">
            <summary>
            最后修改人标识
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.IModificationTime">
            <summary>
            修改时间审计
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Auditing.IModificationTime.LastModificationTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.IModifier">
            <summary>
            修改人审计
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Auditing.IModifier.Modifier">
            <summary>
            最后修改人
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.IModifierAudited">
            <summary>
            修改人操作审计
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.IModifierAudited`1">
            <summary>
            修改人操作审计
            </summary>
            <typeparam name="TKey">最后修改人标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Auditing.ModificationAuditedInitializer">
            <summary>
            修改操作审计初始化器
            </summary>
        </member>
        <member name="F:KissU.Util.Domains.Auditing.ModificationAuditedInitializer._entity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:KissU.Util.Domains.Auditing.ModificationAuditedInitializer._userId">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="F:KissU.Util.Domains.Auditing.ModificationAuditedInitializer._userName">
            <summary>
            用户名称
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.#ctor(System.Object,System.String,System.String)">
            <summary>
            初始化修改操作审计初始化器
            </summary>
            <param name="entity">实体</param>
            <param name="userId">用户标识</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.Init(System.Object,System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="entity">实体</param>
            <param name="userId">用户标识</param>
            <param name="userName">用户名称</param>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.InitLastModificationTime">
            <summary>
            初始化最后修改时间
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.InitModifier">
            <summary>
            初始化修改人
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.InitGuid">
            <summary>
            初始化Guid
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.InitNullableGuid">
            <summary>
            初始化可空Guid
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.InitInt">
            <summary>
            初始化int
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.InitNullableInt">
            <summary>
            初始化可空int
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.InitString">
            <summary>
            初始化字符串
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.InitLong">
            <summary>
            初始化Long
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Auditing.ModificationAuditedInitializer.InitNullableLong">
            <summary>
            初始化可空Long
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.ChangeValue">
            <summary>
            变更值
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.ChangeValue.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化变更值
            </summary>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="P:KissU.Util.Domains.ChangeValue.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.ChangeValue.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.ChangeValue.OldValue">
            <summary>
            旧值
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.ChangeValue.NewValue">
            <summary>
            新值
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.ChangeValue.ToString">
            <summary>
            输出变更信息
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.ChangeValueCollection">
            <summary>
            变更值集合
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.ChangeValueCollection.Add(System.String,System.String,System.String,System.String)">
            <summary>
            添加
            </summary>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:KissU.Util.Domains.ChangeValueCollection.ToString">
            <summary>
            输出变更信息
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.DomainBase`1">
            <summary>
            领域层顶级基类
            </summary>
        </member>
        <member name="F:KissU.Util.Domains.DomainBase`1._description">
            <summary>
            描述
            </summary>
        </member>
        <member name="F:KissU.Util.Domains.DomainBase`1._rules">
            <summary>
            验证规则集合
            </summary>
        </member>
        <member name="F:KissU.Util.Domains.DomainBase`1._handler">
            <summary>
            验证处理器
            </summary>
        </member>
        <member name="F:KissU.Util.Domains.DomainBase`1._changeValues">
            <summary>
            变更值集合
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.#ctor">
            <summary>
            初始化领域层顶级基类
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.SetValidationHandler(KissU.Util.Validations.IValidationHandler)">
            <summary>
            设置验证处理器
            </summary>
            <param name="handler">验证处理器</param>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.AddValidationRules(System.Collections.Generic.IEnumerable{KissU.Util.Validations.IValidationRule})">
            <summary>
            添加验证规则列表
            </summary>
            <param name="rules">验证规则列表</param>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.AddValidationRule(KissU.Util.Validations.IValidationRule)">
            <summary>
            添加验证规则
            </summary>
            <param name="rule">验证规则</param>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.GetValidationResults">
            <summary>
            获取验证结果
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.Validate(KissU.Util.Validations.ValidationResultCollection)">
            <summary>
            验证并添加到验证结果集合
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.HandleValidationResults(KissU.Util.Validations.ValidationResultCollection)">
            <summary>
            处理验证结果
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.GetChanges(`0)">
            <summary>
            获取变更属性
            </summary>
            <param name="newEntity">新对象</param>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.AddChanges(`0)">
            <summary>
            添加变更列表
            </summary>
            <param name="newEntity">新对象</param>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.AddChange``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},``1)">
            <summary>
            添加变更
            </summary>
            <param name="expression">属性表达式,范例：t => t.Name</param>
            <param name="newValue">新值,范例：newEntity.Name</param>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.AddChange``1(System.String,System.String,``0,``0)">
            <summary>
            添加变更
            </summary>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="oldValue">旧值,范例：this.Name</param>
            <param name="newValue">新值,范例：newEntity.Name</param>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.AddChange``1(KissU.Util.Domains.ICompareChange{``0},``0)">
            <summary>
            添加变更
            </summary>
            <param name="oldObject">旧对象</param>
            <param name="newObject">新对象</param>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.AddChange``1(System.Collections.Generic.IEnumerable{KissU.Util.Domains.ICompareChange{``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加变更
            </summary>
            <param name="oldObjects">旧对象列表</param>
            <param name="newObjects">新对象列表</param>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.AddDescriptions">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.AddDescription(System.String)">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.AddDescription``1(System.String,``0)">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.AddDescription``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            添加描述
            </summary>
            <param name="expression">属性表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Domains.DomainBase`1.ToString">
            <summary>
            输出对象状态
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.EntityBase`1">
            <summary>
            领域实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.EntityBase`1.#ctor(System.Guid)">
            <summary>
            初始化领域实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="T:KissU.Util.Domains.EntityBase`2">
            <summary>
            领域实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.EntityBase`2.#ctor(`1)">
            <summary>
            初始化领域实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="P:KissU.Util.Domains.EntityBase`2.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.EntityBase`2.Equals(System.Object)">
            <summary>
            相等运算
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.EntityBase`2.GetHashCode">
            <summary>
            获取哈希
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.EntityBase`2.op_Equality(KissU.Util.Domains.EntityBase{`0,`1},KissU.Util.Domains.EntityBase{`0,`1})">
            <summary>
            相等比较
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.EntityBase`2.op_Inequality(KissU.Util.Domains.EntityBase{`0,`1},KissU.Util.Domains.EntityBase{`0,`1})">
            <summary>
            不相等比较
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.EntityBase`2.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.EntityBase`2.InitId">
            <summary>
            初始化标识
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.EntityBase`2.CreateId">
            <summary>
            创建标识
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.EntityBase`2.Session">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.EntityBase`2.Validate(KissU.Util.Validations.ValidationResultCollection)">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.EntityBase`2.ValidateId(KissU.Util.Validations.ValidationResultCollection)">
            <summary>
            验证标识
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.IAggregateRoot">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.IAggregateRoot`1">
            <summary>
            聚合根
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.IAggregateRoot`2">
            <summary>
            聚合根
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.ICompareChange`1">
            <summary>
            通过对象比较获取变更属性集
            </summary>
            <typeparam name="T">领域对象类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.ICompareChange`1.GetChanges(`0)">
            <summary>
            获取变更属性
            </summary>
            <param name="other">其它领域对象</param>
        </member>
        <member name="T:KissU.Util.Domains.IDelete">
            <summary>
            逻辑删除
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.IDelete.IsDeleted">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.IDomainObject">
            <summary>
            领域对象
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.IEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.IEntity.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.IEntity`1">
            <summary>
            实体
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.IEntity`2">
            <summary>
            实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.IKey`1">
            <summary>
            标识
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="P:KissU.Util.Domains.IKey`1.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.IVersion">
            <summary>
            乐观锁
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.IVersion.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.KeyListComparator`1">
            <summary>
            键列表比较器
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.KeyListComparator`1.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体集合</param>
            <param name="oldList">旧实体集合</param>
        </member>
        <member name="M:KissU.Util.Domains.KeyListComparator`1.GetCreateList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取创建列表
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.KeyListComparator`1.GetUpdateList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取更新列表
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.KeyListComparator`1.GetDeleteList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取删除列表
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.KeyListCompareResult`1">
            <summary>
            键列表比较结果
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.KeyListCompareResult`1.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            初始化键列表比较结果
            </summary>
            <param name="createList">创建列表</param>
            <param name="updateList">更新列表</param>
            <param name="deleteList">删除列表</param>
        </member>
        <member name="P:KissU.Util.Domains.KeyListCompareResult`1.CreateList">
            <summary>
            创建列表
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.KeyListCompareResult`1.UpdateList">
            <summary>
            更新列表
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.KeyListCompareResult`1.DeleteList">
            <summary>
            删除列表
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.ListComparator`2">
            <summary>
            实体列表比较器
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.ListComparator`2.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体集合</param>
            <param name="oldList">旧实体集合</param>
        </member>
        <member name="M:KissU.Util.Domains.ListComparator`2.GetCreateList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取创建列表
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.ListComparator`2.GetUpdateList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取更新列表
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.ListComparator`2.GetDeleteList(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            获取删除列表
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.ListCompareResult`2">
            <summary>
            列表比较结果
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.ListCompareResult`2.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            初始化列表比较结果
            </summary>
            <param name="createList">创建列表</param>
            <param name="updateList">更新列表</param>
            <param name="deleteList">删除列表</param>
        </member>
        <member name="P:KissU.Util.Domains.ListCompareResult`2.CreateList">
            <summary>
            创建列表
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.ListCompareResult`2.UpdateList">
            <summary>
            更新列表
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.ListCompareResult`2.DeleteList">
            <summary>
            删除列表
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.ICompactRepository`1">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.ICompactRepository`2">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.ICriteria`1">
            <summary>
            查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.ICriteria`1.GetPredicate">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.IPager">
            <summary>
            分页
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.IPager.GetPageCount">
            <summary>
            获取总页数
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.IPager.GetSkipCount">
            <summary>
            获取跳过的行数
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.IPager.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.IPager.GetStartNumber">
            <summary>
            获取起始行数
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.IPager.GetEndNumber">
            <summary>
            获取结束行数
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.IPagerBase">
            <summary>
            分页
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.IPagerBase.Page">
            <summary>
            页数，即第几页，从1开始
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.IPagerBase.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.IPagerBase.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.IQueryBase`1">
            <summary>
            查询对象
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.IQueryBase`1.GetOrder">
            <summary>
            获取排序条件
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.IQueryBase`1.GetPager">
            <summary>
            获取分页参数
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.IQueryRepository`1">
            <summary>
            查询仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.IQueryRepository`2">
            <summary>
            查询仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.IRepository`1">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.IRepository`2">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.Pager">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.Pager.#ctor">
            <summary>
            初始化分页参数
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.Pager.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            初始化分页参数
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数,默认20</param> 
            <param name="order">排序条件</param>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.Pager.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            初始化分页参数
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数,默认20</param> 
            <param name="totalCount">总行数</param>
            <param name="order">排序条件</param>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.Pager.Page">
            <summary>
            页索引，即第几页，从1开始
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.Pager.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.Pager.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.Pager.GetPageCount">
            <summary>
            获取总页数
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.Pager.GetSkipCount">
            <summary>
            获取跳过的行数
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.Pager.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.Pager.GetStartNumber">
            <summary>
            起始行数
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.Pager.GetEndNumber">
            <summary>
            结束行数
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Repositories.PagerList`1">
            <summary>
            分页集合
            </summary>
            <typeparam name="T">元素类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.PagerList`1.#ctor">
            <summary>
            初始化分页集合
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.PagerList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化分页集合
            </summary>
            <param name="data">内容</param>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.PagerList`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化分页集合
            </summary>
            <param name="totalCount">总行数</param>
            <param name="data">内容</param>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.PagerList`1.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化分页集合
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param>
            <param name="totalCount">总行数</param>
            <param name="data">内容</param>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.PagerList`1.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化分页集合
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param>
            <param name="totalCount">总行数</param>
            <param name="order">排序条件</param>
            <param name="data">内容</param>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.PagerList`1.#ctor(KissU.Util.Domains.Repositories.IPager,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化分页集合
            </summary>
            <param name="pager">查询对象</param>
            <param name="data">内容</param>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.PagerList`1.Page">
            <summary>
            页索引，即第几页，从1开始
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.PagerList`1.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.PagerList`1.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.PagerList`1.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.PagerList`1.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.PagerList`1.Data">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Repositories.PagerList`1.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.PagerList`1.Add(`0)">
            <summary>
            添加元素
            </summary>
            <param name="item">元素</param>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.PagerList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加元素集合
            </summary>
            <param name="collection">元素集合</param>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.PagerList`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.PagerList`1.Convert``1(System.Func{`0,``0})">
            <summary>
            转换分页集合
            </summary>
            <typeparam name="TResult">目标元素类型</typeparam>
            <param name="converter">转换方法</param>
        </member>
        <member name="M:KissU.Util.Domains.Repositories.PagerList`1.Convert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转换分页集合
            </summary>
            <param name="data">内容</param>
        </member>
        <member name="T:KissU.Util.Domains.Services.DomainServiceBase">
            <summary>
            领域服务
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Services.DomainServiceBase.#ctor">
            <summary>
            初始化领域服务
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Services.DomainServiceBase.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Services.DomainServiceBase.Session">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Services.IDomainService">
            <summary>
            领域服务
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Services.ParameterBase">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Services.ParameterBase.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Tenants.ITenant">
            <summary>
            租户
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Tenants.ITenant.TenantId">
            <summary>
            租户编号
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Trees.IEnabled">
            <summary>
            树型节点启用
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Trees.IEnabled.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Trees.IParentId`1">
            <summary>
            树型父标识
            </summary>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="P:KissU.Util.Domains.Trees.IParentId`1.ParentId">
            <summary>
            父标识
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Trees.IPath">
            <summary>
            树形物化路径
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Trees.IPath.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Trees.IPath.Level">
            <summary>
            层级
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Trees.ISortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Trees.ISortId.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.Trees.ITreeCompactRepository`1">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Trees.ITreeCompactRepository`3">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.Trees.ITreeCompactRepository`3.GenerateSortIdAsync(`2)">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父标识</param>
        </member>
        <member name="M:KissU.Util.Domains.Trees.ITreeCompactRepository`3.GetAllChildrenAsync(`0)">
            <summary>
            获取全部下级实体
            </summary>
            <param name="parent">父实体</param>
        </member>
        <member name="T:KissU.Util.Domains.Trees.ITreeEntity`3">
            <summary>
            树型实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.Trees.ITreeEntity`3.InitPath">
            <summary>
            初始化路径
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Trees.ITreeEntity`3.InitPath(`0)">
            <summary>
            初始化路径
            </summary>
            <param name="parent">父节点</param>
        </member>
        <member name="M:KissU.Util.Domains.Trees.ITreeEntity`3.GetParentIdsFromPath(System.Boolean)">
            <summary>
            从路径中获取所有上级节点编号
            </summary>
            <param name="excludeSelf">是否排除当前节点,默认排除自身</param>
        </member>
        <member name="T:KissU.Util.Domains.Trees.ITreeRepository`1">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Trees.ITreeRepository`3">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="T:KissU.Util.Domains.Trees.TreeEntityBase`1">
            <summary>
            树形实体
            </summary>
            <typeparam name="TEntity">树形实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.Trees.TreeEntityBase`1.#ctor(System.Guid,System.String,System.Int32)">
            <summary>
            初始化树形实体
            </summary>
            <param name="id">标识</param>
            <param name="path">路径</param>
            <param name="level">级数</param>
        </member>
        <member name="T:KissU.Util.Domains.Trees.TreeEntityBase`3">
            <summary>
            树形实体
            </summary>
            <typeparam name="TEntity">树形实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.Trees.TreeEntityBase`3.#ctor(`1,System.String,System.Int32)">
            <summary>
            初始化树形实体
            </summary>
            <param name="id">标识</param>
            <param name="path">路径</param>
            <param name="level">级数</param>
        </member>
        <member name="P:KissU.Util.Domains.Trees.TreeEntityBase`3.ParentId">
            <summary>
            父标识
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Trees.TreeEntityBase`3.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Trees.TreeEntityBase`3.Level">
            <summary>
            层级
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Trees.TreeEntityBase`3.Enabled">
            <summary>
            启用
            </summary>
        </member>
        <member name="P:KissU.Util.Domains.Trees.TreeEntityBase`3.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Trees.TreeEntityBase`3.InitPath">
            <summary>
            初始化路径
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Trees.TreeEntityBase`3.InitPath(`0)">
            <summary>
            初始化路径
            </summary>
            <param name="parent">父节点</param>
        </member>
        <member name="M:KissU.Util.Domains.Trees.TreeEntityBase`3.GetParentIdsFromPath(System.Boolean)">
            <summary>
            从路径中获取所有上级节点编号
            </summary>
            <param name="excludeSelf">是否排除当前节点,默认排除自身</param>
        </member>
        <member name="T:KissU.Util.Domains.Trees.UpdatePathManager`3">
            <summary>
            树型路径更新服务
            </summary>
        </member>
        <member name="F:KissU.Util.Domains.Trees.UpdatePathManager`3._repository">
            <summary>
            仓储
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.Trees.UpdatePathManager`3.#ctor(KissU.Util.Domains.Trees.ITreeCompactRepository{`0,`1,`2})">
            <summary>
            初始化树型路径更新服务
            </summary>
            <param name="repository">仓储</param>
        </member>
        <member name="M:KissU.Util.Domains.Trees.UpdatePathManager`3.UpdatePathAsync(`0)">
            <summary>
            更新实体及所有下级节点路径
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Domains.Trees.UpdatePathManager`3.UpdateChildrenPath(`0,System.Collections.Generic.List{`0})">
            <summary>
            修改路径
            </summary>
        </member>
        <member name="T:KissU.Util.Domains.ValueObjectBase`1">
            <summary>
            值对象
            </summary>
            <typeparam name="TValueObject">值对象类型</typeparam>
        </member>
        <member name="M:KissU.Util.Domains.ValueObjectBase`1.Equals(`0)">
            <summary>
            相等性比较
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.ValueObjectBase`1.Equals(System.Object)">
            <summary>
            相等性比较
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.ValueObjectBase`1.op_Equality(KissU.Util.Domains.ValueObjectBase{`0},KissU.Util.Domains.ValueObjectBase{`0})">
            <summary>
            相等性比较
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.ValueObjectBase`1.op_Inequality(KissU.Util.Domains.ValueObjectBase{`0},KissU.Util.Domains.ValueObjectBase{`0})">
            <summary>
            不相等比较
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.ValueObjectBase`1.GetHashCode">
            <summary>
            获取哈希
            </summary>
        </member>
        <member name="M:KissU.Util.Domains.ValueObjectBase`1.Clone">
            <summary>
            克隆副本
            </summary>
        </member>
        <member name="T:KissU.Util.Events.Event">
            <summary>
            事件
            </summary>
        </member>
        <member name="M:KissU.Util.Events.Event.#ctor">
            <summary>
            初始化事件
            </summary>
        </member>
        <member name="P:KissU.Util.Events.Event.Id">
            <summary>
            事件标识
            </summary>
        </member>
        <member name="P:KissU.Util.Events.Event.Time">
            <summary>
            事件时间
            </summary>
        </member>
        <member name="M:KissU.Util.Events.Event.ToString">
            <summary>
            输出日志
            </summary>
        </member>
        <member name="T:KissU.Util.Events.Handlers.IEventHandler">
            <summary>
            内存事件处理器
            </summary>
        </member>
        <member name="T:KissU.Util.Events.Handlers.IEventHandler`1">
            <summary>
            内存事件处理器
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
        </member>
        <member name="M:KissU.Util.Events.Handlers.IEventHandler`1.HandleAsync(`0)">
            <summary>
            处理事件
            </summary>
            <param name="event">事件</param>
        </member>
        <member name="T:KissU.Util.Events.Handlers.IEventHandlerManager">
            <summary>
            事件处理器服务
            </summary>
        </member>
        <member name="M:KissU.Util.Events.Handlers.IEventHandlerManager.GetHandlers``1">
            <summary>
            获取事件处理器列表
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
        </member>
        <member name="T:KissU.Util.Events.IEvent">
            <summary>
            事件
            </summary>
        </member>
        <member name="P:KissU.Util.Events.IEvent.Id">
            <summary>
            事件标识
            </summary>
        </member>
        <member name="P:KissU.Util.Events.IEvent.Time">
            <summary>
            事件时间
            </summary>
        </member>
        <member name="T:KissU.Util.Events.IEventBus">
            <summary>
            事件总线
            </summary>
        </member>
        <member name="M:KissU.Util.Events.IEventBus.PublishAsync``1(``0)">
            <summary>
            发布事件
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
            <param name="event">事件</param>
        </member>
        <member name="T:KissU.Util.Events.IMessageEvent">
            <summary>
            消息事件
            </summary>
        </member>
        <member name="P:KissU.Util.Events.IMessageEvent.Name">
            <summary>
            消息名称
            </summary>
        </member>
        <member name="P:KissU.Util.Events.IMessageEvent.Data">
            <summary>
            事件数据
            </summary>
        </member>
        <member name="P:KissU.Util.Events.IMessageEvent.Callback">
            <summary>
            回调名称
            </summary>
        </member>
        <member name="P:KissU.Util.Events.IMessageEvent.Send">
            <summary>
            是否立即发送消息
            </summary>
        </member>
        <member name="T:KissU.Util.Events.IMessageEventBus">
            <summary>
            基于消息的事件总线
            </summary>
        </member>
        <member name="M:KissU.Util.Events.IMessageEventBus.PublishAsync``1(``0)">
            <summary>
            发布事件
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
            <param name="event">事件</param>
        </member>
        <member name="M:KissU.Util.Events.IMessageEventBus.PublishAsync(System.String,System.Object,System.String,System.Boolean)">
            <summary>
            发布事件
            </summary>
            <param name="name">消息名称</param>
            <param name="data">事件数据</param>
            <param name="callback">回调名称</param>
            <param name="send">是否立即发送消息</param>
        </member>
        <member name="T:KissU.Util.Events.ISimpleEventBus">
            <summary>
            基于内存的简单事件总线
            </summary>
        </member>
        <member name="T:KissU.Util.Events.MessageEvent">
            <summary>
            消息事件
            </summary>
        </member>
        <member name="P:KissU.Util.Events.MessageEvent.Name">
            <summary>
            消息名称
            </summary>
        </member>
        <member name="P:KissU.Util.Events.MessageEvent.Data">
            <summary>
            事件数据
            </summary>
        </member>
        <member name="P:KissU.Util.Events.MessageEvent.Callback">
            <summary>
            回调名称
            </summary>
        </member>
        <member name="P:KissU.Util.Events.MessageEvent.Send">
            <summary>
            是否立即发送消息
            </summary>
        </member>
        <member name="M:KissU.Util.Events.MessageEvent.ToString">
            <summary>
            输出日志
            </summary>
        </member>
        <member name="T:KissU.Util.Exceptions.ConcurrencyException">
            <summary>
            并发异常
            </summary>
        </member>
        <member name="F:KissU.Util.Exceptions.ConcurrencyException._message">
            <summary>
            消息
            </summary>
        </member>
        <member name="M:KissU.Util.Exceptions.ConcurrencyException.#ctor">
            <summary>
            初始化并发异常
            </summary>
        </member>
        <member name="M:KissU.Util.Exceptions.ConcurrencyException.#ctor(System.String)">
            <summary>
            初始化并发异常
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="M:KissU.Util.Exceptions.ConcurrencyException.#ctor(System.Exception)">
            <summary>
            初始化并发异常
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:KissU.Util.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            初始化并发异常
            </summary>
            <param name="message">错误消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:KissU.Util.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            初始化并发异常
            </summary>
            <param name="message">错误消息</param>
            <param name="exception">异常</param>
            <param name="code">错误码</param>
        </member>
        <member name="P:KissU.Util.Exceptions.ConcurrencyException.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:KissU.Util.Exceptions.Prompts.ExceptionPrompt">
            <summary>
            异常提示
            </summary>
        </member>
        <member name="F:KissU.Util.Exceptions.Prompts.ExceptionPrompt.Prompts">
            <summary>
            异常提示组件集合
            </summary>
        </member>
        <member name="P:KissU.Util.Exceptions.Prompts.ExceptionPrompt.IsShowSystemException">
            <summary>
            是否显示系统异常消息
            </summary>
        </member>
        <member name="M:KissU.Util.Exceptions.Prompts.ExceptionPrompt.AddPrompt(KissU.Util.Exceptions.Prompts.IExceptionPrompt)">
            <summary>
            添加异常提示
            </summary>
            <param name="prompt">异常提示</param>
        </member>
        <member name="M:KissU.Util.Exceptions.Prompts.ExceptionPrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:KissU.Util.Exceptions.Prompts.ExceptionPrompt.GetExceptionPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
        </member>
        <member name="T:KissU.Util.Exceptions.Prompts.IExceptionPrompt">
            <summary>
            异常提示
            </summary>
        </member>
        <member name="M:KissU.Util.Exceptions.Prompts.IExceptionPrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="T:KissU.Util.Exceptions.Warning">
            <summary>
            应用程序异常
            </summary>
        </member>
        <member name="M:KissU.Util.Exceptions.Warning.#ctor(System.String)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="M:KissU.Util.Exceptions.Warning.#ctor(System.Exception)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:KissU.Util.Exceptions.Warning.#ctor(System.String,System.String)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
        </member>
        <member name="M:KissU.Util.Exceptions.Warning.#ctor(System.String,System.String,System.Exception)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="exception">异常</param>
        </member>
        <member name="P:KissU.Util.Exceptions.Warning.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="M:KissU.Util.Exceptions.Warning.GetMessage">
            <summary>
            获取错误消息
            </summary>
        </member>
        <member name="M:KissU.Util.Exceptions.Warning.GetMessage(System.Exception)">
            <summary>
            获取错误消息
            </summary>
        </member>
        <member name="M:KissU.Util.Exceptions.Warning.AppendMessage(System.Text.StringBuilder,System.Exception)">
            <summary>
            添加异常消息
            </summary>
        </member>
        <member name="M:KissU.Util.Exceptions.Warning.GetExceptions">
            <summary>
            获取异常列表
            </summary>
        </member>
        <member name="M:KissU.Util.Exceptions.Warning.GetExceptions(System.Exception)">
            <summary>
            获取异常列表
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="M:KissU.Util.Exceptions.Warning.AddException(System.Collections.Generic.List{System.Exception},System.Exception)">
            <summary>
            添加内部异常
            </summary>
        </member>
        <member name="M:KissU.Util.Exceptions.Warning.GetPrompt(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            获取友情提示
            </summary>
            <param name="level">日志级别</param>
        </member>
        <member name="T:KissU.Util.Expressions.ParameterRebinder">
            <summary>
            参数重绑定操作
            </summary>
        </member>
        <member name="F:KissU.Util.Expressions.ParameterRebinder._map">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="M:KissU.Util.Expressions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            初始化参数重绑定操作
            </summary>
            <param name="map">参数字典</param>
        </member>
        <member name="M:KissU.Util.Expressions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map">参数字典</param>
            <param name="exp">表达式</param>
        </member>
        <member name="M:KissU.Util.Expressions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="parameterExpression">参数</param>
        </member>
        <member name="T:KissU.Util.Expressions.PredicateExpressionBuilder`1">
            <summary>
            谓词表达式生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Expressions.PredicateExpressionBuilder`1._parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:KissU.Util.Expressions.PredicateExpressionBuilder`1._result">
            <summary>
            结果表达式
            </summary>
        </member>
        <member name="M:KissU.Util.Expressions.PredicateExpressionBuilder`1.#ctor">
            <summary>
            初始化谓词表达式生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Expressions.PredicateExpressionBuilder`1.GetParameter">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="M:KissU.Util.Expressions.PredicateExpressionBuilder`1.Append``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},KissU.Util.Datas.Queries.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性表达式</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Expressions.PredicateExpressionBuilder`1.Append``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},KissU.Util.Datas.Queries.Operator,System.Linq.Expressions.Expression)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性表达式</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Expressions.PredicateExpressionBuilder`1.Append(System.String,KissU.Util.Datas.Queries.Operator,System.Object)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性名</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Expressions.PredicateExpressionBuilder`1.Append(System.String,KissU.Util.Datas.Queries.Operator,System.Linq.Expressions.Expression)">
            <summary>
            添加表达式
            </summary>
            <param name="property">属性名</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Expressions.PredicateExpressionBuilder`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:KissU.Util.Expressions.PredicateExpressionBuilder`1.ToLambda">
            <summary>
            转换为Lambda表达式
            </summary>
        </member>
        <member name="T:KissU.Util.Extensions">
            <summary>
            系统扩展 - 公共
            </summary>
            <summary>
            系统扩展 - 类型转换
            </summary>
            <summary>
            系统扩展 - 日期
            </summary>
            <summary>
            实体扩展
            </summary>
            <summary>
            异常扩展
            </summary>
            <summary>
            系统扩展 - 格式化
            </summary>
            <summary>
            系统扩展 - 基础设施
            </summary>
            <summary>
            系统扩展 - Lambda表达式
            </summary>
            <summary>
            查询扩展
            </summary>
            <summary>
            系统扩展 - 反射
            </summary>
            <summary>
            系统扩展 - 安全
            </summary>
            <summary>
            系统扩展 - 字符串
            </summary>
            <summary>
            树型扩展
            </summary>
            <summary>
            系统扩展 - 验证
            </summary>
        </member>
        <member name="M:KissU.Util.Extensions.SafeValue``1(System.Nullable{``0})">
            <summary>
            安全获取值，当值为null时，不会抛出异常
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:KissU.Util.Extensions.Value(System.Enum)">
            <summary>
            获取枚举值
            </summary>
            <param name="instance">枚举实例</param>
        </member>
        <member name="M:KissU.Util.Extensions.Value``1(System.Enum)">
            <summary>
            获取枚举值
            </summary>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="instance">枚举实例</param>
        </member>
        <member name="M:KissU.Util.Extensions.Description(System.Enum)">
            <summary>
            获取枚举描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="instance">枚举实例</param>
        </member>
        <member name="M:KissU.Util.Extensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            转换为用分隔符连接的字符串
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="list">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号 "'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
        </member>
        <member name="M:KissU.Util.Extensions.SafeString(System.Object)">
            <summary>
            安全转换为字符串，去除两端空格，当值为null时返回""
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToBool(System.String)">
            <summary>
            转换为bool
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToBoolOrNull(System.String)">
            <summary>
            转换为可空bool
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToInt(System.String)">
            <summary>
            转换为int
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToIntOrNull(System.String)">
            <summary>
            转换为可空int
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToLong(System.String)">
            <summary>
            转换为long
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToLongOrNull(System.String)">
            <summary>
            转换为可空long
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToDouble(System.String)">
            <summary>
            转换为double
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToDoubleOrNull(System.String)">
            <summary>
            转换为可空double
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToDecimal(System.String)">
            <summary>
            转换为decimal
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToDecimalOrNull(System.String)">
            <summary>
            转换为可空decimal
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToDate(System.String)">
            <summary>
            转换为日期
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToDateOrNull(System.String)">
            <summary>
            转换为可空日期
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToGuid(System.String)">
            <summary>
            转换为Guid
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToGuidOrNull(System.String)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">数据,范例: "83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A"</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToGuidList(System.Collections.Generic.IList{System.String})">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">字符串集合</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="removeSecond">是否移除秒</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="removeSecond">是否移除秒</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToTimeString(System.DateTime)">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToMillisecondString(System.DateTime)">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToMillisecondString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToChineseDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToChineseDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToChineseDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="removeSecond">是否移除秒</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToChineseDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="removeSecond">是否移除秒</param>
        </member>
        <member name="M:KissU.Util.Extensions.Description(System.TimeSpan)">
            <summary>
            获取描述
            </summary>
            <param name="span">时间间隔</param>
        </member>
        <member name="M:KissU.Util.Extensions.Compare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            比较
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="newList">新实体集合</param>
            <param name="oldList">旧实体集合</param>
        </member>
        <member name="M:KissU.Util.Extensions.Compare``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            比较
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
            <param name="newList">新实体集合</param>
            <param name="oldList">旧实体集合</param>
        </member>
        <member name="M:KissU.Util.Extensions.Compare(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体标识集合</param>
            <param name="oldList">旧实体标识集合</param>
        </member>
        <member name="M:KissU.Util.Extensions.Compare(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体标识集合</param>
            <param name="oldList">旧实体标识集合</param>
        </member>
        <member name="M:KissU.Util.Extensions.Compare(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体标识集合</param>
            <param name="oldList">旧实体标识集合</param>
        </member>
        <member name="M:KissU.Util.Extensions.Compare(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            比较
            </summary>
            <param name="newList">新实体标识集合</param>
            <param name="oldList">旧实体标识集合</param>
        </member>
        <member name="M:KissU.Util.Extensions.GetRawException(System.Exception)">
            <summary>
            获取原始异常
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:KissU.Util.Extensions.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:KissU.Util.Extensions.Description(System.Boolean)">
            <summary>
            获取描述
            </summary>
            <param name="value">布尔值</param>
        </member>
        <member name="M:KissU.Util.Extensions.Description(System.Nullable{System.Boolean})">
            <summary>
            获取描述
            </summary>
            <param name="value">布尔值</param>
        </member>
        <member name="M:KissU.Util.Extensions.AddUtil(Microsoft.Extensions.DependencyInjection.IServiceCollection,KissU.Util.Dependency.IConfig[])">
            <summary>
            注册Util基础设施服务
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:KissU.Util.Extensions.AddUtil(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{AspectCore.Configuration.IAspectConfiguration},KissU.Util.Dependency.IConfig[])">
            <summary>
            注册Util基础设施服务
            </summary>
            <param name="services">服务集合</param>
            <param name="aopConfigAction">Aop配置操作</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:KissU.Util.Extensions.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyName">属性名,支持多级属性名，与句点分隔，范例：Customer.Name</param>
        </member>
        <member name="M:KissU.Util.Extensions.Property(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="member">属性</param>
        </member>
        <member name="M:KissU.Util.Extensions.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            与操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Extensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Extensions.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            或操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Extensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Extensions.Value``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取lambda表达式的值
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:KissU.Util.Extensions.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Extensions.Equal(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.Greater(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Extensions.Greater(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.Less(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Extensions.Less(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.StartsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            头匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.EndsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            尾匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.Contains(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            模糊匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.Operation(System.Linq.Expressions.Expression,KissU.Util.Datas.Queries.Operator,System.Object)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.Operation(System.Linq.Expressions.Expression,KissU.Util.Datas.Queries.Operator,System.Linq.Expressions.Expression)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:KissU.Util.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:KissU.Util.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="paramTypes">参数类型列表</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:KissU.Util.Extensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="first">左操作数</param>
            <param name="second">右操作数</param>
            <param name="merge">合并操作</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建Lambda表达式
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToPredicate``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建谓词表达式
            </summary>
            <typeparam name="T">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:KissU.Util.Extensions.Where``1(System.Linq.IQueryable{``0},KissU.Util.Domains.Repositories.ICriteria{``0})">
            <summary>
            添加查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="criteria">查询条件对象</param>
        </member>
        <member name="M:KissU.Util.Extensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            添加查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Extensions.WhereIfNotEmpty``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            添加查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="predicate">查询条件,如果参数值为空，则忽略该查询条件，范例：t => t.Name == ""，该查询条件被忽略。
            注意：一次仅能添加一个条件，范例：t => t.Name == "a" &amp;&amp; t.Mobile == "123"，不支持，将抛出异常</param>
        </member>
        <member name="M:KissU.Util.Extensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Int32},System.Nullable{System.Int32},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Extensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Double},System.Nullable{System.Double},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Extensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Age</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Extensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertyExpression">属性表达式，范例：t => t.Time</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Extensions.Page``1(System.Linq.IQueryable{``0},KissU.Util.Domains.Repositories.IPager)">
            <summary>
            分页，包含排序
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="pager">分页对象</param>
        </member>
        <member name="M:KissU.Util.Extensions.ToPagerList``1(System.Linq.IQueryable{``0},KissU.Util.Domains.Repositories.IPager)">
            <summary>
            转换为分页列表，包含排序分页操作
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="pager">分页对象</param>
        </member>
        <member name="M:KissU.Util.Extensions.GetPropertyValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            获取实例上的属性值
            </summary>
            <param name="member">成员信息</param>
            <param name="instance">成员所在的类实例</param>
        </member>
        <member name="M:KissU.Util.Extensions.GetValue(System.Security.Claims.ClaimsIdentity,System.String)">
            <summary>
            获取用户标识声明值
            </summary>
            <param name="identity">用户标识</param>
            <param name="type">声明类型</param>
        </member>
        <member name="M:KissU.Util.Extensions.GetIdentity(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取身份标识
            </summary>
            <param name="context">Http上下文</param>
        </member>
        <member name="M:KissU.Util.Extensions.RemoveEnd(System.String,System.String)">
            <summary>
            移除末尾字符串
            </summary>
            <param name="value">值</param>
            <param name="removeValue">要移除的值</param>
        </member>
        <member name="M:KissU.Util.Extensions.UpdatePathAsync``3(KissU.Util.Domains.Trees.ITreeCompactRepository{``0,``1,``2},``0)">
            <summary>
            更新实体及所有下级节点路径
            </summary>
            <param name="repository">仓储</param>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Extensions.SwapSort(KissU.Util.Domains.Trees.ISortId,KissU.Util.Domains.Trees.ISortId)">
            <summary>
            交换排序
            </summary>
            <param name="entity">实体</param>
            <param name="swapEntity">交换实体</param>
        </member>
        <member name="M:KissU.Util.Extensions.GetMissingParentIds``3(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取缺失的父标识列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            /// <typeparam name="TKey">标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
            <param name="entities">实体列表</param>
        </member>
        <member name="M:KissU.Util.Extensions.CheckNull(System.Object,System.String)">
            <summary>
            检测对象是否为null,为null则抛出<see cref="T:System.ArgumentNullException"/>异常
            </summary>
            <param name="obj">对象</param>
            <param name="parameterName">参数名</param>
        </member>
        <member name="M:KissU.Util.Extensions.IsEmpty(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.IsEmpty(System.Guid)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.IsEmpty(System.Nullable{System.Guid})">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Extensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:KissU.Util.Files.DefaultFileStore">
            <summary>
            本地文件存储服务
            </summary>
        </member>
        <member name="F:KissU.Util.Files.DefaultFileStore._generator">
            <summary>
            路径生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Files.DefaultFileStore.#ctor(KissU.Util.Files.Paths.IPathGenerator)">
            <summary>
            初始化本地文件存储服务
            </summary>
            <param name="pathGenerator">路径生成器</param>
        </member>
        <member name="M:KissU.Util.Files.DefaultFileStore.SaveAsync">
            <summary>
            保存文件,返回完整文件路径 w
            </summary>
        </member>
        <member name="T:KissU.Util.Files.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="M:KissU.Util.Files.FileInfo.#ctor(System.String,System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            初始化文件信息
            </summary>
            <param name="path">文件路径</param>
            <param name="size">文件大小</param>
            <param name="fileName">文件名</param>
            <param name="id">文件标识</param>
        </member>
        <member name="P:KissU.Util.Files.FileInfo.Id">
            <summary>
            文件标识
            </summary>
        </member>
        <member name="P:KissU.Util.Files.FileInfo.Path">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:KissU.Util.Files.FileInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:KissU.Util.Files.FileInfo.Extension">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:KissU.Util.Files.FileInfo.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="T:KissU.Util.Files.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="M:KissU.Util.Files.FileSize.#ctor(System.Int64,KissU.Util.Files.FileSizeUnit)">
            <summary>
            初始化文件大小
            </summary>
            <param name="size">文件大小</param>
            <param name="unit">文件大小单位</param>
        </member>
        <member name="M:KissU.Util.Files.FileSize.GetSize(System.Int64,KissU.Util.Files.FileSizeUnit)">
            <summary>
            获取文件大小
            </summary>
        </member>
        <member name="P:KissU.Util.Files.FileSize.Size">
            <summary>
            文件字节长度
            </summary>
        </member>
        <member name="M:KissU.Util.Files.FileSize.GetSize">
            <summary>
            获取文件大小，单位：字节
            </summary>
        </member>
        <member name="M:KissU.Util.Files.FileSize.GetSizeByK">
            <summary>
            获取文件大小，单位：K
            </summary>
        </member>
        <member name="M:KissU.Util.Files.FileSize.GetSizeByM">
            <summary>
            获取文件大小，单位：M
            </summary>
        </member>
        <member name="M:KissU.Util.Files.FileSize.GetSizeByG">
            <summary>
            获取文件大小，单位：G
            </summary>
        </member>
        <member name="M:KissU.Util.Files.FileSize.ToString">
            <summary>
            输出描述
            </summary>
        </member>
        <member name="T:KissU.Util.Files.FileSizeUnit">
            <summary>
            文件大小单位
            </summary>
        </member>
        <member name="F:KissU.Util.Files.FileSizeUnit.Byte">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:KissU.Util.Files.FileSizeUnit.K">
            <summary>
            K字节
            </summary>
        </member>
        <member name="F:KissU.Util.Files.FileSizeUnit.M">
            <summary>
            M字节
            </summary>
        </member>
        <member name="F:KissU.Util.Files.FileSizeUnit.G">
            <summary>
            G字节
            </summary>
        </member>
        <member name="T:KissU.Util.Files.FileSizeUnitExtensions">
            <summary>
            文件大小单位枚举扩展
            </summary>
        </member>
        <member name="M:KissU.Util.Files.FileSizeUnitExtensions.Description(System.Nullable{KissU.Util.Files.FileSizeUnit})">
            <summary>
            获取描述
            </summary>
        </member>
        <member name="M:KissU.Util.Files.FileSizeUnitExtensions.Value(System.Nullable{KissU.Util.Files.FileSizeUnit})">
            <summary>
            获取值
            </summary>
        </member>
        <member name="T:KissU.Util.Files.IFileStore">
            <summary>
            文件存储服务
            </summary>
        </member>
        <member name="M:KissU.Util.Files.IFileStore.SaveAsync">
            <summary>
            保存文件,返回完整文件路径
            </summary>
        </member>
        <member name="T:KissU.Util.Files.Paths.DefaultBasePath">
            <summary>
            基路径
            </summary>
        </member>
        <member name="F:KissU.Util.Files.Paths.DefaultBasePath._path">
            <summary>
            基路径
            </summary>
        </member>
        <member name="M:KissU.Util.Files.Paths.DefaultBasePath.#ctor(System.String)">
            <summary>
            初始化基路径
            </summary>
            <param name="path">基路径</param>
        </member>
        <member name="M:KissU.Util.Files.Paths.DefaultBasePath.GetPath">
            <summary>
            获取基路径
            </summary>
        </member>
        <member name="T:KissU.Util.Files.Paths.DefaultPathGenerator">
            <summary>
            路径生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Files.Paths.DefaultPathGenerator._basePath">
            <summary>
            基路径
            </summary>
        </member>
        <member name="M:KissU.Util.Files.Paths.DefaultPathGenerator.#ctor(KissU.Util.Files.Paths.IBasePath,KissU.Util.Randoms.IRandomGenerator)">
            <summary>
            初始化路径生成器
            </summary>
            <param name="basePath">基路径</param>
            <param name="randomGenerator">随机数生成器</param>
        </member>
        <member name="M:KissU.Util.Files.Paths.DefaultPathGenerator.GeneratePath(System.String)">
            <summary>
            创建路径
            </summary>
            <param name="fileName">被处理过的安全有效的文件名</param>
        </member>
        <member name="T:KissU.Util.Files.Paths.IBasePath">
            <summary>
            基路径
            </summary>
        </member>
        <member name="M:KissU.Util.Files.Paths.IBasePath.GetPath">
            <summary>
            获取基路径
            </summary>
        </member>
        <member name="T:KissU.Util.Files.Paths.IPathGenerator">
            <summary>
            路径生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Files.Paths.IPathGenerator.Generate(System.String)">
            <summary>
            生成路径
            </summary>
            <param name="fileName">文件名，必须包含扩展名，如果仅传入扩展名则生成随机文件名</param>
        </member>
        <member name="T:KissU.Util.Files.Paths.PathGeneratorBase">
            <summary>
            路径生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Files.Paths.PathGeneratorBase._randomGenerator">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Files.Paths.PathGeneratorBase.#ctor(KissU.Util.Randoms.IRandomGenerator)">
            <summary>
            初始化路径生成器
            </summary>
            <param name="randomGenerator">随机数生成器</param>
        </member>
        <member name="M:KissU.Util.Files.Paths.PathGeneratorBase.Generate(System.String)">
            <summary>
            生成完整路径
            </summary>
            <param name="fileName">文件名，必须包含扩展名，如果仅传入扩展名则生成随机文件名</param>
        </member>
        <member name="M:KissU.Util.Files.Paths.PathGeneratorBase.GeneratePath(System.String)">
            <summary>
            创建完整路径
            </summary>
            <param name="fileName">被处理过的安全有效的文件名</param>
        </member>
        <member name="M:KissU.Util.Files.Paths.PathGeneratorBase.GetFileName(System.String)">
            <summary>
            获取文件名
            </summary>
        </member>
        <member name="M:KissU.Util.Files.Paths.PathGeneratorBase.FilterFileName(System.String)">
            <summary>
            过滤文件名
            </summary>
        </member>
        <member name="T:KissU.Util.Helpers.Common">
            <summary>
            常用公共操作
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Common.GetType``1">
            <summary>
            获取类型
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:KissU.Util.Helpers.Common.GetType(System.Type)">
            <summary>
            获取类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="P:KissU.Util.Helpers.Common.Line">
            <summary>
            换行符
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Common.GetPhysicalPath(System.String)">
            <summary>
            获取物理路径
            </summary>
            <param name="relativePath">相对路径</param>
        </member>
        <member name="M:KissU.Util.Helpers.Common.GetWebRootPath(System.String)">
            <summary>
            获取wwwroot路径
            </summary>
            <param name="relativePath">相对路径</param>
        </member>
        <member name="P:KissU.Util.Helpers.Common.IsLinux">
            <summary>
            是否Linux操作系统
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Common.IsWindows">
            <summary>
            是否Windows操作系统
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Common.IsOsx">
            <summary>
            是否苹果操作系统
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Common.System">
            <summary>
            当前操作系统
            </summary>
        </member>
        <member name="T:KissU.Util.Helpers.Const">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Const.ChinesePinYin">
            <summary>
            汉字及拼音首字母
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Const.SimplifiedChinese">
            <summary>
            常用简体汉字
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Const.Letters">
            <summary>
            英文字母
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Const.Numbers">
            <summary>
            数字
            </summary>
        </member>
        <member name="T:KissU.Util.Helpers.Convert">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToInt(System.Object)">
            <summary>
            转换为32位整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToIntOrNull(System.Object)">
            <summary>
            转换为32位可空整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToLong(System.Object)">
            <summary>
            转换为64位整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToLongOrNull(System.Object)">
            <summary>
            转换为64位可空整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToFloat(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToFloatOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位可空浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToDouble(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToDoubleOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位可空浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToDecimal(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToDecimalOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位可空浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToBool(System.Object)">
            <summary>
            转换为布尔值
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToBoolOrNull(System.Object)">
            <summary>
            转换为可空布尔值
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.GetBool(System.Object)">
            <summary>
            获取布尔值
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToDate(System.Object)">
            <summary>
            转换为日期
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToDateOrNull(System.Object)">
            <summary>
            转换为可空日期
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToGuid(System.Object)">
            <summary>
            转换为Guid
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToGuidOrNull(System.Object)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="input">以逗号分隔的Guid集合字符串，范例:83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToList``1(System.String)">
            <summary>
            泛型集合转换
            </summary>
            <typeparam name="T">目标元素类型</typeparam>
            <param name="input">以逗号分隔的元素集合字符串，范例:83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.To``1(System.Object)">
            <summary>
            通用泛型转换
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="input">输入值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToBytes(System.String)">
            <summary>
            转换为字节数组
            </summary>
            <param name="input">输入值</param>        
        </member>
        <member name="M:KissU.Util.Helpers.Convert.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            转换为字节数组
            </summary>
            <param name="input">输入值</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="T:KissU.Util.Helpers.Encrypt">
            <summary>
            加密操作
            说明：
            1. AES加密整理自支付宝SDK
            2. RSA加密采用 https://github.com/stulzq/DotnetCore.RSA/blob/master/DotnetCore.RSA/RSAHelper.cs
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.Md5By16(System.String)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.Md5By16(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.Md5(System.String,System.Text.Encoding,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Md5加密
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.Md5By32(System.String)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.Md5By32(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="value">值</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="F:KissU.Util.Helpers.Encrypt.DesKey">
            <summary>
            DES密钥,24位字符串
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.DesEncrypt(System.Object)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.DesEncrypt(System.Object,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥,24位</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.DesEncrypt(System.Object,System.String,System.Text.Encoding)">
            <summary>
            DES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥,24位</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.ValidateDes(System.String,System.String)">
            <summary>
            验证Des加密参数
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.CreateDesProvider(System.String)">
            <summary>
            创建Des加密服务提供程序
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.GetEncryptResult(System.String,System.Text.Encoding,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            获取加密结果
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.DesDecrypt(System.Object)">
            <summary>
            DES解密
            </summary>
            <param name="value">加密后的值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.DesDecrypt(System.Object,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="value">加密后的值</param>
            <param name="key">密钥,24位</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.DesDecrypt(System.Object,System.String,System.Text.Encoding)">
            <summary>
            DES解密
            </summary>
            <param name="value">加密后的值</param>
            <param name="key">密钥,24位</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.GetDecryptResult(System.String,System.Text.Encoding,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            获取解密结果
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Encrypt._iv">
            <summary>
            128位0向量
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Encrypt.Iv">
            <summary>
            128位0向量
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Encrypt.AesKey">
            <summary>
            AES密钥
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.AesEncrypt(System.String)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.AesEncrypt(System.String,System.String)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.AesEncrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES加密
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.CreateRijndaelManaged(System.String,System.Text.Encoding,System.Security.Cryptography.CipherMode)">
            <summary>
            创建RijndaelManaged
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.AesDecrypt(System.String)">
            <summary>
            AES解密
            </summary>
            <param name="value">加密后的值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.AesDecrypt(System.String,System.String)">
            <summary>
            AES解密
            </summary>
            <param name="value">加密后的值</param>
            <param name="key">密钥</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.AesDecrypt(System.String,System.String,System.Text.Encoding,System.Security.Cryptography.CipherMode)">
            <summary>
            AES解密
            </summary>
            <param name="value">加密后的值</param>
            <param name="key">密钥</param>
            <param name="encoding">编码</param>
            <param name="cipherMode">密码模式</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.RsaSign(System.String,System.String)">
            <summary>
            RSA加密，采用 SHA1 算法
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.RsaSign(System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA加密，采用 SHA1 算法
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.Rsa2Sign(System.String,System.String)">
            <summary>
            RSA加密，采用 SHA256 算法
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.Rsa2Sign(System.String,System.String,System.Text.Encoding)">
            <summary>
            RSA加密，采用 SHA256 算法
            </summary>
            <param name="value">待加密的值</param>
            <param name="key">密钥</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.RsaSign(System.String,System.String,System.Text.Encoding,KissU.Util.Helpers.Internal.RSAType)">
            <summary>
            Rsa加密
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.RsaVerify(System.String,System.String,System.String)">
            <summary>
            Rsa验签，采用 SHA1 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.RsaVerify(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Rsa验签，采用 SHA1 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.Rsa2Verify(System.String,System.String,System.String)">
            <summary>
            Rsa验签，采用 SHA256 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.Rsa2Verify(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Rsa验签，采用 SHA256 算法
            </summary>
            <param name="value">待验签的值</param>
            <param name="publicKey">公钥</param>
            <param name="sign">签名</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.RsaVerify(System.String,System.String,System.String,System.Text.Encoding,KissU.Util.Helpers.Internal.RSAType)">
            <summary>
            Rsa验签
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.HmacSha256(System.String,System.String)">
            <summary>
            HMACSHA256加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
        </member>
        <member name="M:KissU.Util.Helpers.Encrypt.HmacSha256(System.String,System.String,System.Text.Encoding)">
            <summary>
            HMACSHA256加密
            </summary>
            <param name="value">值</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="T:KissU.Util.Helpers.Enum">
            <summary>
            枚举操作
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.Parse``1(System.Object)">
            <summary>
            获取实例
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名或值,范例:Enum1枚举有成员A=0,则传入"A"或"0"获取 Enum1.A</param>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.GetName``1(System.Object)">
            <summary>
            获取成员名
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,则传入Enum1.A或0,获取成员名"A"</param>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.GetName(System.Type,System.Object)">
            <summary>
            获取成员名
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.GetValue``1(System.Object)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可，范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.GetValue(System.Type,System.Object)">
            <summary>
            获取成员值
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.GetDescription``1(System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.GetDescription(System.Type,System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.GetItems``1">
            <summary>
            获取项集合,文本设置为Description，值为Value
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.GetItems(System.Type)">
            <summary>
            获取项集合,文本设置为Description，值为Value
            </summary>
            <param name="type">枚举类型</param>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.AddItem(System.Type,System.Collections.Generic.ICollection{KissU.Util.Item},System.Reflection.FieldInfo)">
            <summary>
            添加描述项
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.GetNames``1">
            <summary>
            获取名称集合
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="M:KissU.Util.Helpers.Enum.GetNames(System.Type)">
            <summary>
            获取名称集合
            </summary>
            <param name="type">枚举类型</param>
        </member>
        <member name="T:KissU.Util.Helpers.File">
            <summary>
            文件和流操作
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.File.ToBytesAsync(System.IO.Stream)">
            <summary>
            流转换为字节流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:KissU.Util.Helpers.File.ToBytes(System.IO.Stream)">
            <summary>
            流转换为字节流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:KissU.Util.Helpers.File.ToBytes(System.String)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="data">数据,默认字符编码utf-8</param>        
        </member>
        <member name="M:KissU.Util.Helpers.File.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.File.Read(System.String)">
            <summary>
            将文件读取到字节流中
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:KissU.Util.Helpers.File.ToString(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            流转换成字符串
            </summary>
            <param name="stream">流</param>
            <param name="encoding">字符编码</param>
            <param name="bufferSize">缓冲区大小</param>
            <param name="isCloseStream">读取完成是否释放流，默认为true</param>
        </member>
        <member name="M:KissU.Util.Helpers.File.ToStringAsync(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            流转换成字符串
            </summary>
            <param name="stream">流</param>
            <param name="encoding">字符编码</param>
            <param name="bufferSize">缓冲区大小</param>
            <param name="isCloseStream">读取完成是否释放流，默认为true</param>
        </member>
        <member name="M:KissU.Util.Helpers.File.CopyToStringAsync(System.IO.Stream,System.Text.Encoding)">
            <summary>
            复制流并转换成字符串
            </summary>
            <param name="stream">流</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="T:KissU.Util.Helpers.Id">
            <summary>
            标识生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Id._id">
            <summary>
            标识
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Id.SetId(System.String)">
            <summary>
            设置标识
            </summary>
            <param name="id">Id</param>
        </member>
        <member name="M:KissU.Util.Helpers.Id.Reset">
            <summary>
            重置标识
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Id.ObjectId">
            <summary>
            创建标识
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Id.Guid">
            <summary>
            用Guid创建标识,去掉分隔符
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Id.GetGuid">
            <summary>
            获取Guid
            </summary>
        </member>
        <member name="T:KissU.Util.Helpers.Internal.ObjectId">
            <summary>
            Id生成器，代码出自：https://github.com/tangxuehua/ecommon/blob/master/src/ECommon/Utilities/ObjectId.cs
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.#ctor(System.DateTime,System.Int32,System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="timestamp">The timestamp (expressed as a DateTime).</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.#ctor(System.Int32,System.Int32,System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ObjectId class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:KissU.Util.Helpers.Internal.ObjectId.Empty">
            <summary>
            Gets an instance of ObjectId where the value is empty.
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Internal.ObjectId.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Internal.ObjectId.Machine">
            <summary>
            Gets the machine.
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Internal.ObjectId.Pid">
            <summary>
            Gets the PID.
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Internal.ObjectId.Increment">
            <summary>
            Gets the increment.
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Internal.ObjectId.CreationTime">
            <summary>
            Gets the creation time (derived from the timestamp).
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.op_LessThan(KissU.Util.Helpers.Internal.ObjectId,KissU.Util.Helpers.Internal.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than the second ObjectId.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.op_LessThanOrEqual(KissU.Util.Helpers.Internal.ObjectId,KissU.Util.Helpers.Internal.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is less than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.op_Equality(KissU.Util.Helpers.Internal.ObjectId,KissU.Util.Helpers.Internal.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.op_Inequality(KissU.Util.Helpers.Internal.ObjectId,KissU.Util.Helpers.Internal.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are not equal.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.op_GreaterThanOrEqual(KissU.Util.Helpers.Internal.ObjectId,KissU.Util.Helpers.Internal.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than or equal to the second ObjectId.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.op_GreaterThan(KissU.Util.Helpers.Internal.ObjectId,KissU.Util.Helpers.Internal.ObjectId)">
            <summary>
            Compares two ObjectIds.
            </summary>
            <param name="lhs">The first ObjectId.</param>
            <param name="rhs">The other ObjectId</param>
            <returns>True if the first ObjectId is greather than the second ObjectId.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.GenerateNewId">
            <summary>
            Generates a new ObjectId with a unique value.
            </summary>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.GenerateNewId(System.DateTime)">
            <summary>
            Generates a new ObjectId with a unique value (with the timestamp component based on a given DateTime).
            </summary>
            <param name="timestamp">The timestamp component (expressed as a DateTime).</param>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.GenerateNewId(System.Int32)">
            <summary>
            Generates a new ObjectId with a unique value (with the given timestamp).
            </summary>
            <param name="timestamp">The timestamp component.</param>
            <returns>An ObjectId.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.GenerateNewStringId">
            <summary>
            Generates a new ObjectId string with a unique value.
            </summary>
            <returns>The string value of the new generated ObjectId.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.Pack(System.Int32,System.Int32,System.Int16,System.Int32)">
            <summary>
            Packs the components of an ObjectId into a byte array.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.Parse(System.String)">
            <summary>
            Parses a string and creates a new ObjectId.
            </summary>
            <param name="s">The string value.</param>
            <returns>A ObjectId.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.Unpack(System.Byte[],System.Int32@,System.Int32@,System.Int16@,System.Int32@)">
            <summary>
            Unpacks a byte array into the components of an ObjectId.
            </summary>
            <param name="bytes">A byte array.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="machine">The machine hash.</param>
            <param name="pid">The PID.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.GetCurrentProcessId">
            <summary>
            Gets the current process id.  This method exists because of how CAS operates on the call stack, checking
            for permissions before executing the method.  Hence, if we inlined this call, the calling method would not execute
            before throwing an exception requiring the try/catch at an even higher level that we don't necessarily control.
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.CompareTo(KissU.Util.Helpers.Internal.ObjectId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="other">The other ObjectId.</param>
            <returns>A 32-bit signed integer that indicates whether this ObjectId is less than, equal to, or greather than the other.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.Equals(KissU.Util.Helpers.Internal.ObjectId)">
            <summary>
            Compares this ObjectId to another ObjectId.
            </summary>
            <param name="rhs">The other ObjectId.</param>
            <returns>True if the two ObjectIds are equal.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.Equals(System.Object)">
            <summary>
            Compares this ObjectId to another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the other object is an ObjectId and equal to this one.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.ToByteArray">
            <summary>
            Converts the ObjectId to a byte array.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.ToString">
            <summary>
            Returns a string representation of the value.
            </summary>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.ParseHexString(System.String)">
            <summary>
            Parses a hex string into its equivalent byte array.
            </summary>
            <param name="s">The hex string to parse.</param>
            <returns>The byte equivalent of the hex string.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.ToHexString(System.Byte[])">
            <summary>
            Converts a byte array to a hex string.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.ToMillisecondsSinceEpoch(System.DateTime)">
            <summary>
            Converts a DateTime to number of milliseconds since Unix epoch.
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>Number of seconds since Unix epoch.</returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.ObjectId.ToUniversalTime(System.DateTime)">
            <summary>
            Converts a DateTime to UTC (with special handling for MinValue and MaxValue).
            </summary>
            <param name="dateTime">A DateTime.</param>
            <returns>The DateTime in UTC.</returns>
        </member>
        <member name="T:KissU.Util.Helpers.Internal.RsaHelper">
            <summary>
            RSA加解密 使用OpenSSL的公钥加密/私钥解密
            
            公私钥请使用openssl生成  ssh-keygen -t rsa 命令生成的公钥私钥是不行的
            
            作者：李志强
            时间：2017年10月30日15:50:14
            QQ:501232752
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.RsaHelper.#ctor(KissU.Util.Helpers.Internal.RSAType,System.Text.Encoding,System.String,System.String)">
            <summary>
            实例化RSAHelper
            </summary>
            <param name="rsaType">加密算法类型 RSA SHA1;RSA2 SHA256 密钥长度至少为2048</param>
            <param name="encoding">编码类型</param>
            <param name="privateKey">私钥</param>
            <param name="publicKey">公钥</param>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.RsaHelper.Sign(System.String)">
            <summary>
            使用私钥签名
            </summary>
            <param name="data">原始数据</param>
            <returns></returns>
        </member>
        <member name="M:KissU.Util.Helpers.Internal.RsaHelper.Verify(System.String,System.String)">
            <summary>
            使用公钥验证签名
            </summary>
            <param name="data">原始数据</param>
            <param name="sign">签名</param>
            <returns></returns>
        </member>
        <member name="T:KissU.Util.Helpers.Internal.RSAType">
            <summary>
            RSA算法类型
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Internal.RSAType.RSA">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Internal.RSAType.RSA2">
            <summary>
            RSA2 密钥长度至少为2048
            SHA256
            </summary>
        </member>
        <member name="T:KissU.Util.Helpers.Ioc">
            <summary>
            容器
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Ioc.DefaultContainer">
            <summary>
            默认容器
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Ioc.CreateContainer(KissU.Util.Dependency.IConfig[])">
            <summary>
            创建容器
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:KissU.Util.Helpers.Ioc.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Helpers.Ioc.CreateList``1(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Helpers.Ioc.Create``1(System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Helpers.Ioc.Create``1(System.Type,System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:KissU.Util.Helpers.Ioc.BeginScope">
            <summary>
            作用域开始
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Ioc.Register(KissU.Util.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:KissU.Util.Helpers.Ioc.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,KissU.Util.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:KissU.Util.Helpers.Ioc.Dispose">
            <summary>
            释放容器
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Ioc.Register(Autofac.IContainer)">
            <summary>
            注册依赖
            </summary>
            <param name="container">容器</param>
        </member>
        <member name="T:KissU.Util.Helpers.Json">
            <summary>
            Json操作
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Json.ToObject``1(System.String)">
            <summary>
            将Json字符串转换为对象
            </summary>
            <param name="json">Json字符串</param>
        </member>
        <member name="M:KissU.Util.Helpers.Json.ToJson(System.Object,System.Boolean)">
            <summary>
            将对象转换为Json字符串
            </summary>
            <param name="target">目标对象</param>
            <param name="isConvertToSingleQuotes">是否将双引号转成单引号</param>
        </member>
        <member name="T:KissU.Util.Helpers.Lambda">
            <summary>
            Lambda表达式操作
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetType(System.Linq.Expressions.Expression)">
            <summary>
            获取类型
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            获取成员
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetMemberExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取成员表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="right">取表达式右侧,(l,r) => l.id == r.id，设置为true,返回r.id表达式</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetMethodCallExpressionName(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的成员名称
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetName(System.Linq.Expressions.Expression)">
            <summary>
            获取成员名称，范例：t => t.A.Name,返回 A.Name
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetMemberName(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取成员名称
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取名称列表，范例：t => new object[] { t.A.B, t.C },返回A.B,C
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式,范例：t => new object[]{t.A,t.B}</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetLastName(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取最后一级成员名称，范例：t => t.A.Name,返回 Name
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
            <param name="right">取表达式右侧,(l,r) => l.LId == r.RId，设置为true,返回RId</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.IsValueExpression(System.Linq.Expressions.Expression)">
            <summary>
            是否值表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetLastNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取最后一级成员名称列表，范例：t => new object[] { t.A.B, t.C },返回B,C
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式,范例：t => new object[]{t.A,t.B}</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            获取值,范例：t => t.Name == "A",返回 A
            </summary>
            <param name="expression">表达式,范例：t => t.Name == "A"</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.HasParameter(System.Linq.Expressions.Expression)">
            <summary>
            是否包含参数，用于检测是属性，而不是值
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetMethodCallExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetMemberValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取属性表达式的值
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetConstantExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式的值
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetOperator(System.Linq.Expressions.Expression)">
            <summary>
            获取查询操作符,范例：t => t.Name == "A",返回 Operator.Equal
            </summary>
            <param name="expression">表达式,范例：t => t.Name == "A"</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetMethodCallExpressionOperator(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetParameter(System.Linq.Expressions.Expression)">
            <summary>
            获取参数，范例：t.Name,返回 t
            </summary>
            <param name="expression">表达式，范例：t.Name</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetGroupPredicates(System.Linq.Expressions.Expression)">
            <summary>
            获取分组的谓词表达式，通过Or进行分组
            </summary>
            <param name="expression">谓词表达式</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.CreateGroup(System.Collections.Generic.List{System.Collections.Generic.List{System.Linq.Expressions.Expression}})">
            <summary>
            创建分组
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.AddPredicates(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Collections.Generic.List{System.Linq.Expressions.Expression}},System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            添加通过Or分割的谓词表达式
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetConditionCount(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取查询条件个数
            </summary>
            <param name="expression">谓词表达式,范例1：t => t.Name == "A" ，结果1。
            范例2：t => t.Name == "A" &amp;&amp; t.Age =1 ，结果2。</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetAttribute``1(System.Linq.Expressions.Expression)">
            <summary>
            获取特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="expression">属性表达式</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetAttribute``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetAttribute``2(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GetAttributes``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.Constant(System.Object,System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式
            </summary>
            <param name="value">值</param>
            <param name="expression">表达式</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.CreateParameter``1">
            <summary>
            创建参数表达式
            </summary>
            <typeparam name="T">参数类型</typeparam>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.Equal``1(System.String,System.Object)">
            <summary>
            创建等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.NotEqual``1(System.String,System.Object)">
            <summary>
            创建不等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.Greater``1(System.String,System.Object)">
            <summary>
            创建大于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.GreaterEqual``1(System.String,System.Object)">
            <summary>
            创建大于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.Less``1(System.String,System.Object)">
            <summary>
            创建小于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.LessEqual``1(System.String,System.Object)">
            <summary>
            创建小于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.Starts``1(System.String,System.Object)">
            <summary>
            调用StartsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.Ends``1(System.String,System.Object)">
            <summary>
            调用EndsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.Contains``1(System.String,System.Object)">
            <summary>
            调用Contains方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Lambda.ParsePredicate``1(System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            解析为谓词表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="T:KissU.Util.Helpers.Random">
            <summary>
            随机数操作
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Random._random">
            <summary>
            随机数
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Random.#ctor">
            <summary>
            初始化随机数
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Random.Next(System.Int32)">
            <summary>
            获取指定范围的随机整数
            </summary>
            <param name="max">最大值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Random.Next(System.Int32,System.Int32)">
            <summary>
            获取指定范围的随机整数，该范围包括最小值，但不包括最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:KissU.Util.Helpers.Random.Sort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            对集合随机排序
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="array">集合</param>
        </member>
        <member name="T:KissU.Util.Helpers.Reflection">
            <summary>
            反射操作
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetDescription``1">
            <summary>
            获取类型描述，使用DescriptionAttribute设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetDescription``1(System.String)">
            <summary>
            获取类型成员描述，使用DescriptionAttribute设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetDescription(System.Type,System.String)">
            <summary>
            获取类型成员描述，使用DescriptionAttribute设置描述
            </summary>
            <param name="type">类型</param>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            获取类型成员描述，使用DescriptionAttribute设置描述
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetDisplayName``1">
            <summary>
            获取显示名称，使用DisplayNameAttribute设置显示名称
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetDisplayName(System.Reflection.MemberInfo)">
            <summary>
            获取显示名称，使用DisplayAttribute或DisplayNameAttribute设置显示名称
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetDisplayNameOrDescription``1">
            <summary>
            获取显示名称或描述,使用DisplayNameAttribute设置显示名称,使用DescriptionAttribute设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetDisplayNameOrDescription(System.Reflection.MemberInfo)">
            <summary>
            获取属性显示名称或描述,使用DisplayAttribute或DisplayNameAttribute设置显示名称,使用DescriptionAttribute设置描述
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.FindTypes``1(System.Reflection.Assembly[])">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="TFind">查找类型</typeparam>
            <param name="assemblies">待查找的程序集列表</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.FindTypes(System.Type,System.Reflection.Assembly[])">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">待查找的程序集列表</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetTypes(System.Type,System.Reflection.Assembly)">
            <summary>
            获取类型列表
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.AddType(System.Collections.Generic.List{System.Type},System.Type,System.Type)">
            <summary>
            添加类型
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.MatchGeneric(System.Type,System.Type)">
            <summary>
            泛型匹配
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetInstancesByInterface``1(System.Reflection.Assembly[])">
            <summary>
            获取实现了接口的所有实例
            </summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="assemblies">待查找的程序集列表</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="type">类型</param>
            <param name="parameters">传递给构造函数的参数</param>        
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetAssembly(System.String)">
            <summary>
            获取程序集
            </summary>
            <param name="assemblyName">程序集名称</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsBool(System.Reflection.MemberInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsBool(System.Reflection.PropertyInfo)">
            <summary>
            是否布尔类型
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsEnum(System.Reflection.MemberInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsEnum(System.Reflection.PropertyInfo)">
            <summary>
            是否枚举类型
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsDate(System.Reflection.MemberInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsDate(System.Reflection.PropertyInfo)">
            <summary>
            是否日期类型
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsInt(System.Reflection.MemberInfo)">
            <summary>
            是否整型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsInt(System.Reflection.PropertyInfo)">
            <summary>
            是否整型
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsNumber(System.Reflection.MemberInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsNumber(System.Reflection.PropertyInfo)">
            <summary>
            是否数值类型
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsCollection(System.Type)">
            <summary>
            是否集合
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.IsGenericCollection(System.Type)">
            <summary>
            是否泛型集合
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetAssemblies(System.String)">
            <summary>
            从目录中获取所有程序集
            </summary>
            <param name="directoryPath">目录绝对路径</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetPublicProperties(System.Object)">
            <summary>
            获取公共属性列表
            </summary>
            <param name="instance">实例</param>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetTopBaseType``1">
            <summary>
            获取顶级基类
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:KissU.Util.Helpers.Reflection.GetTopBaseType(System.Type)">
            <summary>
            获取顶级基类
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="T:KissU.Util.Helpers.Regex">
            <summary>
            正则操作
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Regex.GetValues(System.String,System.String,System.String[],System.Text.RegularExpressions.RegexOptions)">
            <summary>
            获取匹配值集合
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="resultPatterns">结果模式字符串数组,范例：new[]{"$1","$2"}</param>
            <param name="options">选项</param>
        </member>
        <member name="M:KissU.Util.Helpers.Regex.AddResults(System.Collections.Generic.Dictionary{System.String,System.String},System.Text.RegularExpressions.Match,System.String[])">
            <summary>
            添加匹配结果
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Regex.GetValue(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            获取匹配值
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="resultPattern">结果模式字符串,范例："$1"用来获取第一个()内的值</param>
            <param name="options">选项</param>
        </member>
        <member name="M:KissU.Util.Helpers.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            分割成字符串数组
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">选项</param>
        </member>
        <member name="M:KissU.Util.Helpers.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            替换
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="replacement">替换字符串</param>
            <param name="options">选项</param>
        </member>
        <member name="M:KissU.Util.Helpers.Regex.IsMatch(System.String,System.String)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:KissU.Util.Helpers.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">选项</param>
        </member>
        <member name="T:KissU.Util.Helpers.String">
            <summary>
            字符串操作 - 字符串生成器
            </summary>
            <summary>
            字符串操作 - 工具
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.String.#ctor">
            <summary>
            初始化字符串操作
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.String.Builder">
            <summary>
            字符串生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.String.Append``1(``0)">
            <summary>
            追加内容
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.String.Append(System.String,System.Object[])">
            <summary>
            追加内容
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
        </member>
        <member name="M:KissU.Util.Helpers.String.AppendLine">
            <summary>
            追加内容并换行
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.String.AppendLine``1(``0)">
            <summary>
            追加内容并换行
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.String.AppendLine(System.String,System.Object[])">
            <summary>
            追加内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
        </member>
        <member name="M:KissU.Util.Helpers.String.Replace(System.String)">
            <summary>
            替换内容
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.String.RemoveEnd(System.String)">
            <summary>
            移除末尾字符串
            </summary>
            <param name="end">末尾字符串</param>
        </member>
        <member name="M:KissU.Util.Helpers.String.Clear">
            <summary>
            清空字符串
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.String.Length">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.String.Empty">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.String.ToString">
            <summary>
            转换为字符串
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.String.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            将集合连接为带分隔符的字符串
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="list">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号 "'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
        </member>
        <member name="M:KissU.Util.Helpers.String.PinYin(System.String)">
            <summary>
            获取汉字的拼音简码，即首字母缩写,范例：中国,返回zg
            </summary>
            <param name="chineseText">汉字文本,范例： 中国</param>
        </member>
        <member name="M:KissU.Util.Helpers.String.ResolvePinYin(System.Char)">
            <summary>
            解析单个汉字的拼音简码
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.String.ResolveByCode(System.UInt16)">
            <summary>
            使用字符编码方式获取拼音简码
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.String.ResolveByConst(System.String)">
            <summary>
            通过拼音简码常量获取
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.String.FirstLowerCase(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.String.FirstUpperCase(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Helpers.String.RemoveEnd(System.String,System.String)">
            <summary>
            移除末尾字符串
            </summary>
            <param name="value">值</param>
            <param name="removeValue">要移除的值</param>
        </member>
        <member name="M:KissU.Util.Helpers.String.SplitWordGroup(System.String,System.Char)">
            <summary>
            分隔词组
            </summary>
            <param name="value">值</param>
            <param name="separator">分隔符，默认使用"-"分隔</param>
        </member>
        <member name="T:KissU.Util.Helpers.Thread">
            <summary>
            线程操作
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Thread.WaitAll(System.Action[])">
            <summary>
            执行多个操作，等待所有操作完成
            </summary>
            <param name="actions">操作集合</param>
        </member>
        <member name="M:KissU.Util.Helpers.Thread.ParallelExecute(System.Action[])">
            <summary>
            并发执行多个操作
            </summary>
            <param name="actions">操作集合</param>
        </member>
        <member name="M:KissU.Util.Helpers.Thread.ParallelExecute(System.Action,System.Int32,System.Threading.Tasks.ParallelOptions)">
            <summary>
            重复的并发执行操作
            </summary>
            <param name="action">操作</param>
            <param name="count">执行次数</param>
            <param name="options">并发执行配置</param>
        </member>
        <member name="T:KissU.Util.Helpers.Time">
            <summary>
            时间操作
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Time._dateTime">
            <summary>
            日期
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Time.SetTime(System.Nullable{System.DateTime})">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:KissU.Util.Helpers.Time.SetTime(System.String)">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:KissU.Util.Helpers.Time.Reset">
            <summary>
            重置时间
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Time.GetDateTime">
            <summary>
            获取当前日期时间
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Time.GetDate">
            <summary>
            获取当前日期,不带时间
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Time.GetUnixTimestamp">
            <summary>
            获取Unix时间戳
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Time.GetUnixTimestamp(System.DateTime)">
            <summary>
            获取Unix时间戳
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:KissU.Util.Helpers.Time.GetTimeFromUnixTimestamp(System.Int64)">
            <summary>
            从Unix时间戳获取时间
            </summary>
            <param name="timestamp">Unix时间戳</param>
        </member>
        <member name="T:KissU.Util.Helpers.Url">
            <summary>
            Url操作
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Url.Combine(System.String[])">
            <summary>
            合并Url
            </summary>
            <param name="urls">url片断，范例：Url.Combine( "http://a.com","b" ),返回 "http://a.com/b"</param>
        </member>
        <member name="M:KissU.Util.Helpers.Url.Join(System.String,System.String)">
            <summary>
            连接Url，范例：Url.Join( "http://a.com","b=1" ),返回 "http://a.com?b=1"
            </summary>
            <param name="url">Url，范例：http://a.com</param>
            <param name="param">参数，范例：b=1</param>
        </member>
        <member name="M:KissU.Util.Helpers.Url.GetUrl(System.String)">
            <summary>
            获取Url
            </summary>
        </member>
        <member name="T:KissU.Util.Helpers.Validation">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Validation.IsNumber(System.String)">
            <summary>
            是否数字
            </summary>
            <param name="input">输入值</param>        
        </member>
        <member name="T:KissU.Util.Helpers.Web">
            <summary>
            Web操作
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.#cctor">
            <summary>
            初始化Web操作
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.HttpContextAccessor">
            <summary>
            Http上下文访问器
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.HttpContext">
            <summary>
            当前Http上下文
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.Request">
            <summary>
            当前Http请求
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.Response">
            <summary>
            当前Http响应
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.Environment">
            <summary>
            宿主环境
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.User">
            <summary>
            当前用户安全主体
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.Identity">
            <summary>
            当前用户身份
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.AccessToken">
            <summary>
            获取访问令牌
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.Body">
            <summary>
            请求正文
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.GetBodyAsync">
            <summary>
            获取请求正文
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.Client">
            <summary>
            Web客户端，用于发送Http请求
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.Client``1">
            <summary>
            Web客户端，用于发送Http请求
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
        </member>
        <member name="P:KissU.Util.Helpers.Web.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="F:KissU.Util.Helpers.Web._ip">
            <summary>
            Ip地址
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.SetIp(System.String)">
            <summary>
            设置Ip地址
            </summary>
            <param name="ip">Ip地址</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.ResetIp">
            <summary>
            重置Ip地址
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.Ip">
            <summary>
            客户端Ip地址
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.GetLanIp">
            <summary>
            获取局域网IP
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.GetLanIp(System.Net.NetworkInformation.NetworkInterfaceType)">
            <summary>
            获取局域网IP
            </summary>
            <param name="type">网络接口类型</param>
        </member>
        <member name="P:KissU.Util.Helpers.Web.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.GetClientHostName">
            <summary>
            获取Web客户端主机名
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.GetRemoteAddress">
            <summary>
            获取远程地址
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.RootPath">
            <summary>
            根路径
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Web.WebRootPath">
            <summary>
            Web根路径，即wwwroot
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.GetFiles">
            <summary>
            获取客户端文件集合
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.GetFile">
            <summary>
            获取客户端文件
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.GetParam(System.String)">
            <summary>
            获取请求参数，搜索路径：查询参数->表单参数->请求头
            </summary>
            <param name="name">参数名</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.UrlEncode(System.String,System.Boolean)">
            <summary>
            Url编码
            </summary>
            <param name="url">url</param>
            <param name="isUpper">编码字符是否转成大写,范例,"http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.UrlEncode(System.String,System.String,System.Boolean)">
            <summary>
            Url编码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码</param>
            <param name="isUpper">编码字符是否转成大写,范例,"http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.UrlEncode(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Url编码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码</param>
            <param name="isUpper">编码字符是否转成大写,范例,"http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.GetUpperEncode(System.String)">
            <summary>
            获取大写编码字符串
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Web.UrlDecode(System.String)">
            <summary>
            Url解码
            </summary>
            <param name="url">url</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Url解码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.DownloadFileAsync(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="filePath">文件绝对路径</param>
            <param name="fileName">文件名,包含扩展名</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.DownloadFileAsync(System.String,System.String,System.Text.Encoding)">
            <summary>
            下载文件
            </summary>
            <param name="filePath">文件绝对路径</param>
            <param name="fileName">文件名,包含扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.DownloadAsync(System.IO.Stream,System.String)">
            <summary>
            下载
            </summary>
            <param name="stream">流</param>
            <param name="fileName">文件名,包含扩展名</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.DownloadAsync(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            下载
            </summary>
            <param name="stream">流</param>
            <param name="fileName">文件名,包含扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.DownloadAsync(System.Byte[],System.String)">
            <summary>
            下载
            </summary>
            <param name="bytes">字节流</param>
            <param name="fileName">文件名,包含扩展名</param>
        </member>
        <member name="M:KissU.Util.Helpers.Web.DownloadAsync(System.Byte[],System.String,System.Text.Encoding)">
            <summary>
            下载
            </summary>
            <param name="bytes">字节流</param>
            <param name="fileName">文件名,包含扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="T:KissU.Util.Helpers.Xml">
            <summary>
            Xml操作 - 生成器
            </summary>
            <summary>
            Xml操作 - 工具
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Xml.#ctor(System.String)">
            <summary>
            初始化Xml操作
            </summary>
            <param name="xml">Xml字符串</param>
        </member>
        <member name="M:KissU.Util.Helpers.Xml.GetXml(System.String)">
            <summary>
            获取Xml字符串
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Xml.Document">
            <summary>
            Xml文档
            </summary>
        </member>
        <member name="P:KissU.Util.Helpers.Xml.Root">
            <summary>
            Xml根节点
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Xml.AddNode(System.String,System.Object,System.Xml.XmlNode)">
            <summary>
            添加节点
            </summary>
            <param name="name">节点名称</param>
            <param name="value">值</param>
            <param name="parent">父节点</param>
        </member>
        <member name="M:KissU.Util.Helpers.Xml.CreateNode(System.String,System.Object,System.Xml.XmlNodeType)">
            <summary>
            创建节点
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Xml.GetParent(System.Xml.XmlNode)">
            <summary>
            获取父节点
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Xml.AddCDataNode(System.Object,System.Xml.XmlNode)">
            <summary>
            添加CDATA节点
            </summary>
            <param name="value">值</param>
            <param name="parent">父节点</param>
        </member>
        <member name="M:KissU.Util.Helpers.Xml.AddCDataNode(System.Object,System.String)">
            <summary>
            添加CDATA节点
            </summary>
            <param name="value">值</param>
            <param name="parentName">父节点名称</param>
        </member>
        <member name="M:KissU.Util.Helpers.Xml.ToString">
            <summary>
            输出Xml
            </summary>
        </member>
        <member name="M:KissU.Util.Helpers.Xml.ToDocument(System.String)">
            <summary>
            将Xml字符串转换为XDocument
            </summary>
            <param name="xml">Xml字符串</param>
        </member>
        <member name="M:KissU.Util.Helpers.Xml.ToElements(System.String)">
            <summary>
            将Xml字符串转换为XElement列表
            </summary>
            <param name="xml">Xml字符串</param>
        </member>
        <member name="T:KissU.Util.Item">
            <summary>
            列表项
            </summary>
        </member>
        <member name="M:KissU.Util.Item.#ctor(System.String,System.Object,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            初始化
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
            <param name="sortId">排序号</param>
            <param name="group">组</param>
            <param name="disabled">禁用</param>
        </member>
        <member name="P:KissU.Util.Item.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:KissU.Util.Item.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:KissU.Util.Item.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:KissU.Util.Item.Group">
            <summary>
            组
            </summary>
        </member>
        <member name="P:KissU.Util.Item.Disabled">
            <summary>
            禁用
            </summary>
        </member>
        <member name="M:KissU.Util.Item.CompareTo(KissU.Util.Item)">
            <summary>
            比较
            </summary>
            <param name="other">其它列表项</param>
        </member>
        <member name="T:KissU.Util.Locks.Default.DefaultLock">
            <summary>
            业务锁
            </summary>
        </member>
        <member name="F:KissU.Util.Locks.Default.DefaultLock._cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:KissU.Util.Locks.Default.DefaultLock._key">
            <summary>
            锁定标识
            </summary>
        </member>
        <member name="F:KissU.Util.Locks.Default.DefaultLock._expiration">
            <summary>
            延迟执行时间
            </summary>
        </member>
        <member name="M:KissU.Util.Locks.Default.DefaultLock.#ctor(KissU.Util.Caches.ICache)">
            <summary>
            初始化业务锁
            </summary>
            <param name="cache">缓存</param>
        </member>
        <member name="M:KissU.Util.Locks.Default.DefaultLock.Lock(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            锁定，成功锁定返回true，false代表之前已被锁定
            </summary>
            <param name="key">锁定标识</param>
            <param name="expiration">锁定时间间隔</param>
        </member>
        <member name="M:KissU.Util.Locks.Default.DefaultLock.UnLock">
            <summary>
            解除锁定
            </summary>
        </member>
        <member name="T:KissU.Util.Locks.Default.Extensions">
            <summary>
            业务锁扩展
            </summary>
        </member>
        <member name="M:KissU.Util.Locks.Default.Extensions.AddLock(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册业务锁
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="T:KissU.Util.Locks.ILock">
            <summary>
            业务锁
            </summary>
        </member>
        <member name="M:KissU.Util.Locks.ILock.Lock(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            锁定，成功锁定返回true，false代表之前已被锁定
            </summary>
            <param name="key">锁定标识</param>
            <param name="expiration">锁定时间间隔</param>
        </member>
        <member name="M:KissU.Util.Locks.ILock.UnLock">
            <summary>
            解除锁定
            </summary>
        </member>
        <member name="T:KissU.Util.Locks.NullLock">
            <summary>
            空业务锁
            </summary>
        </member>
        <member name="F:KissU.Util.Locks.NullLock.Instance">
            <summary>
            空业务锁
            </summary>
        </member>
        <member name="M:KissU.Util.Locks.NullLock.Lock(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            锁定，成功锁定返回true，false代表之前已被锁定
            </summary>
            <param name="key">锁定标识</param>
            <param name="expiration">锁定时间间隔</param>
        </member>
        <member name="M:KissU.Util.Locks.NullLock.UnLock">
            <summary>
            解除锁定
            </summary>
        </member>
        <member name="T:KissU.Util.Logs.Abstractions.ILogContent">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.LogName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.LogId">
            <summary>
            日志标识
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.OperationTime">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.Duration">
            <summary>
            持续时间
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.ThreadId">
            <summary>
            线程号
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.UserId">
            <summary>
            操作人编号
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContent.Exception">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="T:KissU.Util.Logs.Abstractions.ILogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContext.LogId">
            <summary>
            日志标识
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContext.Stopwatch">
            <summary>
            计时器
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContext.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContext.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContext.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogContext.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="T:KissU.Util.Logs.Abstractions.ILogFormat">
            <summary>
            日志格式器
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Abstractions.ILogFormat.Format(KissU.Util.Logs.Abstractions.ILogContent)">
            <summary>
            格式化
            </summary>
            <param name="content">日志内容</param>
        </member>
        <member name="T:KissU.Util.Logs.Abstractions.ILogProvider">
            <summary>
            日志提供程序
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogProvider.LogName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogProvider.IsDebugEnabled">
            <summary>
            调试级别是否启用
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Abstractions.ILogProvider.IsTraceEnabled">
            <summary>
            跟踪级别是否启用
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Abstractions.ILogProvider.WriteLog(Microsoft.Extensions.Logging.LogLevel,KissU.Util.Logs.Abstractions.ILogContent)">
            <summary>
            写日志
            </summary>
            <param name="level">日志等级</param>
            <param name="content">日志内容</param>
        </member>
        <member name="T:KissU.Util.Logs.Abstractions.ILogProviderFactory">
            <summary>
            日志提供程序工厂
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Abstractions.ILogProviderFactory.Create(System.String,KissU.Util.Logs.Abstractions.ILogFormat)">
            <summary>
            创建日志提供程序
            </summary>
            <param name="logName">日志名称</param>
            <param name="format">日志格式化器</param>
        </member>
        <member name="T:KissU.Util.Logs.Core.LogBase`1">
            <summary>
            日志操作
            </summary>
            <typeparam name="TContent">日志内容类型</typeparam>
        </member>
        <member name="F:KissU.Util.Logs.Core.LogBase`1._content">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogBase`1.LogContent">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.#ctor(KissU.Util.Logs.Abstractions.ILogProvider,KissU.Util.Logs.Abstractions.ILogContext,KissU.Util.Sessions.ISession)">
            <summary>
            初始化日志操作
            </summary>
            <param name="provider">日志提供程序</param>
            <param name="context">日志上下文</param>
            <param name="session">用户会话</param>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogBase`1.Provider">
            <summary>
            日志提供程序
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogBase`1.Context">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogBase`1.Session">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.GetContent">
            <summary>
            获取日志内容
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Set``1(System.Action{``0})">
            <summary>
            设置内容
            </summary>
            <param name="action">设置内容操作</param>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Init(`0)">
            <summary>
            初始化
            </summary>
            <param name="content">日志内容</param>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogBase`1.IsDebugEnabled">
            <summary>
            调试级别是否启用
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogBase`1.IsTraceEnabled">
            <summary>
            跟踪级别是否启用
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Execute(Microsoft.Extensions.Logging.LogLevel,`0@)">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Enabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Trace(System.String)">
            <summary>
            跟踪
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Debug(System.String)">
            <summary>
            调试
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Info(System.String)">
            <summary>
            信息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Warn(System.String)">
            <summary>
            警告
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Error(System.String)">
            <summary>
            错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogBase`1.Fatal(System.String)">
            <summary>
            致命错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="T:KissU.Util.Logs.Core.LogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="F:KissU.Util.Logs.Core.LogContext._info">
            <summary>
            日志上下文信息
            </summary>
        </member>
        <member name="F:KissU.Util.Logs.Core.LogContext._orderId">
            <summary>
            序号
            </summary>
        </member>
        <member name="F:KissU.Util.Logs.Core.LogContext._context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogContext.#ctor">
            <summary>
            初始化日志上下文
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogContext.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogContext.LogId">
            <summary>
            日志标识
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogContext.Stopwatch">
            <summary>
            计时器
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogContext.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogContext.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogContext.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.LogContext.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogContext.GetInfo">
            <summary>
            获取日志上下文信息
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogContext.CreateInfo">
            <summary>
            创建日志上下文信息
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogContext.GetTraceId">
            <summary>
            获取跟踪号
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.LogContext.GetStopwatch">
            <summary>
            获取计时器
            </summary>
        </member>
        <member name="T:KissU.Util.Logs.Core.NullLog">
            <summary>
            空日志操作
            </summary>
        </member>
        <member name="F:KissU.Util.Logs.Core.NullLog.Instance">
            <summary>
            空日志操作实例
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Set``1(System.Action{``0})">
            <summary>
            设置内容
            </summary>
            <typeparam name="TContent">日志内容类型</typeparam>
            <param name="action">设置内容操作</param>
        </member>
        <member name="P:KissU.Util.Logs.Core.NullLog.IsDebugEnabled">
            <summary>
            调试级别是否启用
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.NullLog.IsTraceEnabled">
            <summary>
            跟踪级别是否启用
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Trace(System.String)">
            <summary>
            跟踪
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Debug(System.String)">
            <summary>
            调试
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Info(System.String)">
            <summary>
            信息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Warn(System.String)">
            <summary>
            警告
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Error(System.String)">
            <summary>
            错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLog.Fatal(System.String)">
            <summary>
            致命错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="T:KissU.Util.Logs.Core.NullLogContext">
            <summary>
            空日志上下文
            </summary>
        </member>
        <member name="F:KissU.Util.Logs.Core.NullLogContext.Instance">
            <summary>
            空日志上下文实例
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.NullLogContext.LogId">
            <summary>
            日志标识
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.NullLogContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.NullLogContext.Stopwatch">
            <summary>
            计时器
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.NullLogContext.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.NullLogContext.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.NullLogContext.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.NullLogContext.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Core.NullLogContext.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLogContext.UpdateContext">
            <summary>
            更新上下文
            </summary>
        </member>
        <member name="T:KissU.Util.Logs.Core.NullLogFormat">
            <summary>
            空日志格式器
            </summary>
        </member>
        <member name="F:KissU.Util.Logs.Core.NullLogFormat.Instance">
            <summary>
            空日志格式器实例
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Core.NullLogFormat.Format(KissU.Util.Logs.Abstractions.ILogContent)">
            <summary>
            格式化
            </summary>
            <param name="content">日志内容</param>
        </member>
        <member name="T:KissU.Util.Logs.Extensions.Extensions">
            <summary>
            日志扩展
            </summary>
            <summary>
            日志扩展
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Extensions.Extensions.Content(KissU.Util.Logs.ILog)">
            <summary>
            设置内容
            </summary>
            <param name="log">日志操作</param>
        </member>
        <member name="M:KissU.Util.Logs.Extensions.Extensions.Content(KissU.Util.Logs.ILog,System.String)">
            <summary>
            设置内容
            </summary>
            <param name="log">日志操作</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Logs.Extensions.Extensions.Content(KissU.Util.Logs.ILog,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置内容
            </summary>
            <param name="log">日志操作</param>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:KissU.Util.Logs.Extensions.Extensions.Content(KissU.Util.Logs.ILog,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            设置内容
            </summary>
            <param name="log">日志操作</param>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:KissU.Util.Logs.Extensions.Extensions.Append(KissU.Util.Logs.Abstractions.ILogContent,System.Text.StringBuilder,System.String)">
            <summary>
            追加内容
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Extensions.Extensions.AppendLine(KissU.Util.Logs.Abstractions.ILogContent,System.Text.StringBuilder,System.String)">
            <summary>
            追加内容并换行
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.Extensions.Extensions.Content(KissU.Util.Logs.Abstractions.ILogContent,System.String)">
            <summary>
            设置内容并换行
            </summary>
            <param name="content">日志内容</param>
            <param name="value">值</param>
        </member>
        <member name="T:KissU.Util.Logs.ILog">
            <summary>
            日志操作
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Set``1(System.Action{``0})">
            <summary>
            设置内容
            </summary>
            <typeparam name="TContent">日志内容类型</typeparam>
            <param name="action">设置内容操作</param>
        </member>
        <member name="P:KissU.Util.Logs.ILog.IsDebugEnabled">
            <summary>
            调试级别是否启用
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.ILog.IsTraceEnabled">
            <summary>
            跟踪级别是否启用
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Trace">
            <summary>
            跟踪
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Trace(System.String)">
            <summary>
            跟踪
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Debug(System.String)">
            <summary>
            调试
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Info(System.String)">
            <summary>
            信息
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Warn(System.String)">
            <summary>
            警告
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Error(System.String)">
            <summary>
            错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:KissU.Util.Logs.ILog.Fatal(System.String)">
            <summary>
            致命错误
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="T:KissU.Util.Logs.Internal.LogContextInfo">
            <summary>
            日志上下文信息
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Internal.LogContextInfo.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Internal.LogContextInfo.Stopwatch">
            <summary>
            计时器
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Internal.LogContextInfo.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Internal.LogContextInfo.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Internal.LogContextInfo.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:KissU.Util.Logs.Internal.LogContextInfo.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="T:KissU.Util.Maps.Extensions">
            <summary>
            对象映射
            </summary>
        </member>
        <member name="F:KissU.Util.Maps.Extensions.Sync">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:KissU.Util.Maps.Extensions._config">
            <summary>
            配置提供器
            </summary>
        </member>
        <member name="M:KissU.Util.Maps.Extensions.MapTo``2(``0,``1)">
            <summary>
            将源对象映射到目标对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="destination">目标对象</param>
        </member>
        <member name="M:KissU.Util.Maps.Extensions.MapTo``1(System.Object)">
            <summary>
            将源对象映射到目标对象
            </summary>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="source">源对象</param>
        </member>
        <member name="M:KissU.Util.Maps.Extensions.MapTo``1(System.Object,``0)">
            <summary>
            将源对象映射到目标对象
            </summary>
        </member>
        <member name="M:KissU.Util.Maps.Extensions.GetType(System.Object)">
            <summary>
            获取类型
            </summary>
        </member>
        <member name="M:KissU.Util.Maps.Extensions.Exists(System.Type,System.Type)">
            <summary>
            是否已存在映射配置
            </summary>
        </member>
        <member name="M:KissU.Util.Maps.Extensions.Init(System.Type,System.Type)">
            <summary>
            初始化映射配置
            </summary>
        </member>
        <member name="M:KissU.Util.Maps.Extensions.GetResult``1(System.Object,``0)">
            <summary>
            获取映射结果
            </summary>
        </member>
        <member name="M:KissU.Util.Maps.Extensions.MapToList``1(System.Collections.IEnumerable)">
            <summary>
            将源集合映射到目标集合
            </summary>
            <typeparam name="TDestination">目标元素类型,范例：Sample,不要加List</typeparam>
            <param name="source">源集合</param>
        </member>
        <member name="T:KissU.Util.Parameters.Formats.IParameterFormat">
            <summary>
            参数格式化器
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.Formats.IParameterFormat.Format(System.String,System.Object)">
            <summary>
            格式化
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Parameters.Formats.IParameterFormat.Join(System.String,System.String)">
            <summary>
            连接参数
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="T:KissU.Util.Parameters.Formats.ParameterFormatBase">
            <summary>
            参数格式化器
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.Formats.ParameterFormatBase.Format(System.String,System.Object)">
            <summary>
            格式化
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="P:KissU.Util.Parameters.Formats.ParameterFormatBase.FormatSeparator">
            <summary>
            格式化分割符
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.Formats.ParameterFormatBase.Join(System.String,System.String)">
            <summary>
            连接参数
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="P:KissU.Util.Parameters.Formats.ParameterFormatBase.JoinSeparator">
            <summary>
            连接符
            </summary>
        </member>
        <member name="T:KissU.Util.Parameters.Formats.UrlParameterFormat">
            <summary>
            Url参数格式化器
            </summary>
        </member>
        <member name="F:KissU.Util.Parameters.Formats.UrlParameterFormat.Instance">
            <summary>
            Url参数格式化器实例
            </summary>
        </member>
        <member name="P:KissU.Util.Parameters.Formats.UrlParameterFormat.FormatSeparator">
            <summary>
            格式化分割符
            </summary>
        </member>
        <member name="P:KissU.Util.Parameters.Formats.UrlParameterFormat.JoinSeparator">
            <summary>
            连接符
            </summary>
        </member>
        <member name="T:KissU.Util.Parameters.IParameterManager">
            <summary>
            参数服务
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.IParameterManager.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">参数名</param>
        </member>
        <member name="T:KissU.Util.Parameters.ParameterBuilder">
            <summary>
            参数生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Parameters.ParameterBuilder._params">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.#ctor">
            <summary>
            初始化参数生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.#ctor(KissU.Util.Parameters.ParameterBuilder)">
            <summary>
            初始化参数生成器
            </summary>
            <param name="builder">参数生成器</param>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            初始化参数生成器
            </summary>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.Add(System.String,System.Object)">
            <summary>
            添加参数，如果参数已存在则替换
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.GetValue(System.Object)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.GetDictionary(System.Boolean,System.Boolean,System.String)">
            <summary>
            获取字典
            </summary>
            <param name="isSort">是否按参数名排序</param>
            <param name="isUrlEncode">是否Url编码</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.GetEncodeValue(System.Object,System.Boolean,System.String)">
            <summary>
            获取编码的值
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.GetKeyValuePairs">
            <summary>
            获取键值对集合
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.Remove(System.String)">
            <summary>
            移除参数
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.ToJson(System.Boolean)">
            <summary>
            转换为Json
            </summary>
            <param name="isConvertToSingleQuotes">是否将双引号转成单引号</param>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.Result(KissU.Util.Parameters.Formats.IParameterFormat,System.Boolean,System.Boolean,System.String)">
            <summary>
            获取结果
            </summary>
            <param name="format">参数格式化器</param>
            <param name="isSort">是否按参数名排序</param>
            <param name="isUrlEncode">是否Url编码</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
        </member>
        <member name="M:KissU.Util.Parameters.ParameterBuilder.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">参数名</param>
        </member>
        <member name="P:KissU.Util.Parameters.ParameterBuilder.Item(System.String)">
            <summary>
            索引器
            </summary>
            <param name="name">参数名</param>
        </member>
        <member name="P:KissU.Util.Parameters.ParameterBuilder.IsEmpty">
            <summary>
            是否空参数
            </summary>
        </member>
        <member name="T:KissU.Util.Parameters.UrlParameterBuilder">
            <summary>
            Url参数生成器
            </summary>
        </member>
        <member name="P:KissU.Util.Parameters.UrlParameterBuilder.ParameterBuilder">
            <summary>
            参数生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.#ctor">
            <summary>
            初始化Url参数生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.#ctor(KissU.Util.Parameters.ParameterBuilder)">
            <summary>
            初始化Url参数生成器
            </summary>
            <param name="builder">参数生成器</param>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.#ctor(KissU.Util.Parameters.UrlParameterBuilder)">
            <summary>
            初始化Url参数生成器
            </summary>
            <param name="builder">Url参数生成器</param>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.#ctor(System.String,KissU.Util.Parameters.UrlParameterBuilder)">
            <summary>
            初始化Url参数生成器
            </summary>
            <param name="url">Url</param>
            <param name="builder">Url参数生成器</param>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.LoadUrl(System.String)">
            <summary>
            加载Url
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.LoadForm">
            <summary>
            从Request加载表单参数
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.LoadQuery">
            <summary>
            从Request加载查询参数
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.Add(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">参数名</param>
        </member>
        <member name="P:KissU.Util.Parameters.UrlParameterBuilder.Item(System.String)">
            <summary>
            索引器
            </summary>
            <param name="name">参数名</param>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.GetDictionary(System.Boolean,System.Boolean,System.String)">
            <summary>
            获取字典
            </summary>
            <param name="isSort">是否按参数名排序</param>
            <param name="isUrlEncode">是否Url编码</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.GetKeyValuePairs">
            <summary>
            获取键值对集合
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.Result(System.Boolean,System.Boolean,System.String)">
            <summary>
            获取结果，格式：参数名=参数值&amp;参数名=参数值
            </summary>
            <param name="isSort">是否按参数名排序</param>
            <param name="isUrlEncode">是否Url编码</param>
            <param name="encoding">字符编码，默认值：UTF-8</param>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.JoinUrl(System.String)">
            <summary>
            连接Url
            </summary>
            <param name="url">地址</param>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:KissU.Util.Parameters.UrlParameterBuilder.Remove(System.String)">
            <summary>
            移除参数
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:KissU.Util.Properties.LibraryResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.LibraryResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.LibraryResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.LibraryResource.ConcurrencyExceptionMessage">
            <summary>
              查找类似 当前操作的数据已被其他人修改，请刷新后重试 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.LibraryResource.InvalidIdCard">
            <summary>
              查找类似 身份证不正确 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.LibraryResource.InvalidMobilePhone">
            <summary>
              查找类似 手机号不正确 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.LibraryResource.NotSupportMoveToChildren">
            <summary>
              查找类似 不允许将节点移动到自己或子节点下 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.LibraryResource.OnlyOnePredicate">
            <summary>
              查找类似 仅允许添加一个条件,条件：{0} 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.LibraryResource.OrderIsEmptyForPage">
            <summary>
              查找类似 分页必须设置排序字段 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.LibraryResource.TableIsEmpty">
            <summary>
              查找类似 必须设置表名 的本地化字符串。
            </summary>
        </member>
        <member name="T:KissU.Util.Properties.R">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.DeleteSuccess">
            <summary>
              查找类似 删除成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.GlobalDuplicateRequest">
            <summary>
              查找类似 其他用户正在执行该操作,请稍后再试 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.IdIsEmpty">
            <summary>
              查找类似 Id不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.LineNumber">
            <summary>
              查找类似 序号 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.No">
            <summary>
              查找类似 否 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.Success">
            <summary>
              查找类似 操作成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.SystemError">
            <summary>
              查找类似 系统忙，请稍后再试 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.Upload">
            <summary>
              查找类似 上传 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.UserDuplicateRequest">
            <summary>
              查找类似 请不要重复提交 的本地化字符串。
            </summary>
        </member>
        <member name="P:KissU.Util.Properties.R.Yes">
            <summary>
              查找类似 是 的本地化字符串。
            </summary>
        </member>
        <member name="T:KissU.Util.Randoms.GuidRandomGenerator">
            <summary>
            Guid随机数生成器，每次创建一个新的Guid字符串，去掉了Guid的分隔符
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.GuidRandomGenerator.Generate">
            <summary>
            生成随机数
            </summary>
        </member>
        <member name="F:KissU.Util.Randoms.GuidRandomGenerator.Instance">
            <summary>
            Guid随机数生成器实例
            </summary>
        </member>
        <member name="T:KissU.Util.Randoms.IRandomBuilder">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.IRandomBuilder.GenerateString(System.Int32,System.String)">
            <summary>
            生成随机字符串
            </summary>
            <param name="maxLength">最大长度</param>
            <param name="text">如果传入该参数，则从该文本中随机抽取</param>
        </member>
        <member name="M:KissU.Util.Randoms.IRandomBuilder.GenerateLetters(System.Int32)">
            <summary>
            生成随机字母
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:KissU.Util.Randoms.IRandomBuilder.GenerateChinese(System.Int32)">
            <summary>
            生成随机汉字
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:KissU.Util.Randoms.IRandomBuilder.GenerateNumbers(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:KissU.Util.Randoms.IRandomBuilder.GenerateBool">
            <summary>
            生成随机布尔值
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.IRandomBuilder.GenerateInt(System.Int32)">
            <summary>
            生成随机整数
            </summary>
            <param name="maxValue">最大值</param>
        </member>
        <member name="M:KissU.Util.Randoms.IRandomBuilder.GenerateDate(System.Int32,System.Int32)">
            <summary>
            生成随机日期
            </summary>
            <param name="beginYear">起始年份</param>
            <param name="endYear">结束年份</param>
        </member>
        <member name="M:KissU.Util.Randoms.IRandomBuilder.GenerateEnum``1">
            <summary>
            生成随机枚举
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="T:KissU.Util.Randoms.IRandomGenerator">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.IRandomGenerator.Generate">
            <summary>
            生成随机数
            </summary>
        </member>
        <member name="T:KissU.Util.Randoms.IRandomNumberGenerator">
            <summary>
            随机数字生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.IRandomNumberGenerator.Generate(System.Int32,System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="T:KissU.Util.Randoms.RandomBuilder">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.RandomBuilder.#ctor(KissU.Util.Randoms.IRandomNumberGenerator)">
            <summary>
            初始化随机数生成器
            </summary>
            <param name="generator">随机数字生成器</param>
        </member>
        <member name="F:KissU.Util.Randoms.RandomBuilder._random">
            <summary>
            随机数字生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.RandomBuilder.GenerateString(System.Int32,System.String)">
            <summary>
            生成随机字符串
            </summary>
            <param name="maxLength">最大长度</param>
            <param name="text">如果传入该参数，则从该文本中随机抽取</param>
        </member>
        <member name="M:KissU.Util.Randoms.RandomBuilder.GetRandomLength(System.Int32)">
            <summary>
            获取随机长度
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.RandomBuilder.GetRandomChar(System.String)">
            <summary>
            获取随机字符
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.RandomBuilder.GenerateLetters(System.Int32)">
            <summary>
            生成随机字母
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:KissU.Util.Randoms.RandomBuilder.GenerateChinese(System.Int32)">
            <summary>
            生成随机汉字
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:KissU.Util.Randoms.RandomBuilder.GenerateNumbers(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:KissU.Util.Randoms.RandomBuilder.GenerateBool">
            <summary>
            生成随机布尔值
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.RandomBuilder.GenerateInt(System.Int32)">
            <summary>
            生成随机整数
            </summary>
            <param name="maxValue">最大值</param>
        </member>
        <member name="M:KissU.Util.Randoms.RandomBuilder.GenerateDate(System.Int32,System.Int32)">
            <summary>
            生成随机日期
            </summary>
            <param name="beginYear">起始年份</param>
            <param name="endYear">结束年份</param>
        </member>
        <member name="M:KissU.Util.Randoms.RandomBuilder.GenerateEnum``1">
            <summary>
            生成随机枚举
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="T:KissU.Util.Randoms.RandomNumberGenerator">
            <summary>
            随机数字生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Randoms.RandomNumberGenerator._random">
            <summary>
            随机数
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.RandomNumberGenerator.#ctor">
            <summary>
            初始化随机数字生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.RandomNumberGenerator.Generate(System.Int32,System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="T:KissU.Util.Randoms.StubRandomGenerator">
            <summary>
            伪随机数生成器，用于单元测试，固定返回字符串"random"
            </summary>
        </member>
        <member name="M:KissU.Util.Randoms.StubRandomGenerator.Generate">
            <summary>
            生成随机数
            </summary>
        </member>
        <member name="T:KissU.Util.Reflections.Finder">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="F:KissU.Util.Reflections.Finder.SkipAssemblies">
            <summary>
            跳过的程序集
            </summary>
        </member>
        <member name="M:KissU.Util.Reflections.Finder.GetAssemblies">
            <summary>
            获取程序集列表
            </summary>
        </member>
        <member name="M:KissU.Util.Reflections.Finder.LoadAssemblies(System.String)">
            <summary>
            加载程序集到当前应用程序域
            </summary>
            <param name="path">目录绝对路径</param>
        </member>
        <member name="M:KissU.Util.Reflections.Finder.Match(System.String)">
            <summary>
            程序集是否匹配
            </summary>
        </member>
        <member name="M:KissU.Util.Reflections.Finder.LoadAssemblyToAppDomain(System.String)">
            <summary>
            将程序集添加当前应用程序域
            </summary>
        </member>
        <member name="M:KissU.Util.Reflections.Finder.GetAssembliesFromCurrentAppDomain">
            <summary>
            从当前应用程序域获取程序集列表
            </summary>
        </member>
        <member name="M:KissU.Util.Reflections.Finder.Match(System.Reflection.Assembly)">
            <summary>
            程序集是否匹配
            </summary>
        </member>
        <member name="M:KissU.Util.Reflections.Finder.Find``1(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="T">查找类型</typeparam>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:KissU.Util.Reflections.Finder.Find(System.Type,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="T:KissU.Util.Reflections.IFind">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="M:KissU.Util.Reflections.IFind.GetAssemblies">
            <summary>
            获取程序集列表
            </summary>
        </member>
        <member name="M:KissU.Util.Reflections.IFind.Find``1(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="T">查找类型</typeparam>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:KissU.Util.Reflections.IFind.Find(System.Type,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="T:KissU.Util.Schedulers.IJob">
            <summary>
            作业
            </summary>
        </member>
        <member name="T:KissU.Util.Schedulers.IScheduler">
            <summary>
            调度器
            </summary>
        </member>
        <member name="M:KissU.Util.Schedulers.IScheduler.StartAsync">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:KissU.Util.Schedulers.IScheduler.PauseAsync">
            <summary>
            暂停
            </summary>
        </member>
        <member name="M:KissU.Util.Schedulers.IScheduler.ResumeAsync">
            <summary>
            恢复
            </summary>
        </member>
        <member name="M:KissU.Util.Schedulers.IScheduler.StopAsync">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:KissU.Util.Schedulers.IScheduler.AddJobAsync``1">
            <summary>
            添加作业
            </summary>
            <typeparam name="TJob">作业类型</typeparam>
        </member>
        <member name="M:KissU.Util.Schedulers.IScheduler.ScanJobsAsync(System.Reflection.Assembly[])">
            <summary>
            扫描并添加作业
            </summary>
            <param name="assemblies">程序集列表</param>
        </member>
        <member name="T:KissU.Util.Security.Encryptors.IEncryptor">
            <summary>
            加密器
            </summary>
        </member>
        <member name="M:KissU.Util.Security.Encryptors.IEncryptor.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="data">原始数据</param>
        </member>
        <member name="M:KissU.Util.Security.Encryptors.IEncryptor.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="data">已加密数据</param>
        </member>
        <member name="T:KissU.Util.Security.Encryptors.NullEncryptor">
            <summary>
            空加密器
            </summary>
        </member>
        <member name="F:KissU.Util.Security.Encryptors.NullEncryptor.Instance">
            <summary>
            空加密器实例
            </summary>
        </member>
        <member name="M:KissU.Util.Security.Encryptors.NullEncryptor.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="data">原始数据</param>
        </member>
        <member name="M:KissU.Util.Security.Encryptors.NullEncryptor.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="data">已加密数据</param>
        </member>
        <member name="T:KissU.Util.Security.Principals.UnauthenticatedIdentity">
            <summary>
            未认证的身份标识
            </summary>
        </member>
        <member name="P:KissU.Util.Security.Principals.UnauthenticatedIdentity.IsAuthenticated">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="F:KissU.Util.Security.Principals.UnauthenticatedIdentity.Instance">
            <summary>
            未认证的身份标识实例
            </summary>
        </member>
        <member name="T:KissU.Util.Security.Principals.UnauthenticatedPrincipal">
            <summary>
            未认证安全主体
            </summary>
        </member>
        <member name="M:KissU.Util.Security.Principals.UnauthenticatedPrincipal.#ctor">
            <summary>
            初始化未认证安全主体
            </summary>
        </member>
        <member name="F:KissU.Util.Security.Principals.UnauthenticatedPrincipal.Instance">
            <summary>
            未认证安全主体
            </summary>
        </member>
        <member name="P:KissU.Util.Security.Principals.UnauthenticatedPrincipal.Identity">
            <summary>
            身份标识
            </summary>
        </member>
        <member name="T:KissU.Util.Sessions.ISession">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="P:KissU.Util.Sessions.ISession.IsAuthenticated">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="P:KissU.Util.Sessions.ISession.UserId">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="T:KissU.Util.Sessions.NullSession">
            <summary>
            空用户会话
            </summary>
        </member>
        <member name="P:KissU.Util.Sessions.NullSession.IsAuthenticated">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="P:KissU.Util.Sessions.NullSession.UserId">
            <summary>
            用户编号
            </summary>
        </member>
        <member name="F:KissU.Util.Sessions.NullSession.Instance">
            <summary>
            空用户会话实例
            </summary>
        </member>
        <member name="T:KissU.Util.Sessions.Session">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="F:KissU.Util.Sessions.Session.Null">
            <summary>
            空用户会话
            </summary>
        </member>
        <member name="F:KissU.Util.Sessions.Session.Instance">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="P:KissU.Util.Sessions.Session.IsAuthenticated">
            <summary>
            是否认证
            </summary>
        </member>
        <member name="P:KissU.Util.Sessions.Session.UserId">
            <summary>
            用户标识
            </summary>
        </member>
        <member name="T:KissU.Util.Signatures.ISignKey">
            <summary>
            签名密钥
            </summary>
        </member>
        <member name="M:KissU.Util.Signatures.ISignKey.GetKey">
            <summary>
            获取私钥
            </summary>
        </member>
        <member name="M:KissU.Util.Signatures.ISignKey.GetPublicKey">
            <summary>
            获取公钥
            </summary>
        </member>
        <member name="T:KissU.Util.Signatures.ISignManager">
            <summary>
            签名服务
            </summary>
        </member>
        <member name="M:KissU.Util.Signatures.ISignManager.Add(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Signatures.ISignManager.Sign">
            <summary>
            签名
            </summary>
        </member>
        <member name="M:KissU.Util.Signatures.ISignManager.Verify(System.String)">
            <summary>
            验证签名
            </summary>
            <param name="sign">签名</param>
        </member>
        <member name="T:KissU.Util.Signatures.SignKey">
            <summary>
            签名密钥
            </summary>
        </member>
        <member name="F:KissU.Util.Signatures.SignKey._key">
            <summary>
            私钥
            </summary>
        </member>
        <member name="F:KissU.Util.Signatures.SignKey._publicKey">
            <summary>
            公钥
            </summary>
        </member>
        <member name="M:KissU.Util.Signatures.SignKey.#ctor(System.String,System.String)">
            <summary>
            初始化签名密钥
            </summary>
            <param name="key">私钥</param>
            <param name="publicKey">公钥</param>
        </member>
        <member name="M:KissU.Util.Signatures.SignKey.GetKey">
            <summary>
            获取私钥
            </summary>
        </member>
        <member name="M:KissU.Util.Signatures.SignKey.GetPublicKey">
            <summary>
            获取公钥
            </summary>
        </member>
        <member name="T:KissU.Util.Signatures.SignManager">
            <summary>
            签名服务
            </summary>
        </member>
        <member name="F:KissU.Util.Signatures.SignManager._key">
            <summary>
            签名密钥
            </summary>
        </member>
        <member name="F:KissU.Util.Signatures.SignManager._builder">
            <summary>
            Url参数生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Signatures.SignManager.#ctor(KissU.Util.Signatures.ISignKey,KissU.Util.Parameters.UrlParameterBuilder)">
            <summary>
            初始化签名服务
            </summary>
            <param name="key">签名密钥</param>
            <param name="builder">Url参数生成器</param>
        </member>
        <member name="M:KissU.Util.Signatures.SignManager.Add(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Signatures.SignManager.Sign">
            <summary>
            签名
            </summary>
        </member>
        <member name="M:KissU.Util.Signatures.SignManager.Verify(System.String)">
            <summary>
            验证签名
            </summary>
            <param name="sign">签名</param>
        </member>
        <member name="T:KissU.Util.Ui.Attributes.ModelAttribute">
            <summary>
            模型绑定
            </summary>
        </member>
        <member name="M:KissU.Util.Ui.Attributes.ModelAttribute.#ctor(System.String)">
            <summary>
            初始化模型绑定
            </summary>
            <param name="model">模型</param>
        </member>
        <member name="P:KissU.Util.Ui.Attributes.ModelAttribute.Model">
            <summary>
            模型
            </summary>
        </member>
        <member name="P:KissU.Util.Ui.Attributes.ModelAttribute.Ignore">
            <summary>
            忽略模型绑定，设置为true则不设置模型绑定
            </summary>
        </member>
        <member name="T:KissU.Util.Validations.Aspects.ValidAttribute">
            <summary>
            验证拦截器
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.Aspects.ValidAttribute.Invoke(AspectCore.DynamicProxy.Parameters.ParameterAspectContext,AspectCore.DynamicProxy.Parameters.ParameterAspectDelegate)">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.Aspects.ValidAttribute.Validate(AspectCore.DynamicProxy.Parameters.Parameter)">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.Aspects.ValidAttribute.ValidateCollection(AspectCore.DynamicProxy.Parameters.Parameter)">
            <summary>
            验证集合
            </summary>
        </member>
        <member name="T:KissU.Util.Validations.DataAnnotationValidation">
            <summary>
            DataAnnotations验证操作
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.DataAnnotationValidation.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">验证目标</param>
        </member>
        <member name="T:KissU.Util.Validations.IValidation">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.IValidation.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:KissU.Util.Validations.IValidationHandler">
            <summary>
            验证处理器
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.IValidationHandler.Handle(KissU.Util.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:KissU.Util.Validations.IValidationRule">
            <summary>
            验证规则
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.IValidationRule.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:KissU.Util.Validations.NothingHandler">
            <summary>
            验证失败，不做任何处理
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.NothingHandler.Handle(KissU.Util.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:KissU.Util.Validations.ThrowHandler">
            <summary>
            验证失败，抛出异常 - 默认验证处理器
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.ThrowHandler.Handle(KissU.Util.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:KissU.Util.Validations.ValidationResultCollection">
            <summary>
            验证结果集合
            </summary>
        </member>
        <member name="F:KissU.Util.Validations.ValidationResultCollection._results">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.ValidationResultCollection.#ctor">
            <summary>
            初始化验证结果集合
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.ValidationResultCollection.#ctor(System.String)">
            <summary>
            初始化验证结果集合
            </summary>
            <param name="result">验证结果</param>
        </member>
        <member name="F:KissU.Util.Validations.ValidationResultCollection.Success">
            <summary>
            成功验证结果集合
            </summary>
        </member>
        <member name="P:KissU.Util.Validations.ValidationResultCollection.IsValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:KissU.Util.Validations.ValidationResultCollection.Count">
            <summary>
            验证结果个数
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.ValidationResultCollection.Add(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            添加验证结果
            </summary>
            <param name="result">验证结果</param>
        </member>
        <member name="M:KissU.Util.Validations.ValidationResultCollection.AddList(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            添加验证结果集合
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:KissU.Util.Validations.ValidationResultCollection.System#Collections#Generic#IEnumerable{System#ComponentModel#DataAnnotations#ValidationResult}#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.ValidationResultCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.ValidationResultCollection.ToString">
            <summary>
            输出验证消息
            </summary>
        </member>
        <member name="T:KissU.Util.Validations.Validators.IdCardAttribute">
            <summary>
            身份证验证
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.Validators.IdCardAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:KissU.Util.Validations.Validators.IdCardAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="T:KissU.Util.Validations.Validators.ValidatePattern">
            <summary>
            验证正则
            </summary>
        </member>
        <member name="F:KissU.Util.Validations.Validators.ValidatePattern.MobilePhonePattern">
            <summary>
            手机号验证正则表达式
            </summary>
        </member>
        <member name="F:KissU.Util.Validations.Validators.ValidatePattern.IdCardPattern">
            <summary>
            身份证验证正则表达式
            </summary>
        </member>
        <member name="T:KissU.Util.Views.ViewModelBase">
            <summary>
            视图模型
            </summary>
        </member>
        <member name="M:KissU.Util.Views.ViewModelBase.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:KissU.Util.Webs.Clients.HttpContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpContentType.FormUrlEncoded">
            <summary>
            application/x-www-form-urlencoded
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpContentType.Json">
            <summary>
            application/json
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpContentType.Xml">
            <summary>
            text/xml
            </summary>
        </member>
        <member name="T:KissU.Util.Webs.Clients.HttpRequest">
            <summary>
            Http请求
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequest._successAction">
            <summary>
            执行成功的回调函数
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequest._successStatusCodeAction">
            <summary>
            执行成功的回调函数
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequest.#ctor(System.Net.Http.HttpMethod,System.String)">
            <summary>
            初始化Http请求
            </summary>
            <param name="httpMethod">Http动词</param>
            <param name="url">地址</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequest.OnSuccess(System.Action{System.String})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数,参数为响应结果</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequest.OnSuccess(System.Action{System.String,System.Net.HttpStatusCode})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数,第一个参数为响应结果，第二个参数为状态码</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequest.SuccessHandler(System.String,System.Net.HttpStatusCode,System.String)">
            <summary>
            成功处理操作
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequest.ResultFromJsonAsync``1">
            <summary>
            获取Json结果
            </summary>
        </member>
        <member name="T:KissU.Util.Webs.Clients.HttpRequest`1">
            <summary>
            Http请求
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequest`1._successAction">
            <summary>
            执行成功的回调函数
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequest`1._successStatusCodeAction">
            <summary>
            执行成功的回调函数
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequest`1._convertAction">
            <summary>
            执行成功的转换函数
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequest`1.#ctor(System.Net.Http.HttpMethod,System.String)">
            <summary>
            初始化Http请求
            </summary>
            <param name="httpMethod">Http动词</param>
            <param name="url">地址</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequest`1.OnSuccess(System.Action{`0},System.Func{System.String,`0})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数,参数为响应结果</param>
            <param name="convertAction">将结果字符串转换为指定类型，当默认转换实现无法转换时使用</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequest`1.OnSuccess(System.Action{`0,System.Net.HttpStatusCode},System.Func{System.String,`0})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数,第一个参数为响应结果，第二个参数为状态码</param>
            <param name="convertAction">将结果字符串转换为指定类型，当默认转换实现无法转换时使用</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequest`1.SuccessHandler(System.String,System.Net.HttpStatusCode,System.String)">
            <summary>
            成功处理操作
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequest`1.ConvertTo(System.String,System.String)">
            <summary>
            将结果字符串转换为指定类型
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequest`1.ResultFromJsonAsync">
            <summary>
            获取Json结果
            </summary>
        </member>
        <member name="T:KissU.Util.Webs.Clients.HttpRequestBase`1">
            <summary>
            Http请求
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._url">
            <summary>
            地址
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._httpMethod">
            <summary>
            Http动词
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._params">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._data">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._encoding">
            <summary>
            字符编码
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._contentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._cookieContainer">
            <summary>
            Cookie容器
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._headers">
            <summary>
            请求头集合
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._failAction">
            <summary>
            执行失败的回调函数
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._failStatusCodeAction">
            <summary>
            执行失败的回调函数
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._serverCertificateCustomValidationCallback">
            <summary>
            ssl证书验证委托
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._token">
            <summary>
            令牌
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._certificatePath">
            <summary>
            证书路径
            </summary>
        </member>
        <member name="F:KissU.Util.Webs.Clients.HttpRequestBase`1._certificatePassword">
            <summary>
            证书密码
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.#ctor(System.Net.Http.HttpMethod,System.String)">
            <summary>
            初始化Http请求
            </summary>
            <param name="httpMethod">Http动词</param>
            <param name="url">地址</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.Encoding(System.Text.Encoding)">
            <summary>
            设置字符编码
            </summary>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.Encoding(System.String)">
            <summary>
            设置字符编码
            </summary>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.ContentType(KissU.Util.Webs.Clients.HttpContentType)">
            <summary>
            设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.ContentType(System.String)">
            <summary>
            设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.This">
            <summary>
            返回自身
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.Cookie(System.String,System.String,System.Double)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="expiresDate">有效时间，单位：天</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.Cookie(System.String,System.String,System.DateTime)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="expiresDate">到期时间</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.Cookie(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="path">源服务器URL子集</param>
            <param name="domain">所属域</param>
            <param name="expiresDate">到期时间</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.Cookie(System.Net.Cookie)">
            <summary>
            设置Cookie
            </summary>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.Timeout(System.Int32)">
            <summary>
            超时时间
            </summary>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.Header``1(System.String,``0)">
            <summary>
            请求头
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.Data(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            添加参数字典
            </summary>
            <param name="parameters">参数字典</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.Data(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.JsonData``1(``0)">
            <summary>
            添加Json参数
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.XmlData(System.String)">
            <summary>
            添加Xml参数
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.OnFail(System.Action{System.String})">
            <summary>
            请求失败回调函数
            </summary>
            <param name="action">执行失败的回调函数,参数为响应结果</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.OnFail(System.Action{System.String,System.Net.HttpStatusCode})">
            <summary>
            请求失败回调函数
            </summary>
            <param name="action">执行失败的回调函数,第一个参数为响应结果，第二个参数为状态码</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.IgnoreSsl">
            <summary>
            忽略Ssl
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.BearerToken(System.String)">
            <summary>
            设置Bearer令牌
            </summary>
            <param name="token">令牌</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.Certificate(System.String,System.String)">
            <summary>
            设置证书
            </summary>
            <param name="path">证书路径</param>
            <param name="password">证书密码</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.ResultAsync">
            <summary>
            获取结果
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.SendBefore">
            <summary>
            发送前操作
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.SendAsync">
            <summary>
            发送请求
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.CreateHttpClient">
            <summary>
            创建Http客户端
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.CreateHttpClientHandler">
            <summary>
            创建Http客户端处理器
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.InitHttpClient(System.Net.Http.HttpClient)">
            <summary>
            初始化Http客户端
            </summary>
            <param name="client">Http客户端</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.InitToken">
            <summary>
            初始化访问令牌
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.CreateRequestMessage">
            <summary>
            创建请求消息
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.CreateHttpContent">
            <summary>
            创建请求内容
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.CreateJsonContent">
            <summary>
            创建json内容
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.CreateXmlContent">
            <summary>
            创建xml内容
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.SendAfter(System.String,System.Net.Http.HttpResponseMessage)">
            <summary>
            发送后操作
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.GetContentType(System.Net.Http.HttpResponseMessage)">
            <summary>
            获取内容类型
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.SuccessHandler(System.String,System.Net.HttpStatusCode,System.String)">
            <summary>
            成功处理操作
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.HttpRequestBase`1.FailHandler(System.String,System.Net.HttpStatusCode,System.String)">
            <summary>
            失败处理操作
            </summary>
        </member>
        <member name="T:KissU.Util.Webs.Clients.IHttpRequest">
            <summary>
            Http请求
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IHttpRequest.OnSuccess(System.Action{System.String})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数,参数为响应结果</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IHttpRequest.OnSuccess(System.Action{System.String,System.Net.HttpStatusCode})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数,第一个参数为响应结果，第二个参数为状态码</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IHttpRequest.ResultFromJsonAsync``1">
            <summary>
            获取Json结果
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
        </member>
        <member name="T:KissU.Util.Webs.Clients.IHttpRequest`1">
            <summary>
            Http请求
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IHttpRequest`1.OnSuccess(System.Action{`0},System.Func{System.String,`0})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数,参数为响应结果</param>
            <param name="convertAction">将结果字符串转换为指定类型，当默认转换实现无法转换时使用</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IHttpRequest`1.OnSuccess(System.Action{`0,System.Net.HttpStatusCode},System.Func{System.String,`0})">
            <summary>
            请求成功回调函数
            </summary>
            <param name="action">执行成功的回调函数,第一个参数为响应结果，第二个参数为状态码</param>
            <param name="convertAction">将结果字符串转换为指定类型，当默认转换实现无法转换时使用</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IHttpRequest`1.ResultFromJsonAsync">
            <summary>
            获取Json结果
            </summary>
        </member>
        <member name="T:KissU.Util.Webs.Clients.IRequest`1">
            <summary>
            Http请求
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.Encoding(System.Text.Encoding)">
            <summary>
            设置字符编码
            </summary>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.Encoding(System.String)">
            <summary>
            设置字符编码
            </summary>
            <param name="encoding">字符编码,范例：gb2312</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.ContentType(KissU.Util.Webs.Clients.HttpContentType)">
            <summary>
            设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.ContentType(System.String)">
            <summary>
            设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.Cookie(System.String,System.String,System.Double)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="expiresDate">有效时间，单位：天</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.Cookie(System.String,System.String,System.DateTime)">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="expiresDate">到期时间</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.Cookie(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            设置Cookie
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <param name="path">源服务器URL子集</param>
            <param name="domain">所属域</param>
            <param name="expiresDate">到期时间</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.Cookie(System.Net.Cookie)">
            <summary>
            设置Cookie
            </summary>
            <param name="cookie">cookie</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.BearerToken(System.String)">
            <summary>
            设置Bearer令牌
            </summary>
            <param name="token">令牌</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.Certificate(System.String,System.String)">
            <summary>
            设置证书
            </summary>
            <param name="path">证书路径</param>
            <param name="password">证书密码</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.Timeout(System.Int32)">
            <summary>
            超时时间
            </summary>
            <param name="timeout">超时时间,单位：秒</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.Header``1(System.String,``0)">
            <summary>
            请求头
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.Data(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            添加参数字典
            </summary>
            <param name="parameters">参数字典</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.Data(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.JsonData``1(``0)">
            <summary>
            添加Json参数
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.XmlData(System.String)">
            <summary>
            添加Xml参数
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.OnFail(System.Action{System.String})">
            <summary>
            请求失败回调函数
            </summary>
            <param name="action">执行失败的回调函数,参数为响应结果</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.OnFail(System.Action{System.String,System.Net.HttpStatusCode})">
            <summary>
            请求失败回调函数
            </summary>
            <param name="action">执行失败的回调函数,第一个参数为响应结果，第二个参数为状态码</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.IgnoreSsl">
            <summary>
            忽略Ssl
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.IRequest`1.ResultAsync">
            <summary>
            获取结果
            </summary>
        </member>
        <member name="T:KissU.Util.Webs.Clients.WebClient">
            <summary>
            Web客户端
            </summary>
        </member>
        <member name="M:KissU.Util.Webs.Clients.WebClient.Get(System.String)">
            <summary>
            Get请求
            </summary>
            <param name="url">地址</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.WebClient.Post(System.String)">
            <summary>
            Post请求
            </summary>
            <param name="url">地址</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.WebClient.Put(System.String)">
            <summary>
            Put请求
            </summary>
            <param name="url">地址</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.WebClient.Delete(System.String)">
            <summary>
            Delete请求
            </summary>
            <param name="url">地址</param>
        </member>
        <member name="T:KissU.Util.Webs.Clients.WebClient`1">
            <summary>
            Web客户端
            </summary>
            <typeparam name="TResult">返回的结果类型</typeparam>
        </member>
        <member name="M:KissU.Util.Webs.Clients.WebClient`1.Get(System.String)">
            <summary>
            Get请求
            </summary>
            <param name="url">地址</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.WebClient`1.Post(System.String)">
            <summary>
            Post请求
            </summary>
            <param name="url">地址</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.WebClient`1.Put(System.String)">
            <summary>
            Put请求
            </summary>
            <param name="url">地址</param>
        </member>
        <member name="M:KissU.Util.Webs.Clients.WebClient`1.Delete(System.String)">
            <summary>
            Delete请求
            </summary>
            <param name="url">地址</param>
        </member>
    </members>
</doc>
