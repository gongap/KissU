<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KissU.Util.Datas</name>
    </assembly>
    <members>
        <member name="T:KissU.Util.Datas.Dapper.Extensions">
            <summary>
            服务扩展
            </summary>
            <summary>
            查询对象扩展
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.AddSqlQuery(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{KissU.Util.Datas.Sql.Configs.SqlOptions})">
            <summary>
            注册Sql查询服务
            </summary>
            <param name="services">服务集合</param>
            <param name="action">Sql查询配置</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.AddSqlQuery``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{KissU.Util.Datas.Sql.Configs.SqlOptions})">
            <summary>
            注册Sql查询服务
            </summary>
            <typeparam name="TDatabase">IDatabase实现类型，提供数据库连接</typeparam>
            <param name="services">服务集合</param>
            <param name="action">Sql查询配置</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.AddSqlQuery``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{KissU.Util.Datas.Sql.Configs.SqlOptions})">
            <summary>
            注册Sql查询服务
            </summary>
            <typeparam name="TDatabase">IDatabase实现类型，提供数据库连接</typeparam>
            <typeparam name="TEntityMatedata">IEntityMatedata实现类型,提供实体元数据解析</typeparam>
            <param name="services">服务集合</param>
            <param name="action">Sql查询配置</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.AddSqlQuery(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{KissU.Util.Datas.Sql.Configs.SqlOptions},System.Type,System.Type)">
            <summary>
            注册Sql查询服务
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.AddSqlBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,KissU.Util.Datas.Sql.Configs.SqlOptions)">
            <summary>
            配置Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.RegisterTypeHandlers(KissU.Util.Datas.Sql.Configs.SqlOptions)">
            <summary>
            注册类型处理器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToList``3(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToList``4(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToList``5(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToList``6(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToList``7(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="T6">参数类型6</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToList``8(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="T6">参数类型6</typeparam>
            <typeparam name="T7">参数类型7</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToListAsync``3(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToListAsync``4(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToListAsync``5(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToListAsync``6(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToListAsync``7(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="T6">参数类型6</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToListAsync``8(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="T6">参数类型6</typeparam>
            <typeparam name="T7">参数类型7</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerList``3(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerList``4(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerList``5(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerList``6(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerList``7(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5,``6},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="T6">参数类型6</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerList``8(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="T6">参数类型6</typeparam>
            <typeparam name="T7">参数类型7</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerListAsync``3(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerListAsync``4(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerListAsync``5(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerListAsync``6(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerListAsync``7(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5,``6},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="T6">参数类型6</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Extensions.ToPagerListAsync``8(KissU.Util.Datas.Sql.ISqlQuery,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
            <typeparam name="T5">参数类型5</typeparam>
            <typeparam name="T6">参数类型6</typeparam>
            <typeparam name="T7">参数类型7</typeparam>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="map">映射操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.Handlers.GuidTypeHandler">
            <summary>
            字符串类型处理器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Handlers.GuidTypeHandler.Parse(System.Object)">
            <summary>
            转换值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Handlers.GuidTypeHandler.SetValue(System.Data.IDbDataParameter,System.Guid)">
            <summary>
            设置值
            </summary>
            <param name="parameter">参数</param>
            <param name="value">值</param>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.Handlers.StringTypeHandler">
            <summary>
            字符串类型处理器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Handlers.StringTypeHandler.SetValue(System.Data.IDbDataParameter,System.String)">
            <summary>
            设置值
            </summary>
            <param name="parameter">参数</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Handlers.StringTypeHandler.Parse(System.Object)">
            <summary>
            转换值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.MySql.MySqlBuilder">
            <summary>
            MySql Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlBuilder.#ctor(KissU.Util.Datas.Sql.Matedatas.IEntityMatedata,KissU.Util.Datas.Sql.Matedatas.ITableDatabase,KissU.Util.Datas.Sql.Builders.IParameterManager)">
            <summary>
            初始化Sql生成器
            </summary>
            <param name="matedata">实体元数据解析器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlBuilder.Clone">
            <summary>
            复制Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlBuilder.GetDialect">
            <summary>
            获取Sql方言
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlBuilder.New">
            <summary>
            创建Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlBuilder.CreateFromClause">
            <summary>
            创建From子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlBuilder.CreateJoinClause">
            <summary>
            创建Join子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlBuilder.CreateLimitSql">
            <summary>
            创建分页Sql
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlBuilder.GetCteKeyWord">
            <summary>
            获取CTE关键字
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.MySql.MySqlDialect">
            <summary>
            MySql方言
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Dapper.MySql.MySqlDialect.OpeningIdentifier">
            <summary>
            起始转义标识符
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Dapper.MySql.MySqlDialect.ClosingIdentifier">
            <summary>
            结束转义标识符
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlDialect.GetSafeName(System.String)">
            <summary>
            获取安全名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.MySql.MySqlFromClause">
            <summary>
            MySql From子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlFromClause.#ctor(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Matedatas.ITableDatabase,KissU.Util.Datas.Sql.Builders.Core.SqlItem)">
            <summary>
            初始化From子句
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="table">表</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlFromClause.CreateSqlItem(System.String,System.String,System.String)">
            <summary>
            创建Sql项
            </summary>
            <param name="table">表名</param>
            <param name="schema">架构名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlFromClause.Clone(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            复制From子句
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.MySql.MySqlJoinClause">
            <summary>
            MySql 表连接子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlJoinClause.#ctor(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.IParameterManager,KissU.Util.Datas.Sql.Matedatas.ITableDatabase)">
            <summary>
            初始化MySql 表连接子句
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体注册器</param>
            <param name="parameterManager">参数管理器</param>
            <param name="tableDatabase">表数据库</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.MySql.MySqlJoinClause.CreateJoinItem(System.String,System.String,System.String,System.String,System.Type)">
            <summary>
            创建连接项
            </summary>
            <param name="joinType">连接类型</param>
            <param name="table">表名</param>
            <param name="schema">架构名</param>
            <param name="alias">别名</param>
            <param name="type">实体类型</param>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.Oracle.OracleBuilder">
            <summary>
            Oracle Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleBuilder.#ctor(KissU.Util.Datas.Sql.Matedatas.IEntityMatedata,KissU.Util.Datas.Sql.Matedatas.ITableDatabase,KissU.Util.Datas.Sql.Builders.IParameterManager)">
            <summary>
            初始化Sql生成器
            </summary>
            <param name="matedata">实体元数据解析器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleBuilder.Clone">
            <summary>
            复制Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleBuilder.GetDialect">
            <summary>
            获取Sql方言
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleBuilder.New">
            <summary>
            创建Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleBuilder.CreateFromClause">
            <summary>
            创建From子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleBuilder.CreateJoinClause">
            <summary>
            创建Join子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleBuilder.CreateLimitSql">
            <summary>
            创建分页Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.Oracle.OracleDialect">
            <summary>
            Oracle方言
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Dapper.Oracle.OracleDialect.OpeningIdentifier">
            <summary>
            起始转义标识符
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Dapper.Oracle.OracleDialect.ClosingIdentifier">
            <summary>
            结束转义标识符
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleDialect.GetSafeName(System.String)">
            <summary>
            获取安全名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleDialect.GetPrefix">
            <summary>
            获取参数前缀
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleDialect.SupportSelectAs">
            <summary>
            Select子句是否支持As关键字
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleDialect.GenerateName(System.Int32)">
            <summary>
            创建参数名
            </summary>
            <param name="paramIndex">参数索引</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleDialect.GetParamName(System.String)">
            <summary>
            获取参数名
            </summary>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleDialect.GetParamValue(System.Object)">
            <summary>
            获取参数值
            </summary>
            <param name="paramValue">参数值</param>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.Oracle.OracleFromClause">
            <summary>
            Oracle From子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleFromClause.#ctor(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Matedatas.ITableDatabase,KissU.Util.Datas.Sql.Builders.Core.SqlItem)">
            <summary>
            初始化From子句
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="table">表</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleFromClause.Clone(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            复制From子句
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.Oracle.OracleJoinClause">
            <summary>
            Oracle 表连接子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleJoinClause.#ctor(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.IParameterManager,KissU.Util.Datas.Sql.Matedatas.ITableDatabase)">
            <summary>
            初始化Oracle 表连接子句
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体注册器</param>
            <param name="parameterManager">参数管理器</param>
            <param name="tableDatabase">表数据库</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.Oracle.OracleJoinClause.CreateJoinItem(System.String,System.String,System.String,System.String,System.Type)">
            <summary>
            创建连接项
            </summary>
            <param name="joinType">连接类型</param>
            <param name="table">表名</param>
            <param name="schema">架构名</param>
            <param name="alias">别名</param>
            <param name="type">实体类型</param>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.PgSql.PgSqlBuilder">
            <summary>
            PgSql Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.PgSql.PgSqlBuilder.#ctor(KissU.Util.Datas.Sql.Matedatas.IEntityMatedata,KissU.Util.Datas.Sql.Matedatas.ITableDatabase,KissU.Util.Datas.Sql.Builders.IParameterManager)">
            <summary>
            初始化Sql生成器
            </summary>
            <param name="matedata">实体元数据解析器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.PgSql.PgSqlBuilder.Clone">
            <summary>
            复制Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.PgSql.PgSqlBuilder.GetDialect">
            <summary>
            获取Sql方言
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.PgSql.PgSqlBuilder.GetParamLiteralsResolver">
            <summary>
            获取参数字面值解析器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.PgSql.PgSqlBuilder.New">
            <summary>
            创建Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.PgSql.PgSqlBuilder.CreateLimitSql">
            <summary>
            创建分页Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.PgSql.PgSqlDialect">
            <summary>
            PgSql方言
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Dapper.PgSql.PgSqlDialect.OpeningIdentifier">
            <summary>
            起始转义标识符
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Dapper.PgSql.PgSqlDialect.ClosingIdentifier">
            <summary>
            结束转义标识符
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.PgSql.PgSqlDialect.GetSafeName(System.String)">
            <summary>
            获取安全名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.PgSql.PgSqlParamLiteralsResolver">
            <summary>
            PgSql参数字面值解析器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.PgSql.PgSqlParamLiteralsResolver.GetParamLiterals(System.Object)">
            <summary>
            获取参数字面值
            </summary>
            <param name="value">参数值</param>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.SqlQuery">
            <summary>
            Dapper Sql查询对象
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Dapper.SqlQuery.TraceLogName">
            <summary>
            跟踪日志名称
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.#ctor(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.IDatabase)">
            <summary>
            初始化Dapper Sql查询对象
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="database">数据库</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.#ctor(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.IDatabase,KissU.Util.Datas.Sql.Configs.SqlOptions)">
            <summary>
            初始化Dapper Sql查询对象
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="database">数据库</param>
            <param name="sqlOptions">Sql配置</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.Clone">
            <summary>
            复制Sql查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.ToScalar(System.Data.IDbConnection)">
            <summary>
            获取单值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.ToScalarAsync(System.Data.IDbConnection)">
            <summary>
            获取单值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.To``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.ToAsync``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.ToList``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.ToListAsync``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.ToPagerList``1(KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.PagerQuery``1(System.Func{System.Collections.Generic.List{``0}},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            分页查询
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">获取列表操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.GetCount(System.Data.IDbConnection)">
            <summary>
            获取行数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.SetPager(KissU.Util.Domains.Repositories.IPager)">
            <summary>
            设置分页参数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.ToPagerList``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.ToPagerListAsync``1(KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.PagerQueryAsync``1(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            分页查询
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">获取列表操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.GetCountAsync(System.Data.IDbConnection)">
            <summary>
            获取行数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.ToPagerListAsync``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.ToListAsync``1(System.String,System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="sql">Sql语句</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.ToPagerListAsync``1(System.String,System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="sql">Sql语句</param>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.WriteTraceLog(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            写日志
            </summary>
            <param name="sql">Sql语句</param> 
            <param name="parameters">参数</param>
            <param name="debugSql">调试Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlQuery.GetLog">
            <summary>
            获取日志操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.SqlServer.SqlServerBuilder">
            <summary>
            Sql Server Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlServer.SqlServerBuilder.#ctor(KissU.Util.Datas.Sql.Matedatas.IEntityMatedata,KissU.Util.Datas.Sql.Matedatas.ITableDatabase,KissU.Util.Datas.Sql.Builders.IParameterManager)">
            <summary>
            初始化Sql生成器
            </summary>
            <param name="matedata">实体元数据解析器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlServer.SqlServerBuilder.Clone">
            <summary>
            复制Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlServer.SqlServerBuilder.GetDialect">
            <summary>
            获取Sql方言
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlServer.SqlServerBuilder.New">
            <summary>
            创建Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlServer.SqlServerBuilder.CreateLimitSql">
            <summary>
            创建分页Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Dapper.SqlServer.SqlServerDialect">
            <summary>
            Sql Server方言
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Dapper.SqlServer.SqlServerDialect.GetSafeName(System.String)">
            <summary>
            获取安全名称
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Configs.EfConfig">
            <summary>
            Ef配置
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Configs.EfConfig.#ctor">
            <summary>
            初始化Ef配置
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Ef.Configs.EfConfig.EfLogLevel">
            <summary>
            Ef日志级别，默认值：EfLogLevel.Sql，表示仅输出Sql
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Ef.Configs.EfConfig.SqlQuery">
            <summary>
            Sql查询配置
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Configs.EfLogLevel">
            <summary>
            Ef日志级别
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Configs.EfLogLevel.All">
            <summary>
            输出全部日志，包括连接数据库，提交事务等大量信息
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Configs.EfLogLevel.Sql">
            <summary>
            仅输出Sql
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Configs.EfLogLevel.Off">
            <summary>
            关闭日志
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`2">
            <summary>
            仓储 - 配合持久化对象使用
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`2.#ctor(KissU.Util.Datas.Stores.IStore{`1,System.Guid})">
            <summary>
            初始化仓储
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3">
            <summary>
            仓储 - 配合持久化对象使用
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3._store">
            <summary>
            存储器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.#ctor(KissU.Util.Datas.Stores.IStore{`1,`2})">
            <summary>
            初始化仓储
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.ToEntity(`1)">
            <summary>
            将持久化对象转成实体
            </summary>
            <param name="po">持久化对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.ToPo(`0)">
            <summary>
            将实体转成持久化对象
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.Find(System.Object)">
            <summary>
            查找实体
            </summary>
            <param name="id">实体标识</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            查找实体
            </summary>
            <param name="id">实体标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIds(`2[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">实体标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIds(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">实体标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIds(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIdsAsync(`2[])">
            <summary>
            查找实体集合
            </summary>
            <param name="ids">实体标识集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIdsAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIdsAsync(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.Exists(`2[])">
            <summary>
            判断实体是否存在
            </summary>
            <param name="ids">实体标识集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.ExistsAsync(`2[])">
            <summary>
            判断实体是否存在
            </summary>
            <param name="ids">实体标识集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.Add(`0)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.Update(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.UpdateAsync(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.Remove(System.Object)">
            <summary>
            移除实体
            </summary>
            <param name="id">实体标识</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.RemoveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="id">实体标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.Remove(`0)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.Remove(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">实体编号集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.RemoveAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">实体编号集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.CompactRepositoryBase`3.RemoveAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.IMap">
            <summary>
            映射
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.IMap.Map(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            映射配置
            </summary>
            <param name="builder">模型生成器</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.MapBase`1">
            <summary>
            映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="P:KissU.Util.Datas.Ef.Core.MapBase`1.ModelBuilder">
            <summary>
            模型生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.MapBase`1.Map(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            映射配置
            </summary>
            <param name="modelBuilder">模型生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.MapBase`1.MapTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.MapBase`1.MapVersion(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射乐观离线锁
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.MapBase`1.MapProperties(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射属性
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.MapBase`1.MapAssociations(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射导航属性
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.QueryStoreBase`1">
            <summary>
            查询存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`1.#ctor(KissU.Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化查询存储器
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.QueryStoreBase`2">
            <summary>
            查询存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Core.QueryStoreBase`2._sqlQuery">
            <summary>
            Sql查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.#ctor(KissU.Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化查询存储器
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="P:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.UnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Set">
            <summary>
            实体集
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Sql">
            <summary>
            Sql查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.CreateSqlQuery">
            <summary>
            创建Sql查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindAsNoTracking">
            <summary>
            获取未跟踪查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Find">
            <summary>
            获取查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Find(KissU.Util.Domains.Repositories.ICriteria{`0})">
            <summary>
            查询
            </summary>
            <param name="criteria">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Find(System.Object)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIds(`1[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIds(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIds(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsAsync(`1[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsAsync(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdNoTracking(`1)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdNoTrackingAsync(`1,System.Threading.CancellationToken)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTracking(`1[])">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTracking(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTracking(System.String)">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTrackingAsync(`1[])">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTrackingAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTrackingAsync(System.String)">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找单个实体
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            查找单个实体
            </summary>
            <param name="predicate">条件</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindAllNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.FindAllNoTrackingAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Exists(`1[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.ExistsAsync(`1[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数量
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数量
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Query(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.Query(System.Linq.IQueryable{`0},KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            获取查询结果
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.QueryAsync(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.QueryAsNoTracking(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询，不跟踪实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.QueryAsNoTrackingAsync(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询，不跟踪实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.PagerQuery(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.PagerQueryAsync(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.PagerQueryAsNoTracking(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.QueryStoreBase`2.PagerQueryAsNoTrackingAsync(KissU.Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.RepositoryBase`1">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.RepositoryBase`1.#ctor(KissU.Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化仓储
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.RepositoryBase`2">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.RepositoryBase`2.#ctor(KissU.Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化仓储
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.StoreBase`1">
            <summary>
            存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`1.#ctor(KissU.Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化存储器
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.StoreBase`2">
            <summary>
            存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.#ctor(KissU.Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化存储器
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.Add(`0)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.Update(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.UpdateAsync(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.Remove(System.Object)">
            <summary>
            移除实体
            </summary>
            <param name="id">实体标识</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.Delete(`0)">
            <summary>
            删除
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.RemoveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.Remove(`0)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.Remove(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除实体集合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.RemoveAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.StoreBase`2.RemoveAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.TreeCompactRepositoryBase`2">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Core.TreeCompactRepositoryBase`2._store">
            <summary>
            存储器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.TreeCompactRepositoryBase`2.#ctor(KissU.Util.Datas.Stores.IStore{`1,System.Guid})">
            <summary>
            初始化树型仓储
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.TreeCompactRepositoryBase`2.GenerateSortIdAsync(System.Nullable{System.Guid})">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父标识</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.TreeCompactRepositoryBase`4">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Core.TreeCompactRepositoryBase`4._store">
            <summary>
            存储器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.TreeCompactRepositoryBase`4.#ctor(KissU.Util.Datas.Stores.IStore{`1,`2})">
            <summary>
            初始化树型仓储
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.TreeCompactRepositoryBase`4.GenerateSortIdAsync(`3)">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父标识</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.TreeCompactRepositoryBase`4.GetAllChildrenAsync(`0)">
            <summary>
            获取全部下级实体
            </summary>
            <param name="parent">父实体</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.TreeCompactRepositoryBase`4.FindByIdNoTrackingAsync(`2,System.Threading.CancellationToken)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.TreeRepositoryBase`1">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.TreeRepositoryBase`1.#ctor(KissU.Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化树型仓储
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.TreeRepositoryBase`1.GenerateSortIdAsync(System.Nullable{System.Guid})">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父编号</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.TreeRepositoryBase`3">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.TreeRepositoryBase`3.#ctor(KissU.Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化树型仓储
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.TreeRepositoryBase`3.GenerateSortIdAsync(`2)">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父编号</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.TreeRepositoryBase`3.GetAllChildrenAsync(`0)">
            <summary>
            获取全部下级实体
            </summary>
            <param name="parent">父实体</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Core.UnitOfWorkBase">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.Maps">
            <summary>
            映射字典
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.LoggerFactory">
            <summary>
            日志工厂
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Core.UnitOfWorkBase._serviceProvider">
            <summary>
            服务提供器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.#cctor">
            <summary>
            初始化Entity Framework工作单元
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,System.IServiceProvider)">
            <summary>
            初始化Entity Framework工作单元
            </summary>
            <param name="options">配置</param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.RegisterToManager">
            <summary>
            注册到工作单元管理器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.Create``1">
            <summary>
            创建实例
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.Session">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            配置
            </summary>
            <param name="builder">配置生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.EnableLog(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            启用日志
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetLog">
            <summary>
            获取日志操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.IsEnabled(KissU.Util.Logs.ILog)">
            <summary>
            是否启用Ef日志
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetConfig">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            配置映射
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetMaps">
            <summary>
            获取映射配置列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetMapType">
            <summary>
            获取映射接口类型
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetMapsFromAssemblies">
            <summary>
            从程序集获取映射配置列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetAssemblies">
            <summary>
            获取定义映射配置的程序集列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetMapInstances(System.Reflection.Assembly)">
            <summary>
            获取映射实例列表
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.Commit">
            <summary>
            提交,返回影响的行数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.SaveChanges">
            <summary>
            保存更改
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.CommitAsync">
            <summary>
            提交,返回影响的行数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            异步保存更改
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.SaveChangesBefore">
            <summary>
            保存更改前操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.InterceptAddedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截添加操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.InitCreationAudited(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            初始化创建审计信息
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetUserId">
            <summary>
            获取用户标识
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetSession">
            <summary>
            获取用户会话
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetUserName">
            <summary>
            获取用户名称
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.InitModificationAudited(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            初始化修改审计信息
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.InterceptModifiedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截修改操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.InterceptDeletedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截删除操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.TransactionCommit(KissU.Util.Datas.Transactions.ITransactionActionManager,System.Threading.CancellationToken)">
            <summary>
            手工创建事务提交
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetConnection">
            <summary>
            获取数据库连接
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetTable(System.Type)">
            <summary>
            获取表名
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetSchema(System.Type)">
            <summary>
            获取架构
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Core.UnitOfWorkBase.GetColumn(System.Type,System.String)">
            <summary>
            获取列名
            </summary>
            <param name="type">实体类型</param>
            <param name="property">属性名</param>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Extensions">
            <summary>
            查询扩展
            </summary>
            <summary>
            服务扩展
            </summary>
            <summary>
            Ef工作单元扩展
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Extensions.ToPagerListAsync``1(System.Linq.IQueryable{``0},KissU.Util.Domains.Repositories.IPager)">
            <summary>
            转换为分页列表，包含排序分页操作
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="pager">分页对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Extensions.PageAsync``1(System.Linq.IQueryable{``0},KissU.Util.Domains.Repositories.IPager)">
            <summary>
            分页，包含排序
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="pager">分页对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Extensions.AddUnitOfWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Action{KissU.Util.Datas.Ef.Configs.EfConfig},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            注册工作单元服务
            </summary>
            <typeparam name="TService">工作单元接口类型</typeparam>
            <typeparam name="TImplementation">工作单元实现类型</typeparam>
            <param name="services">服务集合</param>
            <param name="configAction">配置操作</param>
            <param name="efConfigAction">Ef配置操作</param>
            <param name="configuration">配置</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Extensions.GetDbType``1">
            <summary>
            获取数据库类型
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Extensions.AddUnitOfWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,KissU.Util.Datas.Ef.Configs.EfLogLevel)">
            <summary>
            注册工作单元服务
            </summary>
            <typeparam name="TService">工作单元接口类型</typeparam>
            <typeparam name="TImplementation">工作单元实现类型</typeparam>
            <param name="services">服务集合</param>
            <param name="connection">连接字符串</param>
            <param name="level">Ef日志级别</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Extensions.ConfigConnection``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String)">
            <summary>
            配置连接字符串
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Extensions.AddUnitOfWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{KissU.Util.Datas.Ef.Configs.EfConfig})">
            <summary>
            注册工作单元服务
            </summary>
            <typeparam name="TService">工作单元接口类型</typeparam>
            <typeparam name="TImplementation">工作单元实现类型</typeparam>
            <param name="services">服务集合</param>
            <param name="connection">连接字符串</param>
            <param name="efConfigAction">Ef配置操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Extensions.AddUnitOfWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            注册工作单元服务
            </summary>
            <typeparam name="TService">工作单元接口类型</typeparam>
            <typeparam name="TImplementation">工作单元实现类型</typeparam>
            <param name="services">服务集合</param>
            <param name="connection">连接字符串</param>
            <param name="configuration">配置</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Extensions.ClearCache(KissU.Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Internal.Helper">
            <summary>
            工具操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Internal.Helper.InitVersion(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            初始化版本号
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Logs.EfLog">
            <summary>
            Ef日志记录器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Logs.EfLog.TraceLogName">
            <summary>
            Ef跟踪日志名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            日志记录
            </summary>
            <typeparam name="TState">状态类型</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件编号</param>
            <param name="state">状态</param>
            <param name="exception">异常</param>
            <param name="formatter">日志内容</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.GetConfig">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.GetLog">
            <summary>
            获取日志操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.GetUnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.IsEnabled(Microsoft.Extensions.Logging.EventId,KissU.Util.Datas.Ef.Configs.EfConfig)">
            <summary>
            是否启用Ef日志
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.AddContent``1(``0,KissU.Util.Datas.Ef.Configs.EfConfig,KissU.Util.Logs.ILog)">
            <summary>
            添加日志内容
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.AddDictionary(System.Collections.Generic.IDictionary{System.String,System.String},KissU.Util.Logs.ILog)">
            <summary>
            添加字典内容
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.GetValue(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.AddElapsed(System.String,KissU.Util.Logs.ILog)">
            <summary>
            添加执行时间
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.AddSql(System.String,KissU.Util.Logs.ILog)">
            <summary>
            添加Sql
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.AddSqlParams(System.String,KissU.Util.Logs.ILog)">
            <summary>
            添加Sql参数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            是否启用
            </summary>
            <param name="logLevel">日志级别</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLog.BeginScope``1(``0)">
            <summary>
            起始范围
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Logs.EfLogProvider">
            <summary>
            Ef日志提供器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLogProvider.CreateLogger(System.String)">
            <summary>
            初始化Ef日志提供器
            </summary>
            <param name="category">日志分类</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.EfLogProvider.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Logs.NullLogger">
            <summary>
            空日志记录器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Ef.Logs.NullLogger.Instance">
            <summary>
            空日志记录器实例
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.NullLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            日志记录
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.NullLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            是否启用
            </summary>
            <param name="logLevel">日志级别</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Logs.NullLogger.BeginScope``1(``0)">
            <summary>
            起始范围
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.MySql.AggregateRootMap`1">
            <summary>
            聚合根映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.MySql.AggregateRootMap`1.MapVersion(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射乐观离线锁
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.MySql.EntityMap`1">
            <summary>
            实体映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:KissU.Util.Datas.Ef.MySql.IMap">
            <summary>
            映射
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.MySql.UnitOfWork">
            <summary>
            MySql工作单元
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.MySql.UnitOfWork.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,System.IServiceProvider)">
            <summary>
            初始化MySql工作单元
            </summary>
            <param name="options">配置</param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.MySql.UnitOfWork.GetMapInstances(System.Reflection.Assembly)">
            <summary>
            获取映射实例列表
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.MySql.UnitOfWork.InterceptAddedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截添加操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.MySql.UnitOfWork.InterceptModifiedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截修改操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Oracle.AggregateRootMap`1">
            <summary>
            聚合根映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Oracle.AggregateRootMap`1.MapVersion(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射乐观离线锁
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Oracle.EntityMap`1">
            <summary>
            实体映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Oracle.IMap">
            <summary>
            映射
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.Oracle.UnitOfWork">
            <summary>
            Oracle工作单元
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Oracle.UnitOfWork.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,System.IServiceProvider)">
            <summary>
            初始化Oracle工作单元
            </summary>
            <param name="options">配置</param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Oracle.UnitOfWork.GetMapInstances(System.Reflection.Assembly)">
            <summary>
            获取映射实例列表
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Oracle.UnitOfWork.InterceptAddedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截添加操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.Oracle.UnitOfWork.InterceptModifiedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截修改操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.PgSql.AggregateRootMap`1">
            <summary>
            聚合根映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.PgSql.AggregateRootMap`1.MapVersion(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射乐观离线锁
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.PgSql.EntityMap`1">
            <summary>
            实体映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:KissU.Util.Datas.Ef.PgSql.IMap">
            <summary>
            映射
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.PgSql.UnitOfWork">
            <summary>
            PgSql工作单元
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.PgSql.UnitOfWork.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,System.IServiceProvider)">
            <summary>
            初始化PgSql工作单元
            </summary>
            <param name="options">配置</param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.PgSql.UnitOfWork.GetMapInstances(System.Reflection.Assembly)">
            <summary>
            获取映射实例列表
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.PgSql.UnitOfWork.InterceptAddedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截添加操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.PgSql.UnitOfWork.InterceptModifiedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截修改操作
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.SqlServer.AggregateRootMap`1">
            <summary>
            聚合根映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:KissU.Util.Datas.Ef.SqlServer.AggregateRootMap`1.MapVersion(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射乐观离线锁
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.SqlServer.EntityMap`1">
            <summary>
            实体映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:KissU.Util.Datas.Ef.SqlServer.IMap">
            <summary>
            映射
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Ef.SqlServer.UnitOfWork">
            <summary>
            SqlServer工作单元
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Ef.SqlServer.UnitOfWork.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,System.IServiceProvider)">
            <summary>
            初始化SqlServer工作单元
            </summary>
            <param name="options">配置</param>
            <param name="serviceProvider">服务提供器</param>
        </member>
        <member name="M:KissU.Util.Datas.Ef.SqlServer.UnitOfWork.GetMapInstances(System.Reflection.Assembly)">
            <summary>
            获取映射实例列表
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Clauses.FromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.Builder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.Dialect">
            <summary>
            方言
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.Resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.Register">
            <summary>
            实体注册器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.TableDatabase">
            <summary>
            表数据库
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.Table">
            <summary>
            Sql项
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.#ctor(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Matedatas.ITableDatabase,KissU.Util.Datas.Sql.Builders.Core.SqlItem)">
            <summary>
            初始化From子句
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="table">表</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.Clone(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            复制From子句
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.From(System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.CreateSqlItem(System.String,System.String,System.String)">
            <summary>
            创建Sql项
            </summary>
            <param name="table">表名</param>
            <param name="schema">架构名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.From``1(System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.From(KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询表
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.From(System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询表
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.AppendSql(System.String)">
            <summary>
            添加到From子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.FromClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause">
            <summary>
            Group By子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause._dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause._register">
            <summary>
            实体注册器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause._group">
            <summary>
            分组字段
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause._having">
            <summary>
            分组条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause.#ctor(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,System.Collections.Generic.List{KissU.Util.Datas.Sql.Builders.Core.SqlItem},System.String)">
            <summary>
            初始化分组子句
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="group">分组字段</param>
            <param name="having">分组条件</param>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause.IsGroup">
            <summary>
            是否存在分组
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause.GroupColumns">
            <summary>
            分组列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause.Clone(KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            复制Group By子句
            </summary>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause.GroupBy(System.String,System.String)">
            <summary>
            分组
            </summary>
            <param name="columns">分组字段</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause.GroupBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="columns">分组字段</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause.GroupBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            分组
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">分组字段</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause.AppendSql(System.String)">
            <summary>
            添加到GroupBy子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.GroupByClause.ToSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause">
            <summary>
            表连接子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.JoinKey">
            <summary>
            Join关键字
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.LeftJoinKey">
            <summary>
            Left Join关键字
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.RightJoinKey">
            <summary>
            Right Join关键字
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause._sqlBuilder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause._dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause._register">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause._parameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.TableDatabase">
            <summary>
            表数据库
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause._helper">
            <summary>
            辅助操作
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause._params">
            <summary>
            连接参数列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.#ctor(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.IParameterManager,KissU.Util.Datas.Sql.Matedatas.ITableDatabase,System.Collections.Generic.List{KissU.Util.Datas.Sql.Builders.Core.JoinItem})">
            <summary>
            初始化表连接子句
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="joinItems">连接参数列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.Clone(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.IParameterManager)">
            <summary>
            复制Join子句
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.Find(System.Type)">
            <summary>
            查找连接项
            </summary>
            <param name="type">表实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.Join(System.String,System.String)">
            <summary>
            内连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.Join(System.String,System.String,System.String)">
            <summary>
            表连接
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.CreateJoinItem(System.String,System.String,System.String,System.String,System.Type)">
            <summary>
            创建连接项
            </summary>
            <param name="joinType">连接类型</param>
            <param name="table">表名</param>
            <param name="schema">架构名</param>
            <param name="alias">别名</param>
            <param name="type">类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.AddItem(KissU.Util.Datas.Sql.Builders.Core.JoinItem)">
            <summary>
            添加连接项
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.Join``1(System.String,System.String)">
            <summary>
            内连接
            </summary>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.Join``1(System.String,System.String,System.String)">
            <summary>
            表连接
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.Join(KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            内连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.AppendJoin(System.String,KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            添加到连接子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.Join(System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            内连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.AppendJoin(System.String,System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            添加到连接子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.AppendJoin(System.String)">
            <summary>
            添加到内连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.AppendJoin(System.String,System.String)">
            <summary>
            添加到连接子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.LeftJoin(System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.LeftJoin``1(System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.LeftJoin(KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            左外连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.LeftJoin(System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            左外连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.AppendLeftJoin(System.String)">
            <summary>
            添加到左外连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.RightJoin(System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.RightJoin``1(System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.RightJoin(KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            右外连接子查询
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.RightJoin(System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            右外连接子查询
            </summary>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.AppendRightJoin(System.String)">
            <summary>
            添加到右外连接子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.On(KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            设置连接条件
            </summary>
            <param name="condition">连接条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.On(System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.On``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="left">左表列名</param>
            <param name="right">右表列名</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.GetColumn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取列
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.GetColumn(System.Type,System.String)">
            <summary>
            获取列
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.On``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            设置连接条件
            </summary>
            <param name="expression">条件表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.GetOnItems(System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            设置连接条件组
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.GetColumn(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取列
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.AppendOn(System.String)">
            <summary>
            添加到On子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.JoinClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause">
            <summary>
            Order By子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause._dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause._register">
            <summary>
            实体注册器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause._items">
            <summary>
            排序项列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause.#ctor(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,System.Collections.Generic.List{KissU.Util.Datas.Sql.Builders.Core.OrderByItem})">
            <summary>
            初始化排序子句
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="items">排序项列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause.Clone(KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            复制Order By子句
            </summary>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause.OrderBy(System.String,System.String)">
            <summary>
            排序
            </summary>
            <param name="order">排序列表</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause.AddItem(System.String,System.Boolean,System.Type,System.String)">
            <summary>
            添加排序项
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause.Exists(System.String,System.String)">
            <summary>
            是否已存在
            </summary>
            <param name="column">排序列</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause.OrderBy``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            排序
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">排序列</param>
            <param name="desc">是否倒排</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause.AppendSql(System.String)">
            <summary>
            添加到OrderBy子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause.Validate(System.Boolean)">
            <summary>
            验证
            </summary>
            <param name="isPage">是否分页</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.OrderByClause.ToSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause._sqlBuilder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause._dialect">
            <summary>
            方言
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause._register">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause._columns">
            <summary>
            列集合
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause._distinct">
            <summary>
            是否排除重复记录
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.#ctor(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.Core.ColumnCollection)">
            <summary>
            初始化Select子句
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体注册器</param>
            <param name="columns">列集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Clone(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            复制Select子句
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Distinct">
            <summary>
            过滤重复记录
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Count(System.String)">
            <summary>
            求总行数
            </summary>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Count(System.String,System.String)">
            <summary>
            求总行数
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求总行数
            </summary>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Aggregate(System.String,System.String)">
            <summary>
            聚合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Sum(System.String,System.String)">
            <summary>
            求和
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Aggregate(System.String,System.String,System.String)">
            <summary>
            聚合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求和
            </summary>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Avg(System.String,System.String)">
            <summary>
            求平均值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Avg``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求平均值
            </summary>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Max(System.String,System.String)">
            <summary>
            求最大值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最大值
            </summary>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Min(System.String,System.String)">
            <summary>
            求最小值
            </summary>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最小值
            </summary>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Select(System.String,System.String)">
            <summary>
            设置列名
            </summary>
            <param name="columns">列名</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Select``1(System.Boolean)">
            <summary>
            设置列名
            </summary>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            设置列名
            </summary>
            <param name="expression">列名表达式</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            设置列名
            </summary>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Select(KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询列
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.Select(System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询列
            </summary>
            <param name="action">子查询操作</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.AppendSql(System.String,System.String)">
            <summary>
            添加到Select子句
            </summary>
            <param name="sql">Sql语句</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.RemoveSelect(System.String,System.String)">
            <summary>
            移除列名
            </summary>
            <param name="columns">列名</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.RemoveSelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            移除列名
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.RemoveSelect``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            移除列名
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.GetDistinct">
            <summary>
            获取Distinct
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.SelectClause.GetColumns">
            <summary>
            获取列名
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Builder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause._helper">
            <summary>
            辅助操作
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause._expressionResolver">
            <summary>
            谓词表达式解析器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause._dialect">
            <summary>
            方言
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause._condition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.#ctor(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.IParameterManager,KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            初始化Where子句
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Clone(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.IParameterManager)">
            <summary>
            复制Where子句
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.And(KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            And连接条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Or(KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            Or连接条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="conditions">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.OrIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="conditions">查询条件,如果表达式中的值为空，则忽略该查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Where(KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            设置查询条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Where(System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <param name="expression">查询条件表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Where(System.String,KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Where(System.String,System.Action{KissU.Util.Datas.Sql.ISqlBuilder},KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder},KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.WhereIfNotEmpty(System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值,如果值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.WhereIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="value">值,如果值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.WhereIfNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <param name="expression">查询条件表达式,如果参数值为空，则忽略该查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.IsNull(System.String)">
            <summary>
            设置Is Null条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.IsNull``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Null条件
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.IsNotNull(System.String)">
            <summary>
            设置Is Not Null条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.IsNotNull``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Not Null条件
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.IsEmpty(System.String)">
            <summary>
            设置空条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.IsEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置空条件
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.IsNotEmpty(System.String)">
            <summary>
            设置非空条件
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.IsNotEmpty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置非空条件
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.In(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.In(System.String,KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.AppendSqlBuilder(System.String,System.String,KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            添加子查询
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.In(System.String,System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.In``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.NotIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.NotIn(System.String,KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.NotIn(System.String,System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.NotIn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Exists(KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Exists条件
            </summary>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Exists(System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Exists条件
            </summary>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.NotExists(KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not Exists条件
            </summary>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.NotExists(System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not Exists条件
            </summary>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int32},System.Nullable{System.Int32},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Double},System.Nullable{System.Double},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <param name="expression">列名表达式</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Between(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Between(System.String,System.Nullable{System.Double},System.Nullable{System.Double},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Between(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.Between(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.GetMin(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取最小日期
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.GetMax(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取最大日期
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.GetBoundary(System.Nullable{KissU.Util.Datas.Queries.Boundary},System.Boolean)">
            <summary>
            获取日期范围查询条件边界
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.AppendSql(System.String)">
            <summary>
            添加到Where子句
            </summary>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.ToSql">
            <summary>
            输出Sql
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Clauses.WhereClause.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.AndCondition">
            <summary>
            And连接条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.AndCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.AndCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.AndCondition.#ctor(System.String,System.String)">
            <summary>
            初始化And连接条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.AndCondition.#ctor(KissU.Util.Datas.Sql.Builders.ICondition,KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            初始化And连接条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.AndCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.EqualCondition">
            <summary>
            Sql相等查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.EqualCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.EqualCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.EqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql相等查询条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.EqualCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.GreaterCondition">
            <summary>
            Sql大于查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.GreaterCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.GreaterCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.GreaterCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql大于查询条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.GreaterCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.GreaterEqualCondition">
            <summary>
            Sql大于等于查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.GreaterEqualCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.GreaterEqualCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.GreaterEqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql大于等于查询条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.GreaterEqualCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.InCondition">
            <summary>
            In查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.InCondition._name">
            <summary>
            列名
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.InCondition._values">
            <summary>
            值集合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.InCondition.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            初始化In查询条件
            </summary>
            <param name="name">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.InCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.IsNotNullCondition">
            <summary>
            Is Not Null查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.IsNotNullCondition._name">
            <summary>
            列名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.IsNotNullCondition.#ctor(System.String)">
            <summary>
            初始化Is Not Null查询条件
            </summary>
            <param name="name">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.IsNotNullCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.IsNullCondition">
            <summary>
            Is Null查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.IsNullCondition._name">
            <summary>
            列名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.IsNullCondition.#ctor(System.String)">
            <summary>
            初始化Is Null查询条件
            </summary>
            <param name="name">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.IsNullCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.LessCondition">
            <summary>
            Sql小于查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.LessCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.LessCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.LessCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql小于查询条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.LessCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.LessEqualCondition">
            <summary>
            Sql小于等于查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.LessEqualCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.LessEqualCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.LessEqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql小于等于查询条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.LessEqualCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.LikeCondition">
            <summary>
            Sql模糊查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.LikeCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.LikeCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.LikeCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql模糊查询条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.LikeCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.NotEqualCondition">
            <summary>
            Sql不相等查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.NotEqualCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.NotEqualCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.NotEqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql不相等查询条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.NotEqualCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.NotInCondition">
            <summary>
            Not In查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.NotInCondition._name">
            <summary>
            列名
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.NotInCondition._values">
            <summary>
            值集合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.NotInCondition.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            初始化Not In查询条件
            </summary>
            <param name="name">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.NotInCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.NullCondition">
            <summary>
            空查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.NullCondition.#ctor">
            <summary>
            封闭构造方法
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.NullCondition.Instance">
            <summary>
            空查询条件实例
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.NullCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.OrCondition">
            <summary>
            Or连接条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.OrCondition._left">
            <summary>
            左操作数
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.OrCondition._right">
            <summary>
            右操作数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.OrCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Or连接条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.OrCondition.#ctor(KissU.Util.Datas.Sql.Builders.ICondition,KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            初始化Or连接条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.OrCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.SegmentCondition">
            <summary>
            范围过滤条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.SegmentCondition._name">
            <summary>
            列名
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.SegmentCondition._min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.SegmentCondition._max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.SegmentCondition._boundary">
            <summary>
            包含边界
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.SegmentCondition.#ctor(System.String,System.String,System.String,KissU.Util.Datas.Queries.Boundary)">
            <summary>
            初始化范围过滤条件
            </summary>
            <param name="name">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.SegmentCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.SegmentCondition.CreateLeftCondition">
            <summary>
            创建左条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.SegmentCondition.CreateLeftOperator">
            <summary>
            创建左操作符
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.SegmentCondition.CreateRightCondition">
            <summary>
            创建右条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.SegmentCondition.CreateRightOperator">
            <summary>
            创建右操作符
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.SqlCondition">
            <summary>
            Sql查询条件
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Conditions.SqlCondition._condition">
            <summary>
            Sql查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.SqlCondition.#ctor(System.String)">
            <summary>
            初始化Sql查询条件
            </summary>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.SqlCondition.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Conditions.SqlConditionFactory">
            <summary>
            Sql查询条件工厂
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Conditions.SqlConditionFactory.Create(System.String,System.String,KissU.Util.Datas.Queries.Operator)">
            <summary>
            创建Sql查询条件
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
            <param name="operator">操作符</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection">
            <summary>
            列集合
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection._items">
            <summary>
            列集合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.#ctor(System.Collections.Generic.List{KissU.Util.Datas.Sql.Builders.Core.ColumnItem})">
            <summary>
            初始化列集合
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.Item(System.Int32)">
            <summary>
            获取列
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.Count">
            <summary>
            集合数量
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.AddColumns(System.String,System.String)">
            <summary>
            添加列集合
            </summary>
            <param name="columns">列集合</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.CreateItem(System.String,System.String)">
            <summary>
            创建列
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.AddColumn(KissU.Util.Datas.Sql.Builders.Core.ColumnItem)">
            <summary>
            添加列
            </summary>
            <param name="item">列</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.AddRawColumn(System.String,System.String)">
            <summary>
            添加原始列
            </summary>
            <param name="sql">Sql语句</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.AddColumns(System.String,System.Type,System.String)">
            <summary>
            添加列集合
            </summary>
            <param name="columns">列集合</param>
            <param name="tableType">表实体类型</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.CreateItem(System.String,System.Type,System.String)">
            <summary>
            创建列
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.AddAggregationColumn(System.String,System.String)">
            <summary>
            添加聚合列
            </summary>
            <param name="column">列名</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.RemoveColumns(System.String,System.String)">
            <summary>
            移除列集合
            </summary>
            <param name="columns">列集合</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.RemoveColumn(KissU.Util.Datas.Sql.Builders.Core.ColumnItem)">
            <summary>
            移除列集合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.RemoveColumns(System.String,System.Type)">
            <summary>
            移除列集合
            </summary>
            <param name="columns">列集合</param>
            <param name="tableType">表实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.Clone">
            <summary>
            复制
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnCollection.ToSql(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            获取列名列表
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.ColumnItem">
            <summary>
            列
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnItem.#ctor(System.String,System.String,System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            初始化列
            </summary>
            <param name="name">列名</param>
            <param name="tableAlias">表别名</param>
            <param name="columnAlias">列别名</param>
            <param name="tableType">表实体类型</param>
            <param name="raw">使用原始值</param>
            <param name="isAggregation">是否聚合函数</param>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.ColumnItem.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.ColumnItem.TableAlias">
            <summary>
            表别名
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.ColumnItem.ColumnAlias">
            <summary>
            列别名
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.ColumnItem.Raw">
            <summary>
            使用原始值
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.ColumnItem.TableType">
            <summary>
            表实体类型
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.ColumnItem.IsAggregation">
            <summary>
            是否聚合函数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnItem.ToSql(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            获取列名列表
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnItem.GetTableAlias(KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            获取表别名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ColumnItem.Clone">
            <summary>
            复制
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.EntityResolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.EntityResolver._matedata">
            <summary>
            实体元数据
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.#ctor(KissU.Util.Datas.Sql.Matedatas.IEntityMatedata)">
            <summary>
            初始化实体解析器
            </summary>
            <param name="matedata">实体元数据</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetTable(System.Type)">
            <summary>
            获取表
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetSchema(System.Type)">
            <summary>
            获取架构
            </summary>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetColumns``1(System.Boolean)">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetProperties(System.Type)">
            <summary>
            获取属性列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetColumns``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="columns">列名表达式</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetColumns``1(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            获取列名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetColumn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取列名
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetExpressionColumn``1(System.Linq.Expressions.Expression)">
            <summary>
            获取表达式列名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetSingleColumn``1(System.Linq.Expressions.Expression)">
            <summary>
            获取单列
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetDictionaryColumns``1(System.Linq.Expressions.ListInitExpression)">
            <summary>
            获取字典多列
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetDictionaryByListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            获取字典
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetKeyValue(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            获取键值对
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetColumnsByMatedata``1(System.Collections.Generic.IDictionary{System.Object,System.String})">
            <summary>
            通过元数据解析创建列
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetColumns(System.Collections.Generic.IDictionary{System.Object,System.String})">
            <summary>
            通过字典创建列
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetColumn(System.Linq.Expressions.Expression,System.Type,System.Boolean)">
            <summary>
            获取列名
            </summary>
            <param name="expression">表达式</param>
            <param name="entity">实体类型</param>
            <param name="right">是否取右侧操作数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.EntityResolver.GetType(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取类型
            </summary>
            <param name="expression">表达式</param>
            <param name="right">是否取右侧操作数</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.JoinItem">
            <summary>
            表连接项
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.JoinItem._helper">
            <summary>
            辅助操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.JoinItem.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Type)">
            <summary>
            初始化表连接项
            </summary>
            <param name="joinType">连接类型</param>
            <param name="table">表名</param>
            <param name="schema">架构</param>
            <param name="alias">别名</param>
            <param name="raw">使用原始值</param>
            <param name="isSplit">是否用句点分割表名</param>
            <param name="type">表实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.JoinItem.#ctor(System.String,KissU.Util.Datas.Sql.Builders.Core.SqlItem,System.Type,KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            初始化表连接项
            </summary>
            <param name="joinType">连接类型</param>
            <param name="table">表</param>
            <param name="type">表实体类型</param>
            <param name="condition">连接条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.JoinItem.SetDependency(KissU.Util.Datas.Sql.Builders.Internal.Helper)">
            <summary>
            设置依赖项
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.JoinItem.JoinType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.JoinItem.Table">
            <summary>
            表
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.JoinItem.Type">
            <summary>
            表实体类型
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.JoinItem.Condition">
            <summary>
            连接条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.JoinItem.On(KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            设置连接条件
            </summary>
            <param name="condition">连接条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.JoinItem.On(System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.JoinItem.On(System.Collections.Generic.List{System.Collections.Generic.List{KissU.Util.Datas.Sql.Builders.Core.OnItem}},KissU.Util.Datas.Sql.Builders.IDialect)">
            <summary>
            设置连接条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.JoinItem.AppendOn(System.String,KissU.Util.Datas.Sql.Builders.IDialect)">
            <summary>
            添加到On子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.JoinItem.Clone(KissU.Util.Datas.Sql.Builders.Internal.Helper)">
            <summary>
            复制副本
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.JoinItem.ToSql(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Matedatas.ITableDatabase)">
            <summary>
            获取Join语句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.JoinItem.GetOn">
            <summary>
            获取On语句
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.OnItem">
            <summary>
            连接条件项
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.OnItem.#ctor(System.String,System.String,KissU.Util.Datas.Queries.Operator)">
            <summary>
            初始化连接条件项
            </summary>
            <param name="left">左表列名</param>
            <param name="right">右表列名</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.OnItem.#ctor(KissU.Util.Datas.Sql.Builders.Core.SqlItem,KissU.Util.Datas.Sql.Builders.Core.SqlItem,KissU.Util.Datas.Queries.Operator)">
            <summary>
            初始化连接条件项
            </summary>
            <param name="left">左表列名</param>
            <param name="right">右表列名</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.OnItem.Left">
            <summary>
            左表列名
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.OnItem.Right">
            <summary>
            右表列名
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.OnItem.Operator">
            <summary>
            条件运算符
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.OrderByItem">
            <summary>
            排序项
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.OrderByItem.#ctor(System.String,System.Boolean,System.Type,System.Boolean,System.String)">
            <summary>
            初始化排序项
            </summary>
            <param name="order">排序列</param>
            <param name="desc">是否倒排</param>
            <param name="type">实体类型</param>
            <param name="raw">使用原始值</param>
            <param name="prefix">前缀</param>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.OrderByItem.Order">
            <summary>
            排序列
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.OrderByItem.Column">
            <summary>
            排序列,不带前缀
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.OrderByItem.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.OrderByItem.Desc">
            <summary>
            是否倒排
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.OrderByItem.Type">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.OrderByItem.Raw">
            <summary>
            使用原始值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.OrderByItem.ToSql(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            获取Sql
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.OrderByItem.GetPrefix(KissU.Util.Datas.Sql.Builders.IEntityAliasRegister)">
            <summary>
            获取前缀
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.ParameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.ParameterManager._dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.ParameterManager._params">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.ParameterManager._paramIndex">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ParameterManager.#ctor(KissU.Util.Datas.Sql.Builders.IDialect,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            初始化参数管理器
            </summary>
            <param name="dialect">Sql方言</param>
            <param name="data">参数集合</param>
            <param name="index">参数索引</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ParameterManager.GenerateName">
            <summary>
            创建参数名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ParameterManager.GetParams">
            <summary>
            获取参数列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ParameterManager.Add(System.String,System.Object,System.Nullable{KissU.Util.Datas.Queries.Operator})">
            <summary>
            添加参数,如果参数已存在则替换
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ParameterManager.GetValue(System.Object,System.Nullable{KissU.Util.Datas.Queries.Operator})">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ParameterManager.Clone">
            <summary>
            复制副本
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ParameterManager.Clear">
            <summary>
            清空参数
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.ParamLiteralsResolver">
            <summary>
            参数字面值解析器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.ParamLiteralsResolver.GetParamLiterals(System.Object)">
            <summary>
            获取参数字面值
            </summary>
            <param name="value">参数值</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.PredicateExpressionResolver">
            <summary>
            谓词表达式解析器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.PredicateExpressionResolver._helper">
            <summary>
            辅助操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.PredicateExpressionResolver.#ctor(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.IParameterManager)">
            <summary>
            初始化谓词表达式解析器
            </summary>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.PredicateExpressionResolver.Resolve``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            解析谓词表达式
            </summary>
            <typeparam name="TEntiy">实体类型</typeparam>
            <param name="expression">谓词表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.PredicateExpressionResolver.ResolveExpression(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            解析谓词表达式
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.PredicateExpressionResolver.ResolveOrExpression(System.Linq.Expressions.BinaryExpression,System.Type)">
            <summary>
            解析Or表达式
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.PredicateExpressionResolver.ResolveAndExpression(System.Linq.Expressions.BinaryExpression,System.Type)">
            <summary>
            解析And表达式
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase._parameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase._dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase._selectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase._fromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase._joinClause">
            <summary>
            Join子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase._whereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase._groupByClause">
            <summary>
            GroupBy子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase._orderByClause">
            <summary>
            OrderBy子句
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase._paramLiteralsResolver">
            <summary>
            参数字面值解析器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase._isAddFilters">
            <summary>
            是否已添加过滤器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase._excludedFilters">
            <summary>
            已排除过滤器集合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.#ctor(KissU.Util.Datas.Sql.Matedatas.IEntityMatedata,KissU.Util.Datas.Sql.Matedatas.ITableDatabase,KissU.Util.Datas.Sql.Builders.IParameterManager)">
            <summary>
            初始化Sql生成器
            </summary>
            <param name="matedata">实体元数据解析器</param>
            <param name="tableDatabase">表数据库</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.EntityMatedata">
            <summary>
            实体元数据解析器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.TableDatabase">
            <summary>
            表数据库
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.EntityResolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.AliasRegister">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ParameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.Dialect">
            <summary>
            Sql方言
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.SelectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.FromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.JoinClause">
            <summary>
            Join子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.WhereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.GroupByClause">
            <summary>
            GroupBy子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.OrderByClause">
            <summary>
            OrderBy子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ParamLiteralsResolver">
            <summary>
            参数字面值解析器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.OffsetParam">
            <summary>
            跳过行数参数名
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.LimitParam">
            <summary>
            限制行数参数名
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.UnionItems">
            <summary>
            联合操作项集合
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CteItems">
            <summary>
            公用表表达式CTE集合
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.Pager">
            <summary>
            分页
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.IsUnion">
            <summary>
            是否包含联合操作
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.IsGroup">
            <summary>
            是否包含分组操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreateParameterManager">
            <summary>
            创建参数管理器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.GetDialect">
            <summary>
            获取Sql方言
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreateSelectClause">
            <summary>
            创建Select子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreateFromClause">
            <summary>
            创建From子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreateJoinClause">
            <summary>
            创建Join子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreatewWhereClause">
            <summary>
            创建Where子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreateGroupByClause">
            <summary>
            创建分组子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreateOrderByClause">
            <summary>
            创建排序子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.GetParamLiteralsResolver">
            <summary>
            获取参数字面值解析器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.Clone">
            <summary>
            复制Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.Clone(KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase)">
            <summary>
            复制Sql生成器
            </summary>
            <param name="sqlBuilder">源生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ClearSelect">
            <summary>
            清空Select子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ClearFrom">
            <summary>
            清空From子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ClearJoin">
            <summary>
            清空Join子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ClearWhere">
            <summary>
            清空Where子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ClearGroupBy">
            <summary>
            清空GroupBy子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ClearOrderBy">
            <summary>
            清空OrderBy子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ClearSqlParams">
            <summary>
            清空Sql参数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ClearPageParams">
            <summary>
            清空分页参数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ClearUnionBuilders">
            <summary>
            清空联合操作项
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ClearCte">
            <summary>
            清空公用表表达式
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.New">
            <summary>
            创建Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ToDebugSql">
            <summary>
            生成调试Sql语句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.GetDebugSql(System.String)">
            <summary>
            获取调试Sql
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.ToSql">
            <summary>
            生成Sql语句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.IsLimit">
            <summary>
            是否限制行数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreateSql(System.Text.StringBuilder)">
            <summary>
            创建Sql语句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreateCte(System.Text.StringBuilder)">
            <summary>
            创建CTE
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.GetCteKeyWord">
            <summary>
            获取CTE关键字
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreateSqlByUnion(System.Text.StringBuilder)">
            <summary>
            创建Sql语句 - 联合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreateSqlByNoUnion(System.Text.StringBuilder)">
            <summary>
            创建Sql语句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.AppendSql(System.Text.StringBuilder,System.String)">
            <summary>
            添加Sql
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.AppendSelect(System.Text.StringBuilder)">
            <summary>
            添加Select子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.AppendFrom(System.Text.StringBuilder)">
            <summary>
            添加From子句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.AddFilters">
            <summary>
            添加过滤器列表
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.AppendLimit(System.Text.StringBuilder)">
            <summary>
            添加分页Sql
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.CreateLimitSql">
            <summary>
            创建分页Sql
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.AddParam(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.GetParams">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.GetCondition">
            <summary>
            获取查询条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.Skip(System.Int32)">
            <summary>
            设置跳过行数
            </summary>
            <param name="count">跳过的行数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.GetOffsetParam">
            <summary>
            获取跳过行数的参数名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.Take(System.Int32)">
            <summary>
            设置获取行数
            </summary>
            <param name="count">获取的行数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.GetLimitParam">
            <summary>
            获取限制行数的参数名
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.Page(KissU.Util.Domains.Repositories.IPager)">
            <summary>
            设置分页
            </summary>
            <param name="pager">分页参数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Core.SqlBuilderBase.IgnoreFilter``1">
            <summary>
            忽略过滤器
            </summary>
            <typeparam name="TSqlFilter">Sql过滤器类型</typeparam>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Extensions.Extensions">
            <summary>
            实体解析器扩展
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Extensions.Extensions.GetTableAndSchema(KissU.Util.Datas.Sql.Builders.IEntityResolver,System.Type)">
            <summary>
            获取表，带架构
            </summary>
            <param name="resolver">实体解析器</param>
            <param name="entity">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Extensions.Extensions.GetAlias(KissU.Util.Datas.Sql.Builders.IEntityResolver,System.Type,System.String)">
            <summary>
            获取别名，如果别名为空，返回表名
            </summary>
            <param name="resolver">实体解析器</param>
            <param name="entity">实体类型</param>
            <param name="alias">别名</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Filters.IsDeletedFilter">
            <summary>
            逻辑删除过滤器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Filters.IsDeletedFilter.Filter(KissU.Util.Datas.Sql.Builders.Core.SqlContext)">
            <summary>
            过滤
            </summary>
            <param name="context">Sql查询执行上下文</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Filters.IsDeletedFilter.Filter(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Matedatas.IEntityMatedata,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.IJoinClause,KissU.Util.Datas.Sql.Builders.IWhereClause,System.Type,System.String)">
            <summary>
            过滤
            </summary>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Filters.SqlFilterCollection">
            <summary>
            Sql过滤器集合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Filters.SqlFilterCollection.#cctor">
            <summary>
            初始化Sql过滤器集合
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Builders.Filters.SqlFilterCollection.Filters">
            <summary>
            Sql查询过滤器集合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Filters.SqlFilterCollection.Add(KissU.Util.Datas.Sql.Builders.ISqlFilter)">
            <summary>
            添加Sql过滤器
            </summary>
            <param name="filter">Sql查询过滤器</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Builders.Internal.Helper">
            <summary>
            Sql生成器辅助操作
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Internal.Helper._dialect">
            <summary>
            方言
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Internal.Helper._resolver">
            <summary>
            实体解析器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Internal.Helper._register">
            <summary>
            实体别名注册器
            </summary>
        </member>
        <member name="F:KissU.Util.Datas.Sql.Builders.Internal.Helper._parameterManager">
            <summary>
            参数管理器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.#ctor(KissU.Util.Datas.Sql.Builders.IDialect,KissU.Util.Datas.Sql.Builders.IEntityResolver,KissU.Util.Datas.Sql.Builders.IEntityAliasRegister,KissU.Util.Datas.Sql.Builders.IParameterManager)">
            <summary>
            初始化Sql生成器辅助操作
            </summary>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.GetColumn(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            获取处理后的列名
            </summary>
            <param name="expression">表达式</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.GetColumn``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取处理后的列名
            </summary>
            <param name="expression">列名表达式</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.GetColumn(System.String,System.Type)">
            <summary>
            获取处理后的列名
            </summary>
            <param name="column">列名</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.GetColumn(System.String)">
            <summary>
            获取处理后的列名
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            获取值
            </summary>
            <returns>表达式</returns>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.CreateCondition(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            创建查询条件并添加参数
            </summary>
            <param name="expression">表达式</param>
            <param name="type">实体类型</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.CreateCondition(System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            创建查询条件并添加参数
            </summary>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.IsInCondition(KissU.Util.Datas.Queries.Operator,System.Object)">
            <summary>
            是否In条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.IsNotInCondition(KissU.Util.Datas.Queries.Operator,System.Object)">
            <summary>
            是否Not In条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.CreateInCondition(System.String,System.Collections.IEnumerable,System.Boolean)">
            <summary>
            创建In条件
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.GenerateParamName(System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            获取参数名
            </summary>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.Between(System.String,System.Object,System.Object,KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Builders.Internal.Helper.ResolveSql(System.String,KissU.Util.Datas.Sql.Builders.IDialect)">
            <summary>
            解析Sql
            </summary>
            <param name="sql">Sql语句</param>
            <param name="dialect">Sql方言</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Extensions">
            <summary>
            公用表表达式CTE操作扩展
            </summary>
            <summary>
            From子句扩展
            </summary>
            <summary>
            GroupBy子句扩展
            </summary>
            <summary>
            From子句扩展
            </summary>
            <summary>
            OrderBy子句扩展
            </summary>
            <summary>
            Select子句扩展
            </summary>
            <summary>
            Sql生成器扩展
            </summary>
            <summary>
            Sql查询对象扩展 - 杂项
            </summary>
            <summary>
            Sql查询对象扩展 - 查询相关
            </summary>
            <summary>
            Sql查询对象扩展 - 拼接Sql相关
            </summary>
            <summary>
            联合操作扩展
            </summary>
            <summary>
            Where子句扩展
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.With``1(``0,System.String,KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置公用表表达式CTE
            </summary>
            <param name="source">源</param>
            <param name="name">公用表表达式CTE的名称</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.From``1(``0,System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <param name="source">源</param>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.From``1(``0,KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询表
            </summary>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.From``1(``0,System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询表
            </summary>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendFrom``1(``0,System.String)">
            <summary>
            添加到From子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendFrom``1(``0,System.String,System.Boolean)">
            <summary>
            添加到From子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.GroupBy``1(``0,System.String,System.String)">
            <summary>
            分组
            </summary>
            <param name="source">源</param>
            <param name="columns">分组字段,范例：a.Id,b.Name</param>
            <param name="having">分组条件,范例：Count(*) > 1</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendGroupBy``1(``0,System.String)">
            <summary>
            添加到GroupBy子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendGroupBy``1(``0,System.String,System.Boolean)">
            <summary>
            添加到GroupBy子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Join``1(``0,System.String,System.String)">
            <summary>
            内连接
            </summary>
            <param name="source">源</param>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Join``1(``0,KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            内连接子查询
            </summary>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Join``1(``0,System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            内连接子查询
            </summary>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendJoin``1(``0,System.String)">
            <summary>
            添加到内连接子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendJoin``1(``0,System.String,System.Boolean)">
            <summary>
            添加到内连接子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.LeftJoin``1(``0,System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <param name="source">源</param>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.LeftJoin``1(``0,KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            左外连接子查询
            </summary>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.LeftJoin``1(``0,System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            左外连接子查询
            </summary>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendLeftJoin``1(``0,System.String)">
            <summary>
            添加到左外连接子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendLeftJoin``1(``0,System.String,System.Boolean)">
            <summary>
            添加到左外连接子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.RightJoin``1(``0,System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <param name="source">源</param>
            <param name="table">表名</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.RightJoin``1(``0,KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            右外连接子查询
            </summary>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.RightJoin``1(``0,System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            右外连接子查询
            </summary>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
            <param name="alias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendRightJoin``1(``0,System.String)">
            <summary>
            添加到右外连接子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendRightJoin``1(``0,System.String,System.Boolean)">
            <summary>
            添加到右外连接子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.On``1(``0,KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            设置连接条件
            </summary>
            <param name="source">源</param>
            <param name="condition">连接条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.On``1(``0,System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendOn``1(``0,System.String)">
            <summary>
            添加到On子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.OrderBy``1(``0,System.String,System.String)">
            <summary>
            排序
            </summary>
            <param name="source">源</param>
            <param name="order">排序列表,范例：a.Id,b.Name desc</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendOrderBy``1(``0,System.String)">
            <summary>
            添加到OrderBy子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendOrderBy``1(``0,System.String,System.Boolean)">
            <summary>
            添加到OrderBy子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Distinct``1(``0)">
            <summary>
            过滤重复记录
            </summary>
            <param name="source">源</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Count``1(``0,System.String)">
            <summary>
            求总行数
            </summary>
            <param name="source">源</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Count``1(``0,System.String,System.String)">
            <summary>
            求总行数
            </summary>
            <param name="source">源</param>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Sum``1(``0,System.String,System.String)">
            <summary>
            求和
            </summary>
            <param name="source">源</param>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Avg``1(``0,System.String,System.String)">
            <summary>
            求平均值
            </summary>
            <param name="source">源</param>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Max``1(``0,System.String,System.String)">
            <summary>
            求最大值
            </summary>
            <param name="source">源</param>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Min``1(``0,System.String,System.String)">
            <summary>
            求最小值
            </summary>
            <param name="source">源</param>
            <param name="column">列</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Select``1(``0,System.String,System.String)">
            <summary>
            设置列名
            </summary>
            <param name="source">源</param>
            <param name="columns">列名,范例：a.AppId As Id,a.Name</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Select``1(``0,KissU.Util.Datas.Sql.ISqlBuilder,System.String)">
            <summary>
            设置子查询列
            </summary>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Select``1(``0,System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.String)">
            <summary>
            设置子查询列
            </summary>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendSelect``1(``0,System.String)">
            <summary>
            添加到Select子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendSelect``1(``0,System.String,System.Boolean)">
            <summary>
            添加到Select子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.RemoveSelect``1(``0,System.String,System.String)">
            <summary>
            移除列名
            </summary>
            <param name="source">源</param>
            <param name="columns">列名,范例：a.AppId,a.Name</param>
            <param name="tableAlias">表别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Count``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求总行数
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Sum``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求和
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Avg``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求平均值
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Max``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最大值
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Min``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最小值
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Select``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Boolean)">
            <summary>
            设置列名
            </summary>
            <param name="source">源</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Select``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            设置列名
            </summary>
            <param name="source">源</param>
            <param name="columns">列名,范例：t => new object[] { t.Id, t.Name }</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Select``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            设置列名
            </summary>
            <param name="source">源</param>
            <param name="column">列名,范例：t => t.Name，支持字典批量设置列和列别名，
            范例：Select&lt;Sample&gt;( t => new Dictionary&lt;object, string&gt; { { t.Email, "e" }, { t.Url, "u" } } );</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.RemoveSelect``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            移除列名
            </summary>
            <param name="source">源</param>
            <param name="columns">列名,范例：t => new object[] { t.Id, t.Name }</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.RemoveSelect``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            移除列名
            </summary>
            <param name="source">源</param>
            <param name="column">列名,范例：t => t.Name，支持字典批量设置列和列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.From``1(KissU.Util.Datas.Sql.ISqlBuilder,System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <param name="source">源</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Join``1(KissU.Util.Datas.Sql.ISqlBuilder,System.String,System.String)">
            <summary>
            内连接
            </summary>
            <param name="source">源</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.LeftJoin``1(KissU.Util.Datas.Sql.ISqlBuilder,System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <param name="source">源</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.RightJoin``1(KissU.Util.Datas.Sql.ISqlBuilder,System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <param name="source">源</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.On``2(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="source">源</param>
            <param name="left">左表列名,范例：t => t.Name</param>
            <param name="right">右表列名,范例：t => t.Name</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.On``2(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            设置连接条件
            </summary>
            <param name="source">源</param>
            <param name="expression">条件表达式,范例：(l,r) => l.Id == r.OrderId</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Or``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="source">源</param>
            <param name="conditions">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.OrIf``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Or连接条件
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.OrIf``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="predicates">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.OrIfNotEmpty``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="source">源</param>
            <param name="conditions">查询条件,如果表达式中的值为空，则忽略该查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">查询条件表达式,范例：t => t.Name.Contains("a") &amp;&amp; ( t.Code == "b" || t.Age > 1 )</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder},KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIf``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Boolean,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIf``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            设置查询条件
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="expression">查询条件表达式,范例：t => t.Name.Contains("a") &amp;&amp; ( t.Code == "b" || t.Age > 1 )</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIf``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder,System.Boolean,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="subBuilder">子查询Sql生成器</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIf``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.Boolean,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="builder">Sql生成器</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="action">子查询操作</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIfNotEmpty``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值,如果值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIfNotEmpty``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">查询条件表达式,如果参数值为空，则忽略该查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Equal``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置相等查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotEqual``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置不相等查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Greater``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置大于查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Less``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置小于查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.GreaterEqual``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置大于等于查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.LessEqual``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置小于等于查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Contains``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置模糊匹配查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Starts``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置头匹配查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Ends``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置尾匹配查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsNull``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Null查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsNotNull``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Not Null查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsEmpty``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置空条件，范例：[Name] Is Null Or [Name]=''
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsNotEmpty``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置非空条件，范例：[Name] Is Not Null And [Name]&lt;&gt;''
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.In``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.In``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.In``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotIn``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotIn``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotIn``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int32},System.Nullable{System.Int32},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Double},System.Nullable{System.Double},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <param name="source">源</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.GroupBy``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            分组
            </summary>
            <param name="source">源</param>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">分组字段,范例：t => t.Name</param>
            <param name="having">分组条件,范例：Count(*) > 1</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.GroupBy``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            分组
            </summary>
            <param name="source">源</param>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="columns">分组字段</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.OrderBy``1(KissU.Util.Datas.Sql.ISqlBuilder,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            排序
            </summary>
            <param name="source">源</param>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">排序列,范例：t => t.Name</param>
            <param name="desc">是否倒排</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ClearAfterExecution(KissU.Util.Datas.Sql.ISqlQuery,System.Boolean)">
            <summary>
            在执行之后清空Sql和参数，默认为 true
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="value">是否在执行之后清空Sql和参数，默认为 true</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.CloneBuilder(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            复制Sql生成器
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NewBuilder(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            创建一个新的Sql生成器
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.GetDebugSql(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            获取调试Sql语句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Clear(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            清空
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ClearSelect(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            清空Select子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ClearFrom(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            清空From子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ClearJoin(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            清空Join子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ClearWhere(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            清空Where子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ClearGroupBy(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            清空GroupBy子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ClearOrderBy(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            清空OrderBy子句
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AddParam(KissU.Util.Datas.Sql.ISqlQuery,System.String,System.Object)">
            <summary>
            添加Sql参数
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ClearSqlParams(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            清空Sql参数
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ClearPageParams(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            清空分页参数
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IgnoreFilter``1(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            忽略过滤器
            </summary>
            <typeparam name="TSqlFilter">Sql过滤器类型</typeparam>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IgnoreDeletedFilter(KissU.Util.Datas.Sql.ISqlQuery)">
            <summary>
            忽略逻辑删除过滤器
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToStringAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取字符串值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToInt(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取整型值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToIntAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取整型值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToIntOrNull(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空整型值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToIntOrNullAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空整型值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToFloat(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToFloatAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToFloatOrNull(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToFloatOrNullAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空float值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDouble(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取double值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDoubleAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取double值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDoubleOrNull(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空double值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDoubleOrNullAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空double值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDecimal(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取decimal值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDecimalAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取decimal值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDecimalOrNull(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空decimal值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDecimalOrNullAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空decimal值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToBool(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取布尔值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToBoolAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取布尔值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToBoolOrNull(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空布尔值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToBoolOrNullAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空布尔值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDate(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取日期值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDateAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取日期值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDateOrNull(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空日期值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToDateOrNullAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空日期值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToGuid(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取Guid值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToGuidAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取Guid值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToGuidOrNull(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空Guid值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.ToGuidOrNullAsync(KissU.Util.Datas.Sql.ISqlQuery,System.Data.IDbConnection)">
            <summary>
            获取可空Guid值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Count``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求总行数
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Sum``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求和
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Avg``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求平均值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Max``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最大值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Min``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            求最小值
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Select``1(KissU.Util.Datas.Sql.ISqlQuery,System.Boolean)">
            <summary>
            设置列名
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Select``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}},System.Boolean)">
            <summary>
            设置列名
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="columns">列名,范例：t => new object[] { t.Id, t.Name }</param>
            <param name="propertyAsAlias">是否将属性名映射为列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Select``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            设置列名
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="column">列名,范例：t => t.Name，支持字典批量设置列和列别名，
            范例：Select&lt;Sample&gt;( t => new Dictionary&lt;object, string&gt; { { t.Email, "e" }, { t.Url, "u" } } );</param>
            <param name="columnAlias">列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.RemoveSelect``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            移除列名
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="columns">列名,范例：t => new object[] { t.Id, t.Name }</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.RemoveSelect``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            移除列名
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="column">列名,范例：t => t.Name，支持字典批量设置列和列别名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.From``1(KissU.Util.Datas.Sql.ISqlQuery,System.String,System.String)">
            <summary>
            设置表名
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Join``1(KissU.Util.Datas.Sql.ISqlQuery,System.String,System.String)">
            <summary>
            内连接
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.LeftJoin``1(KissU.Util.Datas.Sql.ISqlQuery,System.String,System.String)">
            <summary>
            左外连接
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.RightJoin``1(KissU.Util.Datas.Sql.ISqlQuery,System.String,System.String)">
            <summary>
            右外连接
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="alias">别名</param>
            <param name="schema">架构名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.On``2(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}},KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置连接条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="left">左表列名,范例：t => t.Name</param>
            <param name="right">右表列名,范例：t => t.Name</param>
            <param name="operator">条件运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.On``2(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,``1,System.Boolean}})">
            <summary>
            设置连接条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">条件表达式,范例：(l,r) => l.Id == r.OrderId</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Or``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="conditions">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.OrIf``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Or连接条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.OrIf``1(KissU.Util.Datas.Sql.ISqlQuery,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="predicates">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.OrIfNotEmpty``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
            <summary>
            Or连接条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="conditions">查询条件,如果表达式中的值为空，则忽略该查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">查询条件表达式,范例：t => t.Name.Contains("a") &amp;&amp; ( t.Code == "b" || t.Age > 1 )</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder},KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIf``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Boolean,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIf``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            设置查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">查询条件表达式,范例：t => t.Name.Contains("a") &amp;&amp; ( t.Code == "b" || t.Age > 1 )</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIf``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder,System.Boolean,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIf``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.Boolean,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="action">子查询操作</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIfNotEmpty``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值,如果值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIfNotEmpty``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            设置查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">查询条件表达式,如果参数值为空，则忽略该查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Equal``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置相等查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotEqual``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置不相等查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Greater``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置大于查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Less``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置小于查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.GreaterEqual``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置大于等于查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.LessEqual``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置小于等于查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Contains``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置模糊匹配查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Starts``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置头匹配查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Ends``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            设置尾匹配查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsNull``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Null查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsNotNull``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置Is Not Null查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsEmpty``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置空条件，范例：[Name] Is Null Or [Name]=''
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsNotEmpty``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            设置非空条件，范例：[Name] Is Not Null And [Name]&lt;&gt;''
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.In``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.In``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.In``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotIn``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotIn``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotIn``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Int32},System.Nullable{System.Int32},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Double},System.Nullable{System.Double},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Decimal},System.Nullable{System.Decimal},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="expression">列名表达式,范例：t => t.Name</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.GroupBy``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            分组
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="columns">分组字段</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.GroupBy``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            分组
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">分组字段,范例：t => t.Name</param>
            <param name="having">分组条件,范例：Count(*) > 1</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.OrderBy``1(KissU.Util.Datas.Sql.ISqlQuery,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            排序
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="column">排序列,范例：t => t.Name</param>
            <param name="desc">是否倒排</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Skip(KissU.Util.Datas.Sql.ISqlQuery,System.Int32)">
            <summary>
            设置跳过行数
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="count">跳过的行数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Take(KissU.Util.Datas.Sql.ISqlQuery,System.Int32)">
            <summary>
            设置获取行数
            </summary>
            <param name="sqlQuery">Sql查询对象</param>
            <param name="count">获取的行数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Union``1(``0,KissU.Util.Datas.Sql.ISqlBuilder[])">
            <summary>
            联合多个查询，Union会排除重复结果行
            </summary>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Union``1(``0,System.String,System.Collections.Generic.IEnumerable{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            联合操作
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Union``1(``0,System.Collections.Generic.IEnumerable{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            联合多个查询，Union会排除重复结果行
            </summary>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.UnionAll``1(``0,KissU.Util.Datas.Sql.ISqlBuilder[])">
            <summary>
            联合多个查询，Union All不会排除重复结果行
            </summary>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.UnionAll``1(``0,System.Collections.Generic.IEnumerable{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            联合多个查询，Union All不会排除重复结果行
            </summary>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Intersect``1(``0,KissU.Util.Datas.Sql.ISqlBuilder[])">
            <summary>
            交集
            </summary>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Intersect``1(``0,System.Collections.Generic.IEnumerable{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            交集
            </summary>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Except``1(``0,KissU.Util.Datas.Sql.ISqlBuilder[])">
            <summary>
            差集
            </summary>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Except``1(``0,System.Collections.Generic.IEnumerable{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            差集
            </summary>
            <param name="source">源</param>
            <param name="builders">Sql生成器列表</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.And``1(``0,KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            And连接条件
            </summary>
            <param name="source">源</param>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Or``1(``0,KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            Or连接条件
            </summary>
            <param name="source">源</param>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.OrIf``1(``0,KissU.Util.Datas.Sql.Builders.ICondition,System.Boolean)">
            <summary>
            Or连接条件
            </summary>
            <param name="source">源</param>
            <param name="predicate">查询条件</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(``0,KissU.Util.Datas.Sql.Builders.ICondition)">
            <summary>
            设置查询条件
            </summary>
            <param name="source">源</param>
            <param name="condition">查询条件</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(``0,System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(``0,System.String,KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Where``1(``0,System.String,System.Action{KissU.Util.Datas.Sql.ISqlBuilder},KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIf``1(``0,System.String,System.Object,System.Boolean,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIf``1(``0,System.String,KissU.Util.Datas.Sql.ISqlBuilder,System.Boolean,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="builder">子查询Sql生成器</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIf``1(``0,System.String,System.Action{KissU.Util.Datas.Sql.ISqlBuilder},System.Boolean,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置子查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
            <param name="condition">该值为true时添加查询条件，否则忽略</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.WhereIfNotEmpty``1(``0,System.String,System.Object,KissU.Util.Datas.Queries.Operator)">
            <summary>
            设置查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值,如果值为空，则忽略该查询条件</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Equal``1(``0,System.String,System.Object)">
            <summary>
            设置相等查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotEqual``1(``0,System.String,System.Object)">
            <summary>
            设置不相等查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Greater``1(``0,System.String,System.Object)">
            <summary>
            设置大于查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Less``1(``0,System.String,System.Object)">
            <summary>
            设置小于查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.GreaterEqual``1(``0,System.String,System.Object)">
            <summary>
            设置大于等于查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.LessEqual``1(``0,System.String,System.Object)">
            <summary>
            设置小于等于查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Contains``1(``0,System.String,System.Object)">
            <summary>
            设置模糊匹配查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Starts``1(``0,System.String,System.Object)">
            <summary>
            设置头匹配查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Ends``1(``0,System.String,System.Object)">
            <summary>
            设置尾匹配查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsNull``1(``0,System.String)">
            <summary>
            设置Is Null查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsNotNull``1(``0,System.String)">
            <summary>
            设置Is Not Null查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsEmpty``1(``0,System.String)">
            <summary>
            设置空条件，范例：[Name] Is Null Or [Name]=''
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.IsNotEmpty``1(``0,System.String)">
            <summary>
            设置非空条件，范例：[Name] Is Not Null And [Name]&lt;&gt;''
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.In``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置In条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.In``1(``0,System.String,KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置In条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.In``1(``0,System.String,System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置In条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotIn``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            设置Not In条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="values">值集合</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotIn``1(``0,System.String,KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not In条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotIn``1(``0,System.String,System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not In条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Exists``1(``0,KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Exists条件
            </summary>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Exists``1(``0,System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Exists条件
            </summary>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotExists``1(``0,KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            设置Not Exists条件
            </summary>
            <param name="source">源</param>
            <param name="builder">Sql生成器</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.NotExists``1(``0,System.Action{KissU.Util.Datas.Sql.ISqlBuilder})">
            <summary>
            设置Not Exists条件
            </summary>
            <param name="source">源</param>
            <param name="action">子查询操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(``0,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(``0,System.String,System.Nullable{System.Double},System.Nullable{System.Double},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(``0,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},KissU.Util.Datas.Queries.Boundary)">
            <summary>
            添加范围查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.Between``1(``0,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Nullable{KissU.Util.Datas.Queries.Boundary})">
            <summary>
            添加范围查询条件
            </summary>
            <param name="source">源</param>
            <param name="column">列名</param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="includeTime">是否包含时间</param>
            <param name="boundary">包含边界</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendWhere``1(``0,System.String)">
            <summary>
            添加到Where子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Extensions.AppendWhere``1(``0,System.String,System.Boolean)">
            <summary>
            添加到Where子句
            </summary>
            <param name="source">源</param>
            <param name="sql">Sql语句，说明：原样添加到Sql中，不会进行任何处理</param>
            <param name="condition">该值为true时添加Sql，否则忽略</param>
        </member>
        <member name="T:KissU.Util.Datas.Sql.Queries.SqlQueryBase">
            <summary>
            Sql查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.#ctor(KissU.Util.Datas.Sql.ISqlBuilder,KissU.Util.Datas.Sql.IDatabase,KissU.Util.Datas.Sql.Configs.SqlOptions)">
            <summary>
            初始化Sql查询对象
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="database">数据库</param>
            <param name="sqlOptions">Sql配置</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.GetOptions">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.Builder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.Database">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.SqlOptions">
            <summary>
            Sql查询配置
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.Params">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.SelectClause">
            <summary>
            Select子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.FromClause">
            <summary>
            From子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.JoinClause">
            <summary>
            Join子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.WhereClause">
            <summary>
            Where子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.GroupByClause">
            <summary>
            GroupBy子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.OrderByClause">
            <summary>
            OrderBy子句
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.IsUnion">
            <summary>
            是否包含联合操作
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.UnionItems">
            <summary>
            联合操作项集合
            </summary>
        </member>
        <member name="P:KissU.Util.Datas.Sql.Queries.SqlQueryBase.CteItems">
            <summary>
            公用表表达式CTE集合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.SetConnection(System.Data.IDbConnection)">
            <summary>
            设置数据库连接
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.GetConnection(System.Data.IDbConnection)">
            <summary>
            获取数据库连接
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.Clone">
            <summary>
            复制Sql查询对象
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.Config(System.Action{KissU.Util.Datas.Sql.Configs.SqlOptions})">
            <summary>
            配置
            </summary>
            <param name="configAction">配置操作</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ClearAfterExecution">
            <summary>
            在执行之后清空Sql和参数
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.GetDebugSql">
            <summary>
            获取调试Sql语句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.GetSql">
            <summary>
            Sql语句
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.GetBuilder">
            <summary>
            获取Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ToScalar(System.Data.IDbConnection)">
            <summary>
            获取单值
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ToScalarAsync(System.Data.IDbConnection)">
            <summary>
            获取单值
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.To``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ToAsync``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ToList``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ToListAsync``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ToPagerList``1(KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ToPagerList``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ToPagerListAsync``1(KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ToPagerListAsync``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.PagerQuery``1(System.Func{System.Collections.Generic.List{``0}},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            分页查询
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">获取列表操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.PagerQueryAsync``1(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}},KissU.Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            分页查询
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="func">获取列表操作</param>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ToListAsync``1(System.String,System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="sql">Sql语句</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ToPagerListAsync``1(System.String,System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="sql">Sql语句</param>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.Query``1(System.Func{System.Data.IDbConnection,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},``0},System.Data.IDbConnection)">
            <summary>
            查询
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="func">查询操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.QueryAsync``1(System.Func{System.Data.IDbConnection,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.Tasks.Task{``0}},System.Data.IDbConnection)">
            <summary>
            查询
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="func">查询操作</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.WriteTraceLog(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String)">
            <summary>
            写日志
            </summary>
            <param name="sql">Sql语句</param>
            <param name="parameters">参数</param>
            <param name="debugSql">调试Sql语句</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.GetPage(KissU.Util.Domains.Repositories.IPager)">
            <summary>
            获取分页参数
            </summary>
            <param name="parameter">分页参数</param>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.GetCountBuilder">
            <summary>
            获取行数Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.ClearCountBuilder(KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            清理行数Sql生成器
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.GetCountBuilderByUnion(KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            获取行数Sql生成器 - 联合
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.IsGroup(KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            是否分组
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.GetCountBuilderByGroup(KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            获取行数Sql生成器 - 分组
            </summary>
        </member>
        <member name="M:KissU.Util.Datas.Sql.Queries.SqlQueryBase.GetCountBuilder(KissU.Util.Datas.Sql.ISqlBuilder)">
            <summary>
            获取行数Sql生成器
            </summary>
        </member>
    </members>
</doc>
