"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PluginComponent = void 0;

var _core = require("@angular/core");

var viser = _interopRequireWildcard(require("viser"));

var _PluginService = require("./PluginService");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var PluginComponent = function () {
  function PluginComponent(context, vcRef) {
    this.config = {};
    this.context = context;
    this.vcRef = vcRef;
  }

  PluginComponent.prototype.ngAfterViewInit = function () {
    this.initPlugin();
  };

  PluginComponent.prototype.ngOnChanges = function (changes) {
    this.initPlugin();
  };

  PluginComponent.prototype.combineContentConfig = function (displayName, props, config) {
    var nameLowerCase = displayName.toLowerCase();
    config[nameLowerCase] = props;
  };

  PluginComponent.prototype.getProps = function (allProps) {
    var strippingProperties = ['chartDiv', 'combineContentConfig', 'config', 'constructor', 'context', 'vcRef', 'getProps', 'initPlugin', 'renderPlugin', 'ngOnInit', 'ngAfterViewInit', 'ngOnChanges'];

    if (allProps) {
      var properties = {};

      for (var key in allProps) {
        if (strippingProperties.indexOf(key) === -1) {
          properties[key] = allProps[key];
        }
      }

      return properties;
    }

    return allProps;
  };

  PluginComponent.prototype.initPlugin = function () {
    var name = this.constructor.name;
    var props = this.getProps(this);
    this.config = this.context.config;

    if (name === 'PluginComponent') {
      this.renderPlugin(true);
    } else if (name === 'Slider') {
      props.container = this.context.container;
      this.combineContentConfig(name, props, this.config);
    }
  };

  PluginComponent.prototype.renderPlugin = function (rerender) {
    viser.Plugin(this.config);
  };

  PluginComponent = __decorate([(0, _core.Component)({
    providers: [_PluginService.PluginContext],
    selector: 'v-plugin',
    template: "<div>\n    <v-slider></v-slider>\n  </div>"
  }), __metadata("design:paramtypes", [_PluginService.PluginContext, _core.ViewContainerRef])], PluginComponent);
  return PluginComponent;
}();

exports.PluginComponent = PluginComponent;