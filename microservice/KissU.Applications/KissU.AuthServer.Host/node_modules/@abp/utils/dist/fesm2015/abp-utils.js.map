{"version":3,"file":"abp-utils.js","sources":["ng://@abp/utils/lib/linked-list.ts","ng://@abp/utils/public-api.ts","ng://@abp/utils/abp-utils.ts"],"sourcesContent":["/* tslint:disable:no-non-null-assertion */\r\n\r\nimport compare from 'just-compare';\r\n\r\nexport class ListNode<T = any> {\r\n  next: ListNode | undefined;\r\n  previous: ListNode | undefined;\r\n  constructor(public readonly value: T) {}\r\n}\r\n\r\nexport class LinkedList<T = any> {\r\n  private first: ListNode<T> | undefined;\r\n  private last: ListNode<T> | undefined;\r\n  private size = 0;\r\n\r\n  get head(): ListNode<T> | undefined {\r\n    return this.first;\r\n  }\r\n  get tail(): ListNode<T> | undefined {\r\n    return this.last;\r\n  }\r\n  get length(): number {\r\n    return this.size;\r\n  }\r\n\r\n  private attach(\r\n    value: T,\r\n    previousNode: ListNode<T> | undefined,\r\n    nextNode: ListNode<T> | undefined,\r\n  ): ListNode<T> {\r\n    if (!previousNode) return this.addHead(value);\r\n\r\n    if (!nextNode) return this.addTail(value);\r\n\r\n    const node = new ListNode(value);\r\n    node.previous = previousNode;\r\n    previousNode.next = node;\r\n    node.next = nextNode;\r\n    nextNode.previous = node;\r\n\r\n    this.size++;\r\n\r\n    return node;\r\n  }\r\n\r\n  private attachMany(\r\n    values: T[],\r\n    previousNode: ListNode<T> | undefined,\r\n    nextNode: ListNode<T> | undefined,\r\n  ): ListNode<T>[] {\r\n    if (!values.length) return [];\r\n\r\n    if (!previousNode) return this.addManyHead(values);\r\n\r\n    if (!nextNode) return this.addManyTail(values);\r\n\r\n    const list = new LinkedList<T>();\r\n    list.addManyTail(values);\r\n    list.first!.previous = previousNode;\r\n    previousNode.next = list.first;\r\n    list.last!.next = nextNode;\r\n    nextNode.previous = list.last;\r\n\r\n    this.size += values.length;\r\n\r\n    return list.toNodeArray();\r\n  }\r\n\r\n  private detach(node: ListNode<T>) {\r\n    if (!node.previous) return this.dropHead();\r\n\r\n    if (!node.next) return this.dropTail();\r\n\r\n    node.previous.next = node.next;\r\n    node.next.previous = node.previous;\r\n\r\n    this.size--;\r\n\r\n    return node;\r\n  }\r\n\r\n  add(value: T) {\r\n    return {\r\n      after: (...params: [T] | [any, ListComparisonFn<T>]) =>\r\n        this.addAfter.call(this, value, ...params),\r\n      before: (...params: [T] | [any, ListComparisonFn<T>]) =>\r\n        this.addBefore.call(this, value, ...params),\r\n      byIndex: (position: number) => this.addByIndex(value, position),\r\n      head: () => this.addHead(value),\r\n      tail: () => this.addTail(value),\r\n    };\r\n  }\r\n\r\n  addMany(values: T[]) {\r\n    return {\r\n      after: (...params: [T] | [any, ListComparisonFn<T>]) =>\r\n        this.addManyAfter.call(this, values, ...params),\r\n      before: (...params: [T] | [any, ListComparisonFn<T>]) =>\r\n        this.addManyBefore.call(this, values, ...params),\r\n      byIndex: (position: number) => this.addManyByIndex(values, position),\r\n      head: () => this.addManyHead(values),\r\n      tail: () => this.addManyTail(values),\r\n    };\r\n  }\r\n\r\n  addAfter(value: T, previousValue: T): ListNode<T>;\r\n  addAfter(value: T, previousValue: any, compareFn: ListComparisonFn<T>): ListNode<T>;\r\n  addAfter(value: T, previousValue: any, compareFn: ListComparisonFn<T> = compare): ListNode<T> {\r\n    const previous = this.find(node => compareFn(node.value, previousValue));\r\n\r\n    return previous ? this.attach(value, previous, previous.next) : this.addTail(value);\r\n  }\r\n\r\n  addBefore(value: T, nextValue: T): ListNode<T>;\r\n  addBefore(value: T, nextValue: any, compareFn: ListComparisonFn<T>): ListNode<T>;\r\n  addBefore(value: T, nextValue: any, compareFn: ListComparisonFn<T> = compare): ListNode<T> {\r\n    const next = this.find(node => compareFn(node.value, nextValue));\r\n\r\n    return next ? this.attach(value, next.previous, next) : this.addHead(value);\r\n  }\r\n\r\n  addByIndex(value: T, position: number): ListNode<T> {\r\n    if (position < 0) position += this.size;\r\n    else if (position >= this.size) return this.addTail(value);\r\n\r\n    if (position <= 0) return this.addHead(value);\r\n\r\n    const next = this.get(position)!;\r\n\r\n    return this.attach(value, next.previous, next);\r\n  }\r\n\r\n  addHead(value: T): ListNode<T> {\r\n    const node = new ListNode(value);\r\n\r\n    node.next = this.first;\r\n\r\n    if (this.first) this.first.previous = node;\r\n    else this.last = node;\r\n\r\n    this.first = node;\r\n    this.size++;\r\n\r\n    return node;\r\n  }\r\n\r\n  addTail(value: T): ListNode<T> {\r\n    const node = new ListNode(value);\r\n\r\n    if (this.first) {\r\n      node.previous = this.last;\r\n      this.last!.next = node;\r\n      this.last = node;\r\n    } else {\r\n      this.first = node;\r\n      this.last = node;\r\n    }\r\n\r\n    this.size++;\r\n\r\n    return node;\r\n  }\r\n\r\n  addManyAfter(values: T[], previousValue: T): ListNode<T>[];\r\n  addManyAfter(values: T[], previousValue: any, compareFn: ListComparisonFn<T>): ListNode<T>[];\r\n  addManyAfter(\r\n    values: T[],\r\n    previousValue: any,\r\n    compareFn: ListComparisonFn<T> = compare,\r\n  ): ListNode<T>[] {\r\n    const previous = this.find(node => compareFn(node.value, previousValue));\r\n\r\n    return previous ? this.attachMany(values, previous, previous.next) : this.addManyTail(values);\r\n  }\r\n\r\n  addManyBefore(values: T[], nextValue: T): ListNode<T>[];\r\n  addManyBefore(values: T[], nextValue: any, compareFn: ListComparisonFn<T>): ListNode<T>[];\r\n  addManyBefore(\r\n    values: T[],\r\n    nextValue: any,\r\n    compareFn: ListComparisonFn<T> = compare,\r\n  ): ListNode<T>[] {\r\n    const next = this.find(node => compareFn(node.value, nextValue));\r\n\r\n    return next ? this.attachMany(values, next.previous, next) : this.addManyHead(values);\r\n  }\r\n\r\n  addManyByIndex(values: T[], position: number): ListNode<T>[] {\r\n    if (position < 0) position += this.size;\r\n\r\n    if (position <= 0) return this.addManyHead(values);\r\n\r\n    if (position >= this.size) return this.addManyTail(values);\r\n\r\n    const next = this.get(position)!;\r\n\r\n    return this.attachMany(values, next.previous, next);\r\n  }\r\n\r\n  addManyHead(values: T[]): ListNode<T>[] {\r\n    return values.reduceRight<ListNode<T>[]>((nodes, value) => {\r\n      nodes.unshift(this.addHead(value));\r\n      return nodes;\r\n    }, []);\r\n  }\r\n\r\n  addManyTail(values: T[]): ListNode<T>[] {\r\n    return values.map(value => this.addTail(value));\r\n  }\r\n\r\n  drop() {\r\n    return {\r\n      byIndex: (position: number) => this.dropByIndex(position),\r\n      byValue: (...params: [T] | [any, ListComparisonFn<T>]) =>\r\n        this.dropByValue.apply(this, params),\r\n      byValueAll: (...params: [T] | [any, ListComparisonFn<T>]) =>\r\n        this.dropByValueAll.apply(this, params),\r\n      head: () => this.dropHead(),\r\n      tail: () => this.dropTail(),\r\n    };\r\n  }\r\n\r\n  dropMany(count: number) {\r\n    return {\r\n      byIndex: (position: number) => this.dropManyByIndex(count, position),\r\n      head: () => this.dropManyHead(count),\r\n      tail: () => this.dropManyTail(count),\r\n    };\r\n  }\r\n\r\n  dropByIndex(position: number): ListNode<T> | undefined {\r\n    if (position < 0) position += this.size;\r\n\r\n    const current = this.get(position);\r\n\r\n    return current ? this.detach(current) : undefined;\r\n  }\r\n\r\n  dropByValue(value: T): ListNode<T> | undefined;\r\n  dropByValue(value: any, compareFn: ListComparisonFn<T>): ListNode<T> | undefined;\r\n  dropByValue(value: any, compareFn: ListComparisonFn<T> = compare): ListNode<T> | undefined {\r\n    const position = this.findIndex(node => compareFn(node.value, value));\r\n\r\n    return position < 0 ? undefined : this.dropByIndex(position);\r\n  }\r\n\r\n  dropByValueAll(value: T): ListNode<T>[];\r\n  dropByValueAll(value: any, compareFn: ListComparisonFn<T>): ListNode<T>[];\r\n  dropByValueAll(value: any, compareFn: ListComparisonFn<T> = compare): ListNode<T>[] {\r\n    const dropped: ListNode<T>[] = [];\r\n\r\n    for (let current = this.first, position = 0; current; position++, current = current.next) {\r\n      if (compareFn(current.value, value)) {\r\n        dropped.push(this.dropByIndex(position - dropped.length)!);\r\n      }\r\n    }\r\n\r\n    return dropped;\r\n  }\r\n\r\n  dropHead(): ListNode<T> | undefined {\r\n    const head = this.first;\r\n\r\n    if (head) {\r\n      this.first = head.next;\r\n\r\n      if (this.first) this.first.previous = undefined;\r\n      else this.last = undefined;\r\n\r\n      this.size--;\r\n\r\n      return head;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  dropTail(): ListNode<T> | undefined {\r\n    const tail = this.last;\r\n\r\n    if (tail) {\r\n      this.last = tail.previous;\r\n\r\n      if (this.last) this.last.next = undefined;\r\n      else this.first = undefined;\r\n\r\n      this.size--;\r\n\r\n      return tail;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  dropManyByIndex(count: number, position: number): ListNode<T>[] {\r\n    if (count <= 0) return [];\r\n\r\n    if (position < 0) position = Math.max(position + this.size, 0);\r\n    else if (position >= this.size) return [];\r\n\r\n    count = Math.min(count, this.size - position);\r\n\r\n    const dropped: ListNode<T>[] = [];\r\n\r\n    while (count--) {\r\n      const current = this.get(position);\r\n      dropped.push(this.detach(current!)!);\r\n    }\r\n\r\n    return dropped;\r\n  }\r\n\r\n  dropManyHead(count: Exclude<number, 0>): ListNode<T>[] {\r\n    if (count <= 0) return [];\r\n\r\n    count = Math.min(count, this.size);\r\n\r\n    const dropped: ListNode<T>[] = [];\r\n\r\n    while (count--) dropped.unshift(this.dropHead()!);\r\n\r\n    return dropped;\r\n  }\r\n\r\n  dropManyTail(count: Exclude<number, 0>): ListNode<T>[] {\r\n    if (count <= 0) return [];\r\n\r\n    count = Math.min(count, this.size);\r\n\r\n    const dropped: ListNode<T>[] = [];\r\n\r\n    while (count--) dropped.push(this.dropTail()!);\r\n\r\n    return dropped;\r\n  }\r\n\r\n  find(predicate: ListIteratorFn<T>): ListNode<T> | undefined {\r\n    for (let current = this.first, position = 0; current; position++, current = current.next) {\r\n      if (predicate(current, position, this)) return current;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  findIndex(predicate: ListIteratorFn<T>): number {\r\n    for (let current = this.first, position = 0; current; position++, current = current.next) {\r\n      if (predicate(current, position, this)) return position;\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  forEach<R = boolean>(iteratorFn: ListIteratorFn<T, R>) {\r\n    for (let node = this.first, position = 0; node; position++, node = node.next) {\r\n      iteratorFn(node, position, this);\r\n    }\r\n  }\r\n\r\n  get(position: number): ListNode<T> | undefined {\r\n    return this.find((_, index) => position === index);\r\n  }\r\n\r\n  indexOf(value: T): number;\r\n  indexOf(value: any, compareFn: ListComparisonFn<T>): number;\r\n  indexOf(value: any, compareFn: ListComparisonFn<T> = compare): number {\r\n    return this.findIndex(node => compareFn(node.value, value));\r\n  }\r\n\r\n  toArray(): T[] {\r\n    const array = new Array(this.size);\r\n\r\n    this.forEach((node, index) => (array[index!] = node.value));\r\n\r\n    return array;\r\n  }\r\n\r\n  toNodeArray(): ListNode<T>[] {\r\n    const array = new Array(this.size);\r\n\r\n    this.forEach((node, index) => (array[index!] = node));\r\n\r\n    return array;\r\n  }\r\n\r\n  toString(mapperFn: ListMapperFn<T> = JSON.stringify): string {\r\n    return this.toArray()\r\n      .map(value => mapperFn(value))\r\n      .join(' <-> ');\r\n  }\r\n\r\n  // Cannot use Generator type because of ng-packagr\r\n  *[Symbol.iterator](): any {\r\n    for (let node = this.first, position = 0; node; position++, node = node.next) {\r\n      yield node.value;\r\n    }\r\n  }\r\n}\r\n\r\nexport type ListMapperFn<T = any> = (value: T) => any;\r\n\r\nexport type ListComparisonFn<T = any> = (value1: T, value2: any) => boolean;\r\n\r\nexport type ListIteratorFn<T = any, R = boolean> = (\r\n  node: ListNode<T>,\r\n  index?: number,\r\n  list?: LinkedList,\r\n) => R;\r\n","/*\r\n * Public API Surface of utils\r\n */\r\n\r\nexport * from './lib/linked-list';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}